#define README_LENGTH 4117
const __attribute__((__progmem__)) char readme_data[README_LENGTH+1] =
"# DwarfOS\n"
"\n"
"DwarfOS (dOS) is a lightweight \"OS\" designed for microcontrollers such as Arduino. It aims to minimize dependency on large\n"
"libraries, providing essential functionalities tailored for resource-constrained environments. This README provides an\n"
"overview of the features and components included in dOS.\n"
"\n"
"## Features\n"
"\n"
"### Custom Time Management\n"
"\n"
"DwarfOS includes its own time management module (`mcu_clock.h`) for precise timekeeping. It supports real-time clock (\n"
"RTC) functionality when using a watch quartz.\n"
"\n"
"### Serial Communication\n"
"\n"
"Communication with external devices or host systems is facilitated through serial ports using the UART helper\n"
"module (`uart_helper.h`).\n"
"\n"
"### Standard Input Buffer\n"
"\n"
"The `input_queue.h` contains a circular buffer that dynamically adjusts its size. This buffer facilitates a `stdin` \n"
"interface, enabling the utilization of standard functions such as `printf` and `fgets`. An illustrative example of its usage \n"
"is provided in the `Dwarf-Example` repository.\n"
"\n"
"### Lazy Loading Strings from Flash\n"
"\n"
"Strings stored in flash memory can be lazily loaded into dynamic memory using the string repository\n"
"module (`string_repository.h`).\n"
"\n"
"### UTC/CET/CEST Timestamps\n"
"\n"
"DwarfOS provides support for generating timestamp strings in Coordinated Universal Time (UTC), Central European \n"
"Time (CET), and Central European Summer Time (CEST).\n"
"\n"
"### Integer to ASCII Conversion\n"
"\n"
"A helper function is included for converting integers to ASCII strings, facilitating data conversion and output.\n"
"### puts_PF Function\n"
"\n"
"The `puts_PF` function is a new addition to our standard input/output library as addition to avr's `puts_P` . It reads a null-terminated string from the \"far\" program memory beyond 64kB and writes it to the standard output. This function is only available on AVR microcontrollers that support the ELPM instruction.\n"
"\n"
"### Generation of Textfiles in Program Memory\n"
"\n"
"We've introduced a feature to generate text files in program memory. This is useful for storing large amounts of static text data, consuming only 2 bytes of RAM for each array. The `convertStringsToPGMTextFile` function is used to convert an array of strings into a format that can be stored in program memory.\n"
"\n"
"### Reading Text Files from Flash Memory\n"
"\n"
"The `flash_helper.c` file now includes functions for reading data from flash memory. These functions are particularly useful for retrieving data that has been stored in flash memory, such as the text files generated by `convertStringsToPGMTextFile`. The `createFileString_P` and `putFileString_P` functions can load strings from these text files stored in flash memory or directly put them to stdout without RAM consumption. Using the `addressOf` macro enables writing code that is independent of whether the files are in near or far program memory. The only distinction the user will notice is the volume of data that can be uploaded.\n"
"\n"
"## Module Separation and Memory Management\n"
"\n"
"One of the notable features of dOS is its modular architecture, allowing for separate loading and unloading of\n"
"modules.\n"
"\n"
"Modules such as the string repository, UART helper, and time management are loaded into the heap memory, enabling\n"
"flexible memory management.\n"
"\n"
"This approach allows users to load only the necessary modules, conserving memory resources on the microcontroller. \n"
"Additionally, it facilitates easy modification; users can utilize function pointers to redirect to custom implementations, \n"
"making it possible to mock individual functions in unit tests.\n"
"\n"
"## Usage\n"
"\n"
"The description of usage is provided in `main.c` and `setup.c` with an ample number of comments aimed at aiding beginners.\n"
"An additional example demonstrating how to include dOS into a project as a Git submodule, utilizing its own CMakeLists with \n"
"library build options, is provided in the `Dwarf-Example` repository.\n"
"\n"
"## Contributing\n"
"\n"
"Contributions to improve or expand this library are welcome! If you find any issues or have suggestions for\n"
"enhancements, feel free to open an issue or submit a pull request.\n"
"\n"
"## License\n"
"\n"
"This library is licensed under the MIT License. See the `LICENSE` file for details.\n"
;

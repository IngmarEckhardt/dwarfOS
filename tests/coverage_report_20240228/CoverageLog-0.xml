<?xml version="1.0" encoding="UTF-8"?>
<Site BuildName="Windows-ninja.exe"
	BuildStamp="20240228-2045-Experimental"
	Name="DESKTOP-OM3S92P"
	Generator="ctest-3.27.8"
	CompilerName=""
	CompilerVersion=""
	OSName="Windows"
	Hostname="DESKTOP-OM3S92P"
	OSRelease=" Professional"
	OSVersion=" (Build 19045)"
	OSPlatform="AMD64"
	Is64Bits="1"
	VendorString="AuthenticAMD"
	VendorID="Advanced Micro Devices"
	FamilyID="15"
	ModelID="1"
	ProcessorCacheSize="96"
	NumberOfLogicalCPU="8"
	NumberOfPhysicalCPU="8"
	TotalVirtualMemory="35636"
	TotalPhysicalMemory="32701"
	LogicalProcessorsPerPhysical="1"
	ProcessorClockFrequency="3800"
	>
	<CoverageLog>
		<StartDateTime>Feb 28 21:45 Mitteleurop[NON-UTF-8-BYTE-0xE4]ische Zeit</StartDateTime>
		<StartTime>1709153139</StartTime>
		<File Name="unity.c" FullPath="./extern/Unity/src/unity.c">
			<Report>
				<Line Number="0" Count="-1">/* =========================================================================</Line>
				<Line Number="1" Count="-1">    Unity Project - A Test Framework for C</Line>
				<Line Number="2" Count="-1">    Copyright (c) 2007-21 Mike Karlesky, Mark VanderVoord, Greg Williams</Line>
				<Line Number="3" Count="-1">    [Released under MIT License. Please refer to license.txt for details]</Line>
				<Line Number="4" Count="-1">============================================================================ */</Line>
				<Line Number="5" Count="-1"></Line>
				<Line Number="6" Count="-1">#include "unity.h"</Line>
				<Line Number="7" Count="-1"></Line>
				<Line Number="8" Count="-1">#ifndef UNITY_PROGMEM</Line>
				<Line Number="9" Count="-1">#define UNITY_PROGMEM</Line>
				<Line Number="10" Count="-1">#endif</Line>
				<Line Number="11" Count="-1"></Line>
				<Line Number="12" Count="-1">/* If omitted from header, declare overrideable prototypes here so they're ready for use */</Line>
				<Line Number="13" Count="-1">#ifdef UNITY_OMIT_OUTPUT_CHAR_HEADER_DECLARATION</Line>
				<Line Number="14" Count="-1">void UNITY_OUTPUT_CHAR(int);</Line>
				<Line Number="15" Count="-1">#endif</Line>
				<Line Number="16" Count="-1"></Line>
				<Line Number="17" Count="-1">/* Helpful macros for us to use here in Assert functions */</Line>
				<Line Number="18" Count="-1">#define UNITY_FAIL_AND_BAIL         do { Unity.CurrentTestFailed  = 1; UNITY_OUTPUT_FLUSH(); TEST_ABORT(); } while (0)</Line>
				<Line Number="19" Count="-1">#define UNITY_IGNORE_AND_BAIL       do { Unity.CurrentTestIgnored = 1; UNITY_OUTPUT_FLUSH(); TEST_ABORT(); } while (0)</Line>
				<Line Number="20" Count="-1">#define RETURN_IF_FAIL_OR_IGNORE    do { if (Unity.CurrentTestFailed || Unity.CurrentTestIgnored) { TEST_ABORT(); } } while (0)</Line>
				<Line Number="21" Count="-1"></Line>
				<Line Number="22" Count="-1">struct UNITY_STORAGE_T Unity;</Line>
				<Line Number="23" Count="-1"></Line>
				<Line Number="24" Count="-1">#ifdef UNITY_OUTPUT_COLOR</Line>
				<Line Number="25" Count="-1">const char UNITY_PROGMEM UnityStrOk[]                            = "\033[42mOK\033[0m";</Line>
				<Line Number="26" Count="-1">const char UNITY_PROGMEM UnityStrPass[]                          = "\033[42mPASS\033[0m";</Line>
				<Line Number="27" Count="-1">const char UNITY_PROGMEM UnityStrFail[]                          = "\033[41mFAIL\033[0m";</Line>
				<Line Number="28" Count="-1">const char UNITY_PROGMEM UnityStrIgnore[]                        = "\033[43mIGNORE\033[0m";</Line>
				<Line Number="29" Count="-1">#else</Line>
				<Line Number="30" Count="-1">const char UNITY_PROGMEM UnityStrOk[]                            = "OK";</Line>
				<Line Number="31" Count="-1">const char UNITY_PROGMEM UnityStrPass[]                          = "PASS";</Line>
				<Line Number="32" Count="-1">const char UNITY_PROGMEM UnityStrFail[]                          = "FAIL";</Line>
				<Line Number="33" Count="-1">const char UNITY_PROGMEM UnityStrIgnore[]                        = "IGNORE";</Line>
				<Line Number="34" Count="-1">#endif</Line>
				<Line Number="35" Count="-1">static const char UNITY_PROGMEM UnityStrNull[]                   = "NULL";</Line>
				<Line Number="36" Count="-1">static const char UNITY_PROGMEM UnityStrSpacer[]                 = ". ";</Line>
				<Line Number="37" Count="-1">static const char UNITY_PROGMEM UnityStrExpected[]               = " Expected ";</Line>
				<Line Number="38" Count="-1">static const char UNITY_PROGMEM UnityStrWas[]                    = " Was ";</Line>
				<Line Number="39" Count="-1">static const char UNITY_PROGMEM UnityStrGt[]                     = " to be greater than ";</Line>
				<Line Number="40" Count="-1">static const char UNITY_PROGMEM UnityStrLt[]                     = " to be less than ";</Line>
				<Line Number="41" Count="-1">static const char UNITY_PROGMEM UnityStrOrEqual[]                = "or equal to ";</Line>
				<Line Number="42" Count="-1">static const char UNITY_PROGMEM UnityStrNotEqual[]               = " to be not equal to ";</Line>
				<Line Number="43" Count="-1">static const char UNITY_PROGMEM UnityStrElement[]                = " Element ";</Line>
				<Line Number="44" Count="-1">static const char UNITY_PROGMEM UnityStrByte[]                   = " Byte ";</Line>
				<Line Number="45" Count="-1">static const char UNITY_PROGMEM UnityStrMemory[]                 = " Memory Mismatch.";</Line>
				<Line Number="46" Count="-1">static const char UNITY_PROGMEM UnityStrDelta[]                  = " Values Not Within Delta ";</Line>
				<Line Number="47" Count="-1">static const char UNITY_PROGMEM UnityStrPointless[]              = " You Asked Me To Compare Nothing, Which Was Pointless.";</Line>
				<Line Number="48" Count="-1">static const char UNITY_PROGMEM UnityStrNullPointerForExpected[] = " Expected pointer to be NULL";</Line>
				<Line Number="49" Count="-1">static const char UNITY_PROGMEM UnityStrNullPointerForActual[]   = " Actual pointer was NULL";</Line>
				<Line Number="50" Count="-1">#ifndef UNITY_EXCLUDE_FLOAT</Line>
				<Line Number="51" Count="-1">static const char UNITY_PROGMEM UnityStrNot[]                    = "Not ";</Line>
				<Line Number="52" Count="-1">static const char UNITY_PROGMEM UnityStrInf[]                    = "Infinity";</Line>
				<Line Number="53" Count="-1">static const char UNITY_PROGMEM UnityStrNegInf[]                 = "Negative Infinity";</Line>
				<Line Number="54" Count="-1">static const char UNITY_PROGMEM UnityStrNaN[]                    = "NaN";</Line>
				<Line Number="55" Count="-1">static const char UNITY_PROGMEM UnityStrDet[]                    = "Determinate";</Line>
				<Line Number="56" Count="-1">static const char UNITY_PROGMEM UnityStrInvalidFloatTrait[]      = "Invalid Float Trait";</Line>
				<Line Number="57" Count="-1">#endif</Line>
				<Line Number="58" Count="-1">const char UNITY_PROGMEM UnityStrErrShorthand[]                  = "Unity Shorthand Support Disabled";</Line>
				<Line Number="59" Count="-1">const char UNITY_PROGMEM UnityStrErrFloat[]                      = "Unity Floating Point Disabled";</Line>
				<Line Number="60" Count="-1">const char UNITY_PROGMEM UnityStrErrDouble[]                     = "Unity Double Precision Disabled";</Line>
				<Line Number="61" Count="-1">const char UNITY_PROGMEM UnityStrErr64[]                         = "Unity 64-bit Support Disabled";</Line>
				<Line Number="62" Count="-1">static const char UNITY_PROGMEM UnityStrBreaker[]                = "-----------------------";</Line>
				<Line Number="63" Count="-1">static const char UNITY_PROGMEM UnityStrResultsTests[]           = " Tests ";</Line>
				<Line Number="64" Count="-1">static const char UNITY_PROGMEM UnityStrResultsFailures[]        = " Failures ";</Line>
				<Line Number="65" Count="-1">static const char UNITY_PROGMEM UnityStrResultsIgnored[]         = " Ignored ";</Line>
				<Line Number="66" Count="-1">#ifndef UNITY_EXCLUDE_DETAILS</Line>
				<Line Number="67" Count="-1">static const char UNITY_PROGMEM UnityStrDetail1Name[]            = UNITY_DETAIL1_NAME " ";</Line>
				<Line Number="68" Count="-1">static const char UNITY_PROGMEM UnityStrDetail2Name[]            = " " UNITY_DETAIL2_NAME " ";</Line>
				<Line Number="69" Count="-1">#endif</Line>
				<Line Number="70" Count="-1">/*-----------------------------------------------</Line>
				<Line Number="71" Count="-1"> * Pretty Printers &amp; Test Result Output Handlers</Line>
				<Line Number="72" Count="-1"> *-----------------------------------------------*/</Line>
				<Line Number="73" Count="-1"></Line>
				<Line Number="74" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="75" Count="-1">/* Local helper function to print characters. */</Line>
				<Line Number="76" Count="3094">static void UnityPrintChar(const char* pch)</Line>
				<Line Number="77" Count="-1">{</Line>
				<Line Number="78" Count="-1">    /* printable characters plus CR &amp; LF are printed */</Line>
				<Line Number="79" Count="3094">    if ((*pch &lt;= 126) &amp;&amp; (*pch &gt;= 32))</Line>
				<Line Number="80" Count="-1">    {</Line>
				<Line Number="81" Count="3094">        UNITY_OUTPUT_CHAR(*pch);</Line>
				<Line Number="82" Count="-1">    }</Line>
				<Line Number="83" Count="-1">    /* write escaped carriage returns */</Line>
				<Line Number="84" Count="0">    else if (*pch == 13)</Line>
				<Line Number="85" Count="-1">    {</Line>
				<Line Number="86" Count="0">        UNITY_OUTPUT_CHAR('\\');</Line>
				<Line Number="87" Count="0">        UNITY_OUTPUT_CHAR('r');</Line>
				<Line Number="88" Count="-1">    }</Line>
				<Line Number="89" Count="-1">    /* write escaped line feeds */</Line>
				<Line Number="90" Count="0">    else if (*pch == 10)</Line>
				<Line Number="91" Count="-1">    {</Line>
				<Line Number="92" Count="0">        UNITY_OUTPUT_CHAR('\\');</Line>
				<Line Number="93" Count="0">        UNITY_OUTPUT_CHAR('n');</Line>
				<Line Number="94" Count="-1">    }</Line>
				<Line Number="95" Count="-1">    /* unprintable characters are shown as codes */</Line>
				<Line Number="96" Count="-1">    else</Line>
				<Line Number="97" Count="-1">    {</Line>
				<Line Number="98" Count="0">        UNITY_OUTPUT_CHAR('\\');</Line>
				<Line Number="99" Count="0">        UNITY_OUTPUT_CHAR('x');</Line>
				<Line Number="100" Count="0">        UnityPrintNumberHex((UNITY_UINT)*pch, 2);</Line>
				<Line Number="101" Count="-1">    }</Line>
				<Line Number="102" Count="3094">}</Line>
				<Line Number="103" Count="-1"></Line>
				<Line Number="104" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="105" Count="-1">/* Local helper function to print ANSI escape strings e.g. "\033[42m". */</Line>
				<Line Number="106" Count="-1">#ifdef UNITY_OUTPUT_COLOR</Line>
				<Line Number="107" Count="-1">static UNITY_UINT UnityPrintAnsiEscapeString(const char* string)</Line>
				<Line Number="108" Count="-1">{</Line>
				<Line Number="109" Count="-1">    const char* pch = string;</Line>
				<Line Number="110" Count="-1">    UNITY_UINT count = 0;</Line>
				<Line Number="111" Count="-1"></Line>
				<Line Number="112" Count="-1">    while (*pch &amp;&amp; (*pch != 'm'))</Line>
				<Line Number="113" Count="-1">    {</Line>
				<Line Number="114" Count="-1">        UNITY_OUTPUT_CHAR(*pch);</Line>
				<Line Number="115" Count="-1">        pch++;</Line>
				<Line Number="116" Count="-1">        count++;</Line>
				<Line Number="117" Count="-1">    }</Line>
				<Line Number="118" Count="-1">    UNITY_OUTPUT_CHAR('m');</Line>
				<Line Number="119" Count="-1">    count++;</Line>
				<Line Number="120" Count="-1"></Line>
				<Line Number="121" Count="-1">    return count;</Line>
				<Line Number="122" Count="-1">}</Line>
				<Line Number="123" Count="-1">#endif</Line>
				<Line Number="124" Count="-1"></Line>
				<Line Number="125" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="126" Count="104">void UnityPrint(const char* string)</Line>
				<Line Number="127" Count="-1">{</Line>
				<Line Number="128" Count="104">    const char* pch = string;</Line>
				<Line Number="129" Count="-1"></Line>
				<Line Number="130" Count="104">    if (pch != NULL)</Line>
				<Line Number="131" Count="-1">    {</Line>
				<Line Number="132" Count="3198">        while (*pch)</Line>
				<Line Number="133" Count="-1">        {</Line>
				<Line Number="134" Count="-1">#ifdef UNITY_OUTPUT_COLOR</Line>
				<Line Number="135" Count="-1">            /* print ANSI escape code */</Line>
				<Line Number="136" Count="-1">            if ((*pch == 27) &amp;&amp; (*(pch + 1) == '['))</Line>
				<Line Number="137" Count="-1">            {</Line>
				<Line Number="138" Count="-1">                pch += UnityPrintAnsiEscapeString(pch);</Line>
				<Line Number="139" Count="-1">                continue;</Line>
				<Line Number="140" Count="-1">            }</Line>
				<Line Number="141" Count="-1">#endif</Line>
				<Line Number="142" Count="3094">            UnityPrintChar(pch);</Line>
				<Line Number="143" Count="3094">            pch++;</Line>
				<Line Number="144" Count="-1">        }</Line>
				<Line Number="145" Count="-1">    }</Line>
				<Line Number="146" Count="104">}</Line>
				<Line Number="147" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="148" Count="0">void UnityPrintLen(const char* string, const UNITY_UINT32 length)</Line>
				<Line Number="149" Count="-1">{</Line>
				<Line Number="150" Count="0">    const char* pch = string;</Line>
				<Line Number="151" Count="-1"></Line>
				<Line Number="152" Count="0">    if (pch != NULL)</Line>
				<Line Number="153" Count="-1">    {</Line>
				<Line Number="154" Count="0">        while (*pch &amp;&amp; ((UNITY_UINT32)(pch - string) &lt; length))</Line>
				<Line Number="155" Count="-1">        {</Line>
				<Line Number="156" Count="-1">            /* printable characters plus CR &amp; LF are printed */</Line>
				<Line Number="157" Count="0">            if ((*pch &lt;= 126) &amp;&amp; (*pch &gt;= 32))</Line>
				<Line Number="158" Count="-1">            {</Line>
				<Line Number="159" Count="0">                UNITY_OUTPUT_CHAR(*pch);</Line>
				<Line Number="160" Count="-1">            }</Line>
				<Line Number="161" Count="-1">            /* write escaped carriage returns */</Line>
				<Line Number="162" Count="0">            else if (*pch == 13)</Line>
				<Line Number="163" Count="-1">            {</Line>
				<Line Number="164" Count="0">                UNITY_OUTPUT_CHAR('\\');</Line>
				<Line Number="165" Count="0">                UNITY_OUTPUT_CHAR('r');</Line>
				<Line Number="166" Count="-1">            }</Line>
				<Line Number="167" Count="-1">            /* write escaped line feeds */</Line>
				<Line Number="168" Count="0">            else if (*pch == 10)</Line>
				<Line Number="169" Count="-1">            {</Line>
				<Line Number="170" Count="0">                UNITY_OUTPUT_CHAR('\\');</Line>
				<Line Number="171" Count="0">                UNITY_OUTPUT_CHAR('n');</Line>
				<Line Number="172" Count="-1">            }</Line>
				<Line Number="173" Count="-1">            /* unprintable characters are shown as codes */</Line>
				<Line Number="174" Count="-1">            else</Line>
				<Line Number="175" Count="-1">            {</Line>
				<Line Number="176" Count="0">                UNITY_OUTPUT_CHAR('\\');</Line>
				<Line Number="177" Count="0">                UNITY_OUTPUT_CHAR('x');</Line>
				<Line Number="178" Count="0">                UnityPrintNumberHex((UNITY_UINT)*pch, 2);</Line>
				<Line Number="179" Count="-1">            }</Line>
				<Line Number="180" Count="0">            pch++;</Line>
				<Line Number="181" Count="-1">        }</Line>
				<Line Number="182" Count="-1">    }</Line>
				<Line Number="183" Count="0">}</Line>
				<Line Number="184" Count="-1"></Line>
				<Line Number="185" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="186" Count="0">void UnityPrintNumberByStyle(const UNITY_INT number, const UNITY_DISPLAY_STYLE_T style)</Line>
				<Line Number="187" Count="-1">{</Line>
				<Line Number="188" Count="0">    if ((style &amp; UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)</Line>
				<Line Number="189" Count="-1">    {</Line>
				<Line Number="190" Count="0">        if (style == UNITY_DISPLAY_STYLE_CHAR)</Line>
				<Line Number="191" Count="-1">        {</Line>
				<Line Number="192" Count="-1">            /* printable characters plus CR &amp; LF are printed */</Line>
				<Line Number="193" Count="0">            UNITY_OUTPUT_CHAR('\'');</Line>
				<Line Number="194" Count="0">            if ((number &lt;= 126) &amp;&amp; (number &gt;= 32))</Line>
				<Line Number="195" Count="-1">            {</Line>
				<Line Number="196" Count="0">                UNITY_OUTPUT_CHAR((int)number);</Line>
				<Line Number="197" Count="-1">            }</Line>
				<Line Number="198" Count="-1">            /* write escaped carriage returns */</Line>
				<Line Number="199" Count="0">            else if (number == 13)</Line>
				<Line Number="200" Count="-1">            {</Line>
				<Line Number="201" Count="0">                UNITY_OUTPUT_CHAR('\\');</Line>
				<Line Number="202" Count="0">                UNITY_OUTPUT_CHAR('r');</Line>
				<Line Number="203" Count="-1">            }</Line>
				<Line Number="204" Count="-1">            /* write escaped line feeds */</Line>
				<Line Number="205" Count="0">            else if (number == 10)</Line>
				<Line Number="206" Count="-1">            {</Line>
				<Line Number="207" Count="0">                UNITY_OUTPUT_CHAR('\\');</Line>
				<Line Number="208" Count="0">                UNITY_OUTPUT_CHAR('n');</Line>
				<Line Number="209" Count="-1">            }</Line>
				<Line Number="210" Count="-1">            /* unprintable characters are shown as codes */</Line>
				<Line Number="211" Count="-1">            else</Line>
				<Line Number="212" Count="-1">            {</Line>
				<Line Number="213" Count="0">                UNITY_OUTPUT_CHAR('\\');</Line>
				<Line Number="214" Count="0">                UNITY_OUTPUT_CHAR('x');</Line>
				<Line Number="215" Count="0">                UnityPrintNumberHex((UNITY_UINT)number, 2);</Line>
				<Line Number="216" Count="-1">            }</Line>
				<Line Number="217" Count="0">            UNITY_OUTPUT_CHAR('\'');</Line>
				<Line Number="218" Count="-1">        }</Line>
				<Line Number="219" Count="-1">        else</Line>
				<Line Number="220" Count="-1">        {</Line>
				<Line Number="221" Count="0">            UnityPrintNumber(number);</Line>
				<Line Number="222" Count="-1">        }</Line>
				<Line Number="223" Count="-1">    }</Line>
				<Line Number="224" Count="0">    else if ((style &amp; UNITY_DISPLAY_RANGE_UINT) == UNITY_DISPLAY_RANGE_UINT)</Line>
				<Line Number="225" Count="-1">    {</Line>
				<Line Number="226" Count="0">        UnityPrintNumberUnsigned((UNITY_UINT)number);</Line>
				<Line Number="227" Count="-1">    }</Line>
				<Line Number="228" Count="-1">    else</Line>
				<Line Number="229" Count="-1">    {</Line>
				<Line Number="230" Count="0">        UNITY_OUTPUT_CHAR('0');</Line>
				<Line Number="231" Count="0">        UNITY_OUTPUT_CHAR('x');</Line>
				<Line Number="232" Count="0">        UnityPrintNumberHex((UNITY_UINT)number, (char)((style &amp; 0xF) * 2));</Line>
				<Line Number="233" Count="-1">    }</Line>
				<Line Number="234" Count="0">}</Line>
				<Line Number="235" Count="-1"></Line>
				<Line Number="236" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="237" Count="40">void UnityPrintNumber(const UNITY_INT number_to_print)</Line>
				<Line Number="238" Count="-1">{</Line>
				<Line Number="239" Count="40">    UNITY_UINT number = (UNITY_UINT)number_to_print;</Line>
				<Line Number="240" Count="-1"></Line>
				<Line Number="241" Count="40">    if (number_to_print &lt; 0)</Line>
				<Line Number="242" Count="-1">    {</Line>
				<Line Number="243" Count="-1">        /* A negative number, including MIN negative */</Line>
				<Line Number="244" Count="0">        UNITY_OUTPUT_CHAR('-');</Line>
				<Line Number="245" Count="0">        number = (~number) + 1;</Line>
				<Line Number="246" Count="-1">    }</Line>
				<Line Number="247" Count="40">    UnityPrintNumberUnsigned(number);</Line>
				<Line Number="248" Count="40">}</Line>
				<Line Number="249" Count="-1"></Line>
				<Line Number="250" Count="-1">/*-----------------------------------------------</Line>
				<Line Number="251" Count="-1"> * basically do an itoa using as little ram as possible */</Line>
				<Line Number="252" Count="40">void UnityPrintNumberUnsigned(const UNITY_UINT number)</Line>
				<Line Number="253" Count="-1">{</Line>
				<Line Number="254" Count="40">    UNITY_UINT divisor = 1;</Line>
				<Line Number="255" Count="-1"></Line>
				<Line Number="256" Count="-1">    /* figure out initial divisor */</Line>
				<Line Number="257" Count="93">    while (number / divisor &gt; 9)</Line>
				<Line Number="258" Count="-1">    {</Line>
				<Line Number="259" Count="53">        divisor *= 10;</Line>
				<Line Number="260" Count="-1">    }</Line>
				<Line Number="261" Count="-1"></Line>
				<Line Number="262" Count="-1">    /* now mod and print, then divide divisor */</Line>
				<Line Number="263" Count="-1">    do</Line>
				<Line Number="264" Count="-1">    {</Line>
				<Line Number="265" Count="93">        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));</Line>
				<Line Number="266" Count="93">        divisor /= 10;</Line>
				<Line Number="267" Count="93">    } while (divisor &gt; 0);</Line>
				<Line Number="268" Count="40">}</Line>
				<Line Number="269" Count="-1"></Line>
				<Line Number="270" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="271" Count="0">void UnityPrintNumberHex(const UNITY_UINT number, const char nibbles_to_print)</Line>
				<Line Number="272" Count="-1">{</Line>
				<Line Number="273" Count="-1">    int nibble;</Line>
				<Line Number="274" Count="0">    char nibbles = nibbles_to_print;</Line>
				<Line Number="275" Count="-1"></Line>
				<Line Number="276" Count="0">    if ((unsigned)nibbles &gt; UNITY_MAX_NIBBLES)</Line>
				<Line Number="277" Count="-1">    {</Line>
				<Line Number="278" Count="0">        nibbles = UNITY_MAX_NIBBLES;</Line>
				<Line Number="279" Count="-1">    }</Line>
				<Line Number="280" Count="-1"></Line>
				<Line Number="281" Count="0">    while (nibbles &gt; 0)</Line>
				<Line Number="282" Count="-1">    {</Line>
				<Line Number="283" Count="0">        nibbles--;</Line>
				<Line Number="284" Count="0">        nibble = (int)(number &gt;&gt; (nibbles * 4)) &amp; 0x0F;</Line>
				<Line Number="285" Count="0">        if (nibble &lt;= 9)</Line>
				<Line Number="286" Count="-1">        {</Line>
				<Line Number="287" Count="0">            UNITY_OUTPUT_CHAR((char)('0' + nibble));</Line>
				<Line Number="288" Count="-1">        }</Line>
				<Line Number="289" Count="-1">        else</Line>
				<Line Number="290" Count="-1">        {</Line>
				<Line Number="291" Count="0">            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));</Line>
				<Line Number="292" Count="-1">        }</Line>
				<Line Number="293" Count="-1">    }</Line>
				<Line Number="294" Count="0">}</Line>
				<Line Number="295" Count="-1"></Line>
				<Line Number="296" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="297" Count="0">void UnityPrintMask(const UNITY_UINT mask, const UNITY_UINT number)</Line>
				<Line Number="298" Count="-1">{</Line>
				<Line Number="299" Count="0">    UNITY_UINT current_bit = (UNITY_UINT)1 &lt;&lt; (UNITY_INT_WIDTH - 1);</Line>
				<Line Number="300" Count="-1">    UNITY_INT32 i;</Line>
				<Line Number="301" Count="-1"></Line>
				<Line Number="302" Count="0">    for (i = 0; i &lt; UNITY_INT_WIDTH; i++)</Line>
				<Line Number="303" Count="-1">    {</Line>
				<Line Number="304" Count="0">        if (current_bit &amp; mask)</Line>
				<Line Number="305" Count="-1">        {</Line>
				<Line Number="306" Count="0">            if (current_bit &amp; number)</Line>
				<Line Number="307" Count="-1">            {</Line>
				<Line Number="308" Count="0">                UNITY_OUTPUT_CHAR('1');</Line>
				<Line Number="309" Count="-1">            }</Line>
				<Line Number="310" Count="-1">            else</Line>
				<Line Number="311" Count="-1">            {</Line>
				<Line Number="312" Count="0">                UNITY_OUTPUT_CHAR('0');</Line>
				<Line Number="313" Count="-1">            }</Line>
				<Line Number="314" Count="-1">        }</Line>
				<Line Number="315" Count="-1">        else</Line>
				<Line Number="316" Count="-1">        {</Line>
				<Line Number="317" Count="0">            UNITY_OUTPUT_CHAR('X');</Line>
				<Line Number="318" Count="-1">        }</Line>
				<Line Number="319" Count="0">        current_bit = current_bit &gt;&gt; 1;</Line>
				<Line Number="320" Count="-1">    }</Line>
				<Line Number="321" Count="0">}</Line>
				<Line Number="322" Count="-1"></Line>
				<Line Number="323" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="324" Count="-1">#ifndef UNITY_EXCLUDE_FLOAT_PRINT</Line>
				<Line Number="325" Count="-1">/*</Line>
				<Line Number="326" Count="-1"> * This function prints a floating-point value in a format similar to</Line>
				<Line Number="327" Count="-1"> * printf("%.7g") on a single-precision machine or printf("%.9g") on a</Line>
				<Line Number="328" Count="-1"> * double-precision machine.  The 7th digit won't always be totally correct</Line>
				<Line Number="329" Count="-1"> * in single-precision operation (for that level of accuracy, a more</Line>
				<Line Number="330" Count="-1"> * complicated algorithm would be needed).</Line>
				<Line Number="331" Count="-1"> */</Line>
				<Line Number="332" Count="0">void UnityPrintFloat(const UNITY_DOUBLE input_number)</Line>
				<Line Number="333" Count="-1">{</Line>
				<Line Number="334" Count="-1">#ifdef UNITY_INCLUDE_DOUBLE</Line>
				<Line Number="335" Count="-1">    static const int sig_digits = 9;</Line>
				<Line Number="336" Count="-1">    static const UNITY_INT32 min_scaled = 100000000;</Line>
				<Line Number="337" Count="-1">    static const UNITY_INT32 max_scaled = 1000000000;</Line>
				<Line Number="338" Count="-1">#else</Line>
				<Line Number="339" Count="-1">    static const int sig_digits = 7;</Line>
				<Line Number="340" Count="-1">    static const UNITY_INT32 min_scaled = 1000000;</Line>
				<Line Number="341" Count="-1">    static const UNITY_INT32 max_scaled = 10000000;</Line>
				<Line Number="342" Count="-1">#endif</Line>
				<Line Number="343" Count="-1"></Line>
				<Line Number="344" Count="0">    UNITY_DOUBLE number = input_number;</Line>
				<Line Number="345" Count="-1"></Line>
				<Line Number="346" Count="-1">    /* print minus sign (does not handle negative zero) */</Line>
				<Line Number="347" Count="0">    if (number &lt; 0.0f)</Line>
				<Line Number="348" Count="-1">    {</Line>
				<Line Number="349" Count="0">        UNITY_OUTPUT_CHAR('-');</Line>
				<Line Number="350" Count="0">        number = -number;</Line>
				<Line Number="351" Count="-1">    }</Line>
				<Line Number="352" Count="-1"></Line>
				<Line Number="353" Count="-1">    /* handle zero, NaN, and +/- infinity */</Line>
				<Line Number="354" Count="0">    if (number == 0.0f)</Line>
				<Line Number="355" Count="-1">    {</Line>
				<Line Number="356" Count="0">        UnityPrint("0");</Line>
				<Line Number="357" Count="-1">    }</Line>
				<Line Number="358" Count="0">    else if (UNITY_IS_NAN(number))</Line>
				<Line Number="359" Count="-1">    {</Line>
				<Line Number="360" Count="0">        UnityPrint("nan");</Line>
				<Line Number="361" Count="-1">    }</Line>
				<Line Number="362" Count="0">    else if (UNITY_IS_INF(number))</Line>
				<Line Number="363" Count="-1">    {</Line>
				<Line Number="364" Count="0">        UnityPrint("inf");</Line>
				<Line Number="365" Count="-1">    }</Line>
				<Line Number="366" Count="-1">    else</Line>
				<Line Number="367" Count="-1">    {</Line>
				<Line Number="368" Count="0">        UNITY_INT32 n_int = 0;</Line>
				<Line Number="369" Count="-1">        UNITY_INT32 n;</Line>
				<Line Number="370" Count="0">        int         exponent = 0;</Line>
				<Line Number="371" Count="-1">        int         decimals;</Line>
				<Line Number="372" Count="-1">        int         digits;</Line>
				<Line Number="373" Count="0">        char        buf[16] = {0};</Line>
				<Line Number="374" Count="-1"></Line>
				<Line Number="375" Count="-1">        /*</Line>
				<Line Number="376" Count="-1">         * Scale up or down by powers of 10.  To minimize rounding error,</Line>
				<Line Number="377" Count="-1">         * start with a factor/divisor of 10^10, which is the largest</Line>
				<Line Number="378" Count="-1">         * power of 10 that can be represented exactly.  Finally, compute</Line>
				<Line Number="379" Count="-1">         * (exactly) the remaining power of 10 and perform one more</Line>
				<Line Number="380" Count="-1">         * multiplication or division.</Line>
				<Line Number="381" Count="-1">         */</Line>
				<Line Number="382" Count="0">        if (number &lt; 1.0f)</Line>
				<Line Number="383" Count="-1">        {</Line>
				<Line Number="384" Count="0">            UNITY_DOUBLE factor = 1.0f;</Line>
				<Line Number="385" Count="-1"></Line>
				<Line Number="386" Count="0">            while (number &lt; (UNITY_DOUBLE)max_scaled / 1e10f)  { number *= 1e10f; exponent -= 10; }</Line>
				<Line Number="387" Count="0">            while (number * factor &lt; (UNITY_DOUBLE)min_scaled) { factor *= 10.0f; exponent--; }</Line>
				<Line Number="388" Count="-1"></Line>
				<Line Number="389" Count="0">            number *= factor;</Line>
				<Line Number="390" Count="-1">        }</Line>
				<Line Number="391" Count="0">        else if (number &gt; (UNITY_DOUBLE)max_scaled)</Line>
				<Line Number="392" Count="-1">        {</Line>
				<Line Number="393" Count="0">            UNITY_DOUBLE divisor = 1.0f;</Line>
				<Line Number="394" Count="-1"></Line>
				<Line Number="395" Count="0">            while (number &gt; (UNITY_DOUBLE)min_scaled * 1e10f)   { number  /= 1e10f; exponent += 10; }</Line>
				<Line Number="396" Count="0">            while (number / divisor &gt; (UNITY_DOUBLE)max_scaled) { divisor *= 10.0f; exponent++; }</Line>
				<Line Number="397" Count="-1"></Line>
				<Line Number="398" Count="0">            number /= divisor;</Line>
				<Line Number="399" Count="-1">        }</Line>
				<Line Number="400" Count="-1">        else</Line>
				<Line Number="401" Count="-1">        {</Line>
				<Line Number="402" Count="-1">            /*</Line>
				<Line Number="403" Count="-1">             * In this range, we can split off the integer part before</Line>
				<Line Number="404" Count="-1">             * doing any multiplications.  This reduces rounding error by</Line>
				<Line Number="405" Count="-1">             * freeing up significant bits in the fractional part.</Line>
				<Line Number="406" Count="-1">             */</Line>
				<Line Number="407" Count="0">            UNITY_DOUBLE factor = 1.0f;</Line>
				<Line Number="408" Count="0">            n_int = (UNITY_INT32)number;</Line>
				<Line Number="409" Count="0">            number -= (UNITY_DOUBLE)n_int;</Line>
				<Line Number="410" Count="-1"></Line>
				<Line Number="411" Count="0">            while (n_int &lt; min_scaled) { n_int *= 10; factor *= 10.0f; exponent--; }</Line>
				<Line Number="412" Count="-1"></Line>
				<Line Number="413" Count="0">            number *= factor;</Line>
				<Line Number="414" Count="-1">        }</Line>
				<Line Number="415" Count="-1"></Line>
				<Line Number="416" Count="-1">        /* round to nearest integer */</Line>
				<Line Number="417" Count="0">        n = ((UNITY_INT32)(number + number) + 1) / 2;</Line>
				<Line Number="418" Count="-1"></Line>
				<Line Number="419" Count="-1">#ifndef UNITY_ROUND_TIES_AWAY_FROM_ZERO</Line>
				<Line Number="420" Count="-1">        /* round to even if exactly between two integers */</Line>
				<Line Number="421" Count="0">        if ((n &amp; 1) &amp;&amp; (((UNITY_DOUBLE)n - number) == 0.5f))</Line>
				<Line Number="422" Count="0">            n--;</Line>
				<Line Number="423" Count="-1">#endif</Line>
				<Line Number="424" Count="-1"></Line>
				<Line Number="425" Count="0">        n += n_int;</Line>
				<Line Number="426" Count="-1"></Line>
				<Line Number="427" Count="0">        if (n &gt;= max_scaled)</Line>
				<Line Number="428" Count="-1">        {</Line>
				<Line Number="429" Count="0">            n = min_scaled;</Line>
				<Line Number="430" Count="0">            exponent++;</Line>
				<Line Number="431" Count="-1">        }</Line>
				<Line Number="432" Count="-1"></Line>
				<Line Number="433" Count="-1">        /* determine where to place decimal point */</Line>
				<Line Number="434" Count="0">        decimals = ((exponent &lt;= 0) &amp;&amp; (exponent &gt;= -(sig_digits + 3))) ? (-exponent) : (sig_digits - 1);</Line>
				<Line Number="435" Count="0">        exponent += decimals;</Line>
				<Line Number="436" Count="-1"></Line>
				<Line Number="437" Count="-1">        /* truncate trailing zeroes after decimal point */</Line>
				<Line Number="438" Count="0">        while ((decimals &gt; 0) &amp;&amp; ((n % 10) == 0))</Line>
				<Line Number="439" Count="-1">        {</Line>
				<Line Number="440" Count="0">            n /= 10;</Line>
				<Line Number="441" Count="0">            decimals--;</Line>
				<Line Number="442" Count="-1">        }</Line>
				<Line Number="443" Count="-1"></Line>
				<Line Number="444" Count="-1">        /* build up buffer in reverse order */</Line>
				<Line Number="445" Count="0">        digits = 0;</Line>
				<Line Number="446" Count="0">        while ((n != 0) || (digits &lt;= decimals))</Line>
				<Line Number="447" Count="-1">        {</Line>
				<Line Number="448" Count="0">            buf[digits++] = (char)('0' + n % 10);</Line>
				<Line Number="449" Count="0">            n /= 10;</Line>
				<Line Number="450" Count="-1">        }</Line>
				<Line Number="451" Count="-1"></Line>
				<Line Number="452" Count="-1">        /* print out buffer (backwards) */</Line>
				<Line Number="453" Count="0">        while (digits &gt; 0)</Line>
				<Line Number="454" Count="-1">        {</Line>
				<Line Number="455" Count="0">            if (digits == decimals)</Line>
				<Line Number="456" Count="-1">            {</Line>
				<Line Number="457" Count="0">                UNITY_OUTPUT_CHAR('.');</Line>
				<Line Number="458" Count="-1">            }</Line>
				<Line Number="459" Count="0">            UNITY_OUTPUT_CHAR(buf[--digits]);</Line>
				<Line Number="460" Count="-1">        }</Line>
				<Line Number="461" Count="-1"></Line>
				<Line Number="462" Count="-1">        /* print exponent if needed */</Line>
				<Line Number="463" Count="0">        if (exponent != 0)</Line>
				<Line Number="464" Count="-1">        {</Line>
				<Line Number="465" Count="0">            UNITY_OUTPUT_CHAR('e');</Line>
				<Line Number="466" Count="-1"></Line>
				<Line Number="467" Count="0">            if (exponent &lt; 0)</Line>
				<Line Number="468" Count="-1">            {</Line>
				<Line Number="469" Count="0">                UNITY_OUTPUT_CHAR('-');</Line>
				<Line Number="470" Count="0">                exponent = -exponent;</Line>
				<Line Number="471" Count="-1">            }</Line>
				<Line Number="472" Count="-1">            else</Line>
				<Line Number="473" Count="-1">            {</Line>
				<Line Number="474" Count="0">                UNITY_OUTPUT_CHAR('+');</Line>
				<Line Number="475" Count="-1">            }</Line>
				<Line Number="476" Count="-1"></Line>
				<Line Number="477" Count="0">            digits = 0;</Line>
				<Line Number="478" Count="0">            while ((exponent != 0) || (digits &lt; 2))</Line>
				<Line Number="479" Count="-1">            {</Line>
				<Line Number="480" Count="0">                buf[digits++] = (char)('0' + exponent % 10);</Line>
				<Line Number="481" Count="0">                exponent /= 10;</Line>
				<Line Number="482" Count="-1">            }</Line>
				<Line Number="483" Count="0">            while (digits &gt; 0)</Line>
				<Line Number="484" Count="-1">            {</Line>
				<Line Number="485" Count="0">                UNITY_OUTPUT_CHAR(buf[--digits]);</Line>
				<Line Number="486" Count="-1">            }</Line>
				<Line Number="487" Count="-1">        }</Line>
				<Line Number="488" Count="-1">    }</Line>
				<Line Number="489" Count="0">}</Line>
				<Line Number="490" Count="-1">#endif /* ! UNITY_EXCLUDE_FLOAT_PRINT */</Line>
				<Line Number="491" Count="-1"></Line>
				<Line Number="492" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="493" Count="28">static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)</Line>
				<Line Number="494" Count="-1">{</Line>
				<Line Number="495" Count="-1">#ifdef UNITY_OUTPUT_FOR_ECLIPSE</Line>
				<Line Number="496" Count="-1">    UNITY_OUTPUT_CHAR('(');</Line>
				<Line Number="497" Count="-1">    UnityPrint(file);</Line>
				<Line Number="498" Count="-1">    UNITY_OUTPUT_CHAR(':');</Line>
				<Line Number="499" Count="-1">    UnityPrintNumber((UNITY_INT)line);</Line>
				<Line Number="500" Count="-1">    UNITY_OUTPUT_CHAR(')');</Line>
				<Line Number="501" Count="-1">    UNITY_OUTPUT_CHAR(' ');</Line>
				<Line Number="502" Count="-1">    UnityPrint(Unity.CurrentTestName);</Line>
				<Line Number="503" Count="-1">    UNITY_OUTPUT_CHAR(':');</Line>
				<Line Number="504" Count="-1">#else</Line>
				<Line Number="505" Count="-1">#ifdef UNITY_OUTPUT_FOR_IAR_WORKBENCH</Line>
				<Line Number="506" Count="-1">    UnityPrint("&lt;SRCREF line=");</Line>
				<Line Number="507" Count="-1">    UnityPrintNumber((UNITY_INT)line);</Line>
				<Line Number="508" Count="-1">    UnityPrint(" file=\"");</Line>
				<Line Number="509" Count="-1">    UnityPrint(file);</Line>
				<Line Number="510" Count="-1">    UNITY_OUTPUT_CHAR('"');</Line>
				<Line Number="511" Count="-1">    UNITY_OUTPUT_CHAR('&gt;');</Line>
				<Line Number="512" Count="-1">    UnityPrint(Unity.CurrentTestName);</Line>
				<Line Number="513" Count="-1">    UnityPrint("&lt;/SRCREF&gt; ");</Line>
				<Line Number="514" Count="-1">#else</Line>
				<Line Number="515" Count="-1">#ifdef UNITY_OUTPUT_FOR_QT_CREATOR</Line>
				<Line Number="516" Count="-1">    UnityPrint("file://");</Line>
				<Line Number="517" Count="-1">    UnityPrint(file);</Line>
				<Line Number="518" Count="-1">    UNITY_OUTPUT_CHAR(':');</Line>
				<Line Number="519" Count="-1">    UnityPrintNumber((UNITY_INT)line);</Line>
				<Line Number="520" Count="-1">    UNITY_OUTPUT_CHAR(' ');</Line>
				<Line Number="521" Count="-1">    UnityPrint(Unity.CurrentTestName);</Line>
				<Line Number="522" Count="-1">    UNITY_OUTPUT_CHAR(':');</Line>
				<Line Number="523" Count="-1">#else</Line>
				<Line Number="524" Count="28">    UnityPrint(file);</Line>
				<Line Number="525" Count="28">    UNITY_OUTPUT_CHAR(':');</Line>
				<Line Number="526" Count="28">    UnityPrintNumber((UNITY_INT)line);</Line>
				<Line Number="527" Count="28">    UNITY_OUTPUT_CHAR(':');</Line>
				<Line Number="528" Count="28">    UnityPrint(Unity.CurrentTestName);</Line>
				<Line Number="529" Count="28">    UNITY_OUTPUT_CHAR(':');</Line>
				<Line Number="530" Count="-1">#endif</Line>
				<Line Number="531" Count="-1">#endif</Line>
				<Line Number="532" Count="-1">#endif</Line>
				<Line Number="533" Count="28">}</Line>
				<Line Number="534" Count="-1"></Line>
				<Line Number="535" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="536" Count="0">static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)</Line>
				<Line Number="537" Count="-1">{</Line>
				<Line Number="538" Count="0">    UnityTestResultsBegin(Unity.TestFile, line);</Line>
				<Line Number="539" Count="0">    UnityPrint(UnityStrFail);</Line>
				<Line Number="540" Count="0">    UNITY_OUTPUT_CHAR(':');</Line>
				<Line Number="541" Count="0">}</Line>
				<Line Number="542" Count="-1"></Line>
				<Line Number="543" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="544" Count="28">void UnityConcludeTest(void)</Line>
				<Line Number="545" Count="-1">{</Line>
				<Line Number="546" Count="28">    if (Unity.CurrentTestIgnored)</Line>
				<Line Number="547" Count="-1">    {</Line>
				<Line Number="548" Count="0">        Unity.TestIgnores++;</Line>
				<Line Number="549" Count="-1">    }</Line>
				<Line Number="550" Count="28">    else if (!Unity.CurrentTestFailed)</Line>
				<Line Number="551" Count="-1">    {</Line>
				<Line Number="552" Count="28">        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);</Line>
				<Line Number="553" Count="28">        UnityPrint(UnityStrPass);</Line>
				<Line Number="554" Count="-1">    }</Line>
				<Line Number="555" Count="-1">    else</Line>
				<Line Number="556" Count="-1">    {</Line>
				<Line Number="557" Count="0">        Unity.TestFailures++;</Line>
				<Line Number="558" Count="-1">    }</Line>
				<Line Number="559" Count="-1"></Line>
				<Line Number="560" Count="28">    Unity.CurrentTestFailed = 0;</Line>
				<Line Number="561" Count="28">    Unity.CurrentTestIgnored = 0;</Line>
				<Line Number="562" Count="-1">    UNITY_PRINT_EXEC_TIME();</Line>
				<Line Number="563" Count="28">    UNITY_PRINT_EOL();</Line>
				<Line Number="564" Count="-1">    UNITY_FLUSH_CALL();</Line>
				<Line Number="565" Count="28">}</Line>
				<Line Number="566" Count="-1"></Line>
				<Line Number="567" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="568" Count="0">static void UnityAddMsgIfSpecified(const char* msg)</Line>
				<Line Number="569" Count="-1">{</Line>
				<Line Number="570" Count="-1">#ifdef UNITY_PRINT_TEST_CONTEXT</Line>
				<Line Number="571" Count="-1">    UnityPrint(UnityStrSpacer);</Line>
				<Line Number="572" Count="-1">    UNITY_PRINT_TEST_CONTEXT();</Line>
				<Line Number="573" Count="-1">#endif</Line>
				<Line Number="574" Count="-1">#ifndef UNITY_EXCLUDE_DETAILS</Line>
				<Line Number="575" Count="0">    if (Unity.CurrentDetail1)</Line>
				<Line Number="576" Count="-1">    {</Line>
				<Line Number="577" Count="0">        UnityPrint(UnityStrSpacer);</Line>
				<Line Number="578" Count="0">        UnityPrint(UnityStrDetail1Name);</Line>
				<Line Number="579" Count="0">        UnityPrint(Unity.CurrentDetail1);</Line>
				<Line Number="580" Count="0">        if (Unity.CurrentDetail2)</Line>
				<Line Number="581" Count="-1">        {</Line>
				<Line Number="582" Count="0">            UnityPrint(UnityStrDetail2Name);</Line>
				<Line Number="583" Count="0">            UnityPrint(Unity.CurrentDetail2);</Line>
				<Line Number="584" Count="-1">        }</Line>
				<Line Number="585" Count="-1">    }</Line>
				<Line Number="586" Count="-1">#endif</Line>
				<Line Number="587" Count="0">    if (msg)</Line>
				<Line Number="588" Count="-1">    {</Line>
				<Line Number="589" Count="0">        UnityPrint(UnityStrSpacer);</Line>
				<Line Number="590" Count="0">        UnityPrint(msg);</Line>
				<Line Number="591" Count="-1">    }</Line>
				<Line Number="592" Count="0">}</Line>
				<Line Number="593" Count="-1"></Line>
				<Line Number="594" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="595" Count="0">static void UnityPrintExpectedAndActualStrings(const char* expected, const char* actual)</Line>
				<Line Number="596" Count="-1">{</Line>
				<Line Number="597" Count="0">    UnityPrint(UnityStrExpected);</Line>
				<Line Number="598" Count="0">    if (expected != NULL)</Line>
				<Line Number="599" Count="-1">    {</Line>
				<Line Number="600" Count="0">        UNITY_OUTPUT_CHAR('\'');</Line>
				<Line Number="601" Count="0">        UnityPrint(expected);</Line>
				<Line Number="602" Count="0">        UNITY_OUTPUT_CHAR('\'');</Line>
				<Line Number="603" Count="-1">    }</Line>
				<Line Number="604" Count="-1">    else</Line>
				<Line Number="605" Count="-1">    {</Line>
				<Line Number="606" Count="0">        UnityPrint(UnityStrNull);</Line>
				<Line Number="607" Count="-1">    }</Line>
				<Line Number="608" Count="0">    UnityPrint(UnityStrWas);</Line>
				<Line Number="609" Count="0">    if (actual != NULL)</Line>
				<Line Number="610" Count="-1">    {</Line>
				<Line Number="611" Count="0">        UNITY_OUTPUT_CHAR('\'');</Line>
				<Line Number="612" Count="0">        UnityPrint(actual);</Line>
				<Line Number="613" Count="0">        UNITY_OUTPUT_CHAR('\'');</Line>
				<Line Number="614" Count="-1">    }</Line>
				<Line Number="615" Count="-1">    else</Line>
				<Line Number="616" Count="-1">    {</Line>
				<Line Number="617" Count="0">        UnityPrint(UnityStrNull);</Line>
				<Line Number="618" Count="-1">    }</Line>
				<Line Number="619" Count="0">}</Line>
				<Line Number="620" Count="-1"></Line>
				<Line Number="621" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="622" Count="0">static void UnityPrintExpectedAndActualStringsLen(const char* expected,</Line>
				<Line Number="623" Count="-1">                                                  const char* actual,</Line>
				<Line Number="624" Count="-1">                                                  const UNITY_UINT32 length)</Line>
				<Line Number="625" Count="-1">{</Line>
				<Line Number="626" Count="0">    UnityPrint(UnityStrExpected);</Line>
				<Line Number="627" Count="0">    if (expected != NULL)</Line>
				<Line Number="628" Count="-1">    {</Line>
				<Line Number="629" Count="0">        UNITY_OUTPUT_CHAR('\'');</Line>
				<Line Number="630" Count="0">        UnityPrintLen(expected, length);</Line>
				<Line Number="631" Count="0">        UNITY_OUTPUT_CHAR('\'');</Line>
				<Line Number="632" Count="-1">    }</Line>
				<Line Number="633" Count="-1">    else</Line>
				<Line Number="634" Count="-1">    {</Line>
				<Line Number="635" Count="0">        UnityPrint(UnityStrNull);</Line>
				<Line Number="636" Count="-1">    }</Line>
				<Line Number="637" Count="0">    UnityPrint(UnityStrWas);</Line>
				<Line Number="638" Count="0">    if (actual != NULL)</Line>
				<Line Number="639" Count="-1">    {</Line>
				<Line Number="640" Count="0">        UNITY_OUTPUT_CHAR('\'');</Line>
				<Line Number="641" Count="0">        UnityPrintLen(actual, length);</Line>
				<Line Number="642" Count="0">        UNITY_OUTPUT_CHAR('\'');</Line>
				<Line Number="643" Count="-1">    }</Line>
				<Line Number="644" Count="-1">    else</Line>
				<Line Number="645" Count="-1">    {</Line>
				<Line Number="646" Count="0">        UnityPrint(UnityStrNull);</Line>
				<Line Number="647" Count="-1">    }</Line>
				<Line Number="648" Count="0">}</Line>
				<Line Number="649" Count="-1"></Line>
				<Line Number="650" Count="-1">/*-----------------------------------------------</Line>
				<Line Number="651" Count="-1"> * Assertion &amp; Control Helpers</Line>
				<Line Number="652" Count="-1"> *-----------------------------------------------*/</Line>
				<Line Number="653" Count="-1"></Line>
				<Line Number="654" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="655" Count="0">static int UnityIsOneArrayNull(UNITY_INTERNAL_PTR expected,</Line>
				<Line Number="656" Count="-1">                               UNITY_INTERNAL_PTR actual,</Line>
				<Line Number="657" Count="-1">                               const UNITY_LINE_TYPE lineNumber,</Line>
				<Line Number="658" Count="-1">                               const char* msg)</Line>
				<Line Number="659" Count="-1">{</Line>
				<Line Number="660" Count="-1">    /* Both are NULL or same pointer */</Line>
				<Line Number="661" Count="0">    if (expected == actual) { return 0; }</Line>
				<Line Number="662" Count="-1"></Line>
				<Line Number="663" Count="-1">    /* print and return true if just expected is NULL */</Line>
				<Line Number="664" Count="0">    if (expected == NULL)</Line>
				<Line Number="665" Count="-1">    {</Line>
				<Line Number="666" Count="0">        UnityTestResultsFailBegin(lineNumber);</Line>
				<Line Number="667" Count="0">        UnityPrint(UnityStrNullPointerForExpected);</Line>
				<Line Number="668" Count="0">        UnityAddMsgIfSpecified(msg);</Line>
				<Line Number="669" Count="0">        return 1;</Line>
				<Line Number="670" Count="-1">    }</Line>
				<Line Number="671" Count="-1"></Line>
				<Line Number="672" Count="-1">    /* print and return true if just actual is NULL */</Line>
				<Line Number="673" Count="0">    if (actual == NULL)</Line>
				<Line Number="674" Count="-1">    {</Line>
				<Line Number="675" Count="0">        UnityTestResultsFailBegin(lineNumber);</Line>
				<Line Number="676" Count="0">        UnityPrint(UnityStrNullPointerForActual);</Line>
				<Line Number="677" Count="0">        UnityAddMsgIfSpecified(msg);</Line>
				<Line Number="678" Count="0">        return 1;</Line>
				<Line Number="679" Count="-1">    }</Line>
				<Line Number="680" Count="-1"></Line>
				<Line Number="681" Count="0">    return 0; /* return false if neither is NULL */</Line>
				<Line Number="682" Count="-1">}</Line>
				<Line Number="683" Count="-1"></Line>
				<Line Number="684" Count="-1">/*-----------------------------------------------</Line>
				<Line Number="685" Count="-1"> * Assertion Functions</Line>
				<Line Number="686" Count="-1"> *-----------------------------------------------*/</Line>
				<Line Number="687" Count="-1"></Line>
				<Line Number="688" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="689" Count="0">void UnityAssertBits(const UNITY_INT mask,</Line>
				<Line Number="690" Count="-1">                     const UNITY_INT expected,</Line>
				<Line Number="691" Count="-1">                     const UNITY_INT actual,</Line>
				<Line Number="692" Count="-1">                     const char* msg,</Line>
				<Line Number="693" Count="-1">                     const UNITY_LINE_TYPE lineNumber)</Line>
				<Line Number="694" Count="-1">{</Line>
				<Line Number="695" Count="0">    RETURN_IF_FAIL_OR_IGNORE;</Line>
				<Line Number="696" Count="-1"></Line>
				<Line Number="697" Count="0">    if ((mask &amp; expected) != (mask &amp; actual))</Line>
				<Line Number="698" Count="-1">    {</Line>
				<Line Number="699" Count="0">        UnityTestResultsFailBegin(lineNumber);</Line>
				<Line Number="700" Count="0">        UnityPrint(UnityStrExpected);</Line>
				<Line Number="701" Count="0">        UnityPrintMask((UNITY_UINT)mask, (UNITY_UINT)expected);</Line>
				<Line Number="702" Count="0">        UnityPrint(UnityStrWas);</Line>
				<Line Number="703" Count="0">        UnityPrintMask((UNITY_UINT)mask, (UNITY_UINT)actual);</Line>
				<Line Number="704" Count="0">        UnityAddMsgIfSpecified(msg);</Line>
				<Line Number="705" Count="0">        UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="706" Count="-1">    }</Line>
				<Line Number="707" Count="0">}</Line>
				<Line Number="708" Count="-1"></Line>
				<Line Number="709" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="710" Count="35">void UnityAssertEqualNumber(const UNITY_INT expected,</Line>
				<Line Number="711" Count="-1">                            const UNITY_INT actual,</Line>
				<Line Number="712" Count="-1">                            const char* msg,</Line>
				<Line Number="713" Count="-1">                            const UNITY_LINE_TYPE lineNumber,</Line>
				<Line Number="714" Count="-1">                            const UNITY_DISPLAY_STYLE_T style)</Line>
				<Line Number="715" Count="-1">{</Line>
				<Line Number="716" Count="35">    RETURN_IF_FAIL_OR_IGNORE;</Line>
				<Line Number="717" Count="-1"></Line>
				<Line Number="718" Count="35">    if (expected != actual)</Line>
				<Line Number="719" Count="-1">    {</Line>
				<Line Number="720" Count="0">        UnityTestResultsFailBegin(lineNumber);</Line>
				<Line Number="721" Count="0">        UnityPrint(UnityStrExpected);</Line>
				<Line Number="722" Count="0">        UnityPrintNumberByStyle(expected, style);</Line>
				<Line Number="723" Count="0">        UnityPrint(UnityStrWas);</Line>
				<Line Number="724" Count="0">        UnityPrintNumberByStyle(actual, style);</Line>
				<Line Number="725" Count="0">        UnityAddMsgIfSpecified(msg);</Line>
				<Line Number="726" Count="0">        UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="727" Count="-1">    }</Line>
				<Line Number="728" Count="35">}</Line>
				<Line Number="729" Count="-1"></Line>
				<Line Number="730" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="731" Count="0">void UnityAssertGreaterOrLessOrEqualNumber(const UNITY_INT threshold,</Line>
				<Line Number="732" Count="-1">                                           const UNITY_INT actual,</Line>
				<Line Number="733" Count="-1">                                           const UNITY_COMPARISON_T compare,</Line>
				<Line Number="734" Count="-1">                                           const char *msg,</Line>
				<Line Number="735" Count="-1">                                           const UNITY_LINE_TYPE lineNumber,</Line>
				<Line Number="736" Count="-1">                                           const UNITY_DISPLAY_STYLE_T style)</Line>
				<Line Number="737" Count="-1">{</Line>
				<Line Number="738" Count="0">    int failed = 0;</Line>
				<Line Number="739" Count="0">    RETURN_IF_FAIL_OR_IGNORE;</Line>
				<Line Number="740" Count="-1"></Line>
				<Line Number="741" Count="0">    if ((threshold == actual) &amp;&amp; (compare &amp; UNITY_EQUAL_TO)) { return; }</Line>
				<Line Number="742" Count="0">    if ((threshold == actual))                               { failed = 1; }</Line>
				<Line Number="743" Count="-1"></Line>
				<Line Number="744" Count="0">    if ((style &amp; UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)</Line>
				<Line Number="745" Count="-1">    {</Line>
				<Line Number="746" Count="0">        if ((actual &gt; threshold) &amp;&amp; (compare &amp; UNITY_SMALLER_THAN)) { failed = 1; }</Line>
				<Line Number="747" Count="0">        if ((actual &lt; threshold) &amp;&amp; (compare &amp; UNITY_GREATER_THAN)) { failed = 1; }</Line>
				<Line Number="748" Count="-1">    }</Line>
				<Line Number="749" Count="-1">    else /* UINT or HEX */</Line>
				<Line Number="750" Count="-1">    {</Line>
				<Line Number="751" Count="0">        if (((UNITY_UINT)actual &gt; (UNITY_UINT)threshold) &amp;&amp; (compare &amp; UNITY_SMALLER_THAN)) { failed = 1; }</Line>
				<Line Number="752" Count="0">        if (((UNITY_UINT)actual &lt; (UNITY_UINT)threshold) &amp;&amp; (compare &amp; UNITY_GREATER_THAN)) { failed = 1; }</Line>
				<Line Number="753" Count="-1">    }</Line>
				<Line Number="754" Count="-1"></Line>
				<Line Number="755" Count="0">    if (failed)</Line>
				<Line Number="756" Count="-1">    {</Line>
				<Line Number="757" Count="0">        UnityTestResultsFailBegin(lineNumber);</Line>
				<Line Number="758" Count="0">        UnityPrint(UnityStrExpected);</Line>
				<Line Number="759" Count="0">        UnityPrintNumberByStyle(actual, style);</Line>
				<Line Number="760" Count="0">        if (compare &amp; UNITY_GREATER_THAN) { UnityPrint(UnityStrGt);       }</Line>
				<Line Number="761" Count="0">        if (compare &amp; UNITY_SMALLER_THAN) { UnityPrint(UnityStrLt);       }</Line>
				<Line Number="762" Count="0">        if (compare &amp; UNITY_EQUAL_TO)     { UnityPrint(UnityStrOrEqual);  }</Line>
				<Line Number="763" Count="0">        if (compare == UNITY_NOT_EQUAL)   { UnityPrint(UnityStrNotEqual); }</Line>
				<Line Number="764" Count="0">        UnityPrintNumberByStyle(threshold, style);</Line>
				<Line Number="765" Count="0">        UnityAddMsgIfSpecified(msg);</Line>
				<Line Number="766" Count="0">        UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="767" Count="-1">    }</Line>
				<Line Number="768" Count="-1">}</Line>
				<Line Number="769" Count="-1"></Line>
				<Line Number="770" Count="-1">#define UnityPrintPointlessAndBail()       \</Line>
				<Line Number="771" Count="-1">do {                                       \</Line>
				<Line Number="772" Count="-1">    UnityTestResultsFailBegin(lineNumber); \</Line>
				<Line Number="773" Count="-1">    UnityPrint(UnityStrPointless);         \</Line>
				<Line Number="774" Count="-1">    UnityAddMsgIfSpecified(msg);           \</Line>
				<Line Number="775" Count="-1">    UNITY_FAIL_AND_BAIL;                   \</Line>
				<Line Number="776" Count="-1">} while (0)</Line>
				<Line Number="777" Count="-1"></Line>
				<Line Number="778" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="779" Count="0">void UnityAssertEqualIntArray(UNITY_INTERNAL_PTR expected,</Line>
				<Line Number="780" Count="-1">                              UNITY_INTERNAL_PTR actual,</Line>
				<Line Number="781" Count="-1">                              const UNITY_UINT32 num_elements,</Line>
				<Line Number="782" Count="-1">                              const char* msg,</Line>
				<Line Number="783" Count="-1">                              const UNITY_LINE_TYPE lineNumber,</Line>
				<Line Number="784" Count="-1">                              const UNITY_DISPLAY_STYLE_T style,</Line>
				<Line Number="785" Count="-1">                              const UNITY_FLAGS_T flags)</Line>
				<Line Number="786" Count="-1">{</Line>
				<Line Number="787" Count="0">    UNITY_UINT32 elements  = num_elements;</Line>
				<Line Number="788" Count="0">    unsigned int length    = style &amp; 0xF;</Line>
				<Line Number="789" Count="0">    unsigned int increment = 0;</Line>
				<Line Number="790" Count="-1"></Line>
				<Line Number="791" Count="0">    RETURN_IF_FAIL_OR_IGNORE;</Line>
				<Line Number="792" Count="-1"></Line>
				<Line Number="793" Count="0">    if (num_elements == 0)</Line>
				<Line Number="794" Count="-1">    {</Line>
				<Line Number="795" Count="-1">#ifdef UNITY_COMPARE_PTRS_ON_ZERO_ARRAY</Line>
				<Line Number="796" Count="-1">        UNITY_TEST_ASSERT_EQUAL_PTR(expected, actual, lineNumber, msg);</Line>
				<Line Number="797" Count="-1">#else</Line>
				<Line Number="798" Count="0">        UnityPrintPointlessAndBail();</Line>
				<Line Number="799" Count="-1">#endif</Line>
				<Line Number="800" Count="-1">    }</Line>
				<Line Number="801" Count="-1"></Line>
				<Line Number="802" Count="0">    if (expected == actual)</Line>
				<Line Number="803" Count="-1">    {</Line>
				<Line Number="804" Count="0">        return; /* Both are NULL or same pointer */</Line>
				<Line Number="805" Count="-1">    }</Line>
				<Line Number="806" Count="-1"></Line>
				<Line Number="807" Count="0">    if (UnityIsOneArrayNull(expected, actual, lineNumber, msg))</Line>
				<Line Number="808" Count="-1">    {</Line>
				<Line Number="809" Count="0">        UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="810" Count="-1">    }</Line>
				<Line Number="811" Count="-1"></Line>
				<Line Number="812" Count="0">    while ((elements &gt; 0) &amp;&amp; (elements--))</Line>
				<Line Number="813" Count="-1">    {</Line>
				<Line Number="814" Count="-1">        UNITY_INT expect_val;</Line>
				<Line Number="815" Count="-1">        UNITY_INT actual_val;</Line>
				<Line Number="816" Count="-1"></Line>
				<Line Number="817" Count="0">        switch (length)</Line>
				<Line Number="818" Count="-1">        {</Line>
				<Line Number="819" Count="0">            case 1:</Line>
				<Line Number="820" Count="0">                expect_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT8*)expected;</Line>
				<Line Number="821" Count="0">                actual_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT8*)actual;</Line>
				<Line Number="822" Count="0">                if (style &amp; (UNITY_DISPLAY_RANGE_UINT | UNITY_DISPLAY_RANGE_HEX))</Line>
				<Line Number="823" Count="-1">                {</Line>
				<Line Number="824" Count="0">                    expect_val &amp;= 0x000000FF;</Line>
				<Line Number="825" Count="0">                    actual_val &amp;= 0x000000FF;</Line>
				<Line Number="826" Count="-1">                }</Line>
				<Line Number="827" Count="0">                increment  = sizeof(UNITY_INT8);</Line>
				<Line Number="828" Count="0">                break;</Line>
				<Line Number="829" Count="-1"></Line>
				<Line Number="830" Count="0">            case 2:</Line>
				<Line Number="831" Count="0">                expect_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT16*)expected;</Line>
				<Line Number="832" Count="0">                actual_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT16*)actual;</Line>
				<Line Number="833" Count="0">                if (style &amp; (UNITY_DISPLAY_RANGE_UINT | UNITY_DISPLAY_RANGE_HEX))</Line>
				<Line Number="834" Count="-1">                {</Line>
				<Line Number="835" Count="0">                    expect_val &amp;= 0x0000FFFF;</Line>
				<Line Number="836" Count="0">                    actual_val &amp;= 0x0000FFFF;</Line>
				<Line Number="837" Count="-1">                }</Line>
				<Line Number="838" Count="0">                increment  = sizeof(UNITY_INT16);</Line>
				<Line Number="839" Count="0">                break;</Line>
				<Line Number="840" Count="-1"></Line>
				<Line Number="841" Count="-1">#ifdef UNITY_SUPPORT_64</Line>
				<Line Number="842" Count="0">            case 8:</Line>
				<Line Number="843" Count="0">                expect_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT64*)expected;</Line>
				<Line Number="844" Count="0">                actual_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT64*)actual;</Line>
				<Line Number="845" Count="0">                increment  = sizeof(UNITY_INT64);</Line>
				<Line Number="846" Count="0">                break;</Line>
				<Line Number="847" Count="-1">#endif</Line>
				<Line Number="848" Count="-1"></Line>
				<Line Number="849" Count="0">            default: /* default is length 4 bytes */</Line>
				<Line Number="850" Count="-1">            case 4:</Line>
				<Line Number="851" Count="0">                expect_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT32*)expected;</Line>
				<Line Number="852" Count="0">                actual_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT32*)actual;</Line>
				<Line Number="853" Count="-1">#ifdef UNITY_SUPPORT_64</Line>
				<Line Number="854" Count="0">                if (style &amp; (UNITY_DISPLAY_RANGE_UINT | UNITY_DISPLAY_RANGE_HEX))</Line>
				<Line Number="855" Count="-1">                {</Line>
				<Line Number="856" Count="0">                    expect_val &amp;= 0x00000000FFFFFFFF;</Line>
				<Line Number="857" Count="0">                    actual_val &amp;= 0x00000000FFFFFFFF;</Line>
				<Line Number="858" Count="-1">                }</Line>
				<Line Number="859" Count="-1">#endif</Line>
				<Line Number="860" Count="0">                increment  = sizeof(UNITY_INT32);</Line>
				<Line Number="861" Count="0">                length = 4;</Line>
				<Line Number="862" Count="0">                break;</Line>
				<Line Number="863" Count="-1">        }</Line>
				<Line Number="864" Count="-1"></Line>
				<Line Number="865" Count="0">        if (expect_val != actual_val)</Line>
				<Line Number="866" Count="-1">        {</Line>
				<Line Number="867" Count="0">            if ((style &amp; UNITY_DISPLAY_RANGE_UINT) &amp;&amp; (length &lt; (UNITY_INT_WIDTH / 8)))</Line>
				<Line Number="868" Count="-1">            {   /* For UINT, remove sign extension (padding 1's) from signed type casts above */</Line>
				<Line Number="869" Count="0">                UNITY_INT mask = 1;</Line>
				<Line Number="870" Count="0">                mask = (mask &lt;&lt; 8 * length) - 1;</Line>
				<Line Number="871" Count="0">                expect_val &amp;= mask;</Line>
				<Line Number="872" Count="0">                actual_val &amp;= mask;</Line>
				<Line Number="873" Count="-1">            }</Line>
				<Line Number="874" Count="0">            UnityTestResultsFailBegin(lineNumber);</Line>
				<Line Number="875" Count="0">            UnityPrint(UnityStrElement);</Line>
				<Line Number="876" Count="0">            UnityPrintNumberUnsigned(num_elements - elements - 1);</Line>
				<Line Number="877" Count="0">            UnityPrint(UnityStrExpected);</Line>
				<Line Number="878" Count="0">            UnityPrintNumberByStyle(expect_val, style);</Line>
				<Line Number="879" Count="0">            UnityPrint(UnityStrWas);</Line>
				<Line Number="880" Count="0">            UnityPrintNumberByStyle(actual_val, style);</Line>
				<Line Number="881" Count="0">            UnityAddMsgIfSpecified(msg);</Line>
				<Line Number="882" Count="0">            UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="883" Count="-1">        }</Line>
				<Line Number="884" Count="-1">        /* Walk through array by incrementing the pointers */</Line>
				<Line Number="885" Count="0">        if (flags == UNITY_ARRAY_TO_ARRAY)</Line>
				<Line Number="886" Count="-1">        {</Line>
				<Line Number="887" Count="0">            expected = (UNITY_INTERNAL_PTR)((const char*)expected + increment);</Line>
				<Line Number="888" Count="-1">        }</Line>
				<Line Number="889" Count="0">        actual = (UNITY_INTERNAL_PTR)((const char*)actual + increment);</Line>
				<Line Number="890" Count="-1">    }</Line>
				<Line Number="891" Count="-1">}</Line>
				<Line Number="892" Count="-1"></Line>
				<Line Number="893" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="894" Count="-1">#ifndef UNITY_EXCLUDE_FLOAT</Line>
				<Line Number="895" Count="-1">/* Wrap this define in a function with variable types as float or double */</Line>
				<Line Number="896" Count="-1">#define UNITY_FLOAT_OR_DOUBLE_WITHIN(delta, expected, actual, diff)                           \</Line>
				<Line Number="897" Count="-1">    if (UNITY_IS_INF(expected) &amp;&amp; UNITY_IS_INF(actual) &amp;&amp; (((expected) &lt; 0) == ((actual) &lt; 0))) return 1;   \</Line>
				<Line Number="898" Count="-1">    if (UNITY_NAN_CHECK) return 1;                                                            \</Line>
				<Line Number="899" Count="-1">    (diff) = (actual) - (expected);                                                           \</Line>
				<Line Number="900" Count="-1">    if ((diff) &lt; 0) (diff) = -(diff);                                                         \</Line>
				<Line Number="901" Count="-1">    if ((delta) &lt; 0) (delta) = -(delta);                                                      \</Line>
				<Line Number="902" Count="-1">    return !(UNITY_IS_NAN(diff) || UNITY_IS_INF(diff) || ((diff) &gt; (delta)))</Line>
				<Line Number="903" Count="-1">    /* This first part of this condition will catch any NaN or Infinite values */</Line>
				<Line Number="904" Count="-1">#ifndef UNITY_NAN_NOT_EQUAL_NAN</Line>
				<Line Number="905" Count="-1">  #define UNITY_NAN_CHECK UNITY_IS_NAN(expected) &amp;&amp; UNITY_IS_NAN(actual)</Line>
				<Line Number="906" Count="-1">#else</Line>
				<Line Number="907" Count="-1">  #define UNITY_NAN_CHECK 0</Line>
				<Line Number="908" Count="-1">#endif</Line>
				<Line Number="909" Count="-1"></Line>
				<Line Number="910" Count="-1">#ifndef UNITY_EXCLUDE_FLOAT_PRINT</Line>
				<Line Number="911" Count="-1">  #define UNITY_PRINT_EXPECTED_AND_ACTUAL_FLOAT(expected, actual) \</Line>
				<Line Number="912" Count="-1">  do {                                                            \</Line>
				<Line Number="913" Count="-1">    UnityPrint(UnityStrExpected);                                 \</Line>
				<Line Number="914" Count="-1">    UnityPrintFloat(expected);                                    \</Line>
				<Line Number="915" Count="-1">    UnityPrint(UnityStrWas);                                      \</Line>
				<Line Number="916" Count="-1">    UnityPrintFloat(actual);                                      \</Line>
				<Line Number="917" Count="-1">  } while (0)</Line>
				<Line Number="918" Count="-1">#else</Line>
				<Line Number="919" Count="-1">  #define UNITY_PRINT_EXPECTED_AND_ACTUAL_FLOAT(expected, actual) \</Line>
				<Line Number="920" Count="-1">    UnityPrint(UnityStrDelta)</Line>
				<Line Number="921" Count="-1">#endif /* UNITY_EXCLUDE_FLOAT_PRINT */</Line>
				<Line Number="922" Count="-1"></Line>
				<Line Number="923" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="924" Count="0">static int UnityFloatsWithin(UNITY_FLOAT delta, UNITY_FLOAT expected, UNITY_FLOAT actual)</Line>
				<Line Number="925" Count="-1">{</Line>
				<Line Number="926" Count="-1">    UNITY_FLOAT diff;</Line>
				<Line Number="927" Count="0">    UNITY_FLOAT_OR_DOUBLE_WITHIN(delta, expected, actual, diff);</Line>
				<Line Number="928" Count="-1">}</Line>
				<Line Number="929" Count="-1"></Line>
				<Line Number="930" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="931" Count="0">void UnityAssertWithinFloatArray(const UNITY_FLOAT delta,</Line>
				<Line Number="932" Count="-1">                                 UNITY_PTR_ATTRIBUTE const UNITY_FLOAT* expected,</Line>
				<Line Number="933" Count="-1">                                 UNITY_PTR_ATTRIBUTE const UNITY_FLOAT* actual,</Line>
				<Line Number="934" Count="-1">                                 const UNITY_UINT32 num_elements,</Line>
				<Line Number="935" Count="-1">                                 const char* msg,</Line>
				<Line Number="936" Count="-1">                                 const UNITY_LINE_TYPE lineNumber,</Line>
				<Line Number="937" Count="-1">                                 const UNITY_FLAGS_T flags)</Line>
				<Line Number="938" Count="-1">{</Line>
				<Line Number="939" Count="0">    UNITY_UINT32 elements = num_elements;</Line>
				<Line Number="940" Count="0">    UNITY_PTR_ATTRIBUTE const UNITY_FLOAT* ptr_expected = expected;</Line>
				<Line Number="941" Count="0">    UNITY_PTR_ATTRIBUTE const UNITY_FLOAT* ptr_actual = actual;</Line>
				<Line Number="942" Count="0">    UNITY_FLOAT in_delta = delta;</Line>
				<Line Number="943" Count="0">    UNITY_FLOAT current_element_delta = delta;</Line>
				<Line Number="944" Count="-1"></Line>
				<Line Number="945" Count="0">    RETURN_IF_FAIL_OR_IGNORE;</Line>
				<Line Number="946" Count="-1"></Line>
				<Line Number="947" Count="0">    if (elements == 0)</Line>
				<Line Number="948" Count="-1">    {</Line>
				<Line Number="949" Count="-1">#ifdef UNITY_COMPARE_PTRS_ON_ZERO_ARRAY</Line>
				<Line Number="950" Count="-1">        UNITY_TEST_ASSERT_EQUAL_PTR(expected, actual, lineNumber, msg);</Line>
				<Line Number="951" Count="-1">#else</Line>
				<Line Number="952" Count="0">        UnityPrintPointlessAndBail();</Line>
				<Line Number="953" Count="-1">#endif</Line>
				<Line Number="954" Count="-1">    }</Line>
				<Line Number="955" Count="-1"></Line>
				<Line Number="956" Count="0">    if (UNITY_IS_INF(in_delta))</Line>
				<Line Number="957" Count="-1">    {</Line>
				<Line Number="958" Count="0">        return; /* Arrays will be force equal with infinite delta */</Line>
				<Line Number="959" Count="-1">    }</Line>
				<Line Number="960" Count="-1"></Line>
				<Line Number="961" Count="0">    if (UNITY_IS_NAN(in_delta))</Line>
				<Line Number="962" Count="-1">    {</Line>
				<Line Number="963" Count="-1">        /* Delta must be correct number */</Line>
				<Line Number="964" Count="0">        UnityPrintPointlessAndBail();</Line>
				<Line Number="965" Count="-1">    }</Line>
				<Line Number="966" Count="-1"></Line>
				<Line Number="967" Count="0">    if (expected == actual)</Line>
				<Line Number="968" Count="-1">    {</Line>
				<Line Number="969" Count="0">        return; /* Both are NULL or same pointer */</Line>
				<Line Number="970" Count="-1">    }</Line>
				<Line Number="971" Count="-1"></Line>
				<Line Number="972" Count="0">    if (UnityIsOneArrayNull((UNITY_INTERNAL_PTR)expected, (UNITY_INTERNAL_PTR)actual, lineNumber, msg))</Line>
				<Line Number="973" Count="-1">    {</Line>
				<Line Number="974" Count="0">        UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="975" Count="-1">    }</Line>
				<Line Number="976" Count="-1"></Line>
				<Line Number="977" Count="-1">    /* fix delta sign if need */</Line>
				<Line Number="978" Count="0">    if (in_delta &lt; 0)</Line>
				<Line Number="979" Count="-1">    {</Line>
				<Line Number="980" Count="0">        in_delta = -in_delta;</Line>
				<Line Number="981" Count="-1">    }</Line>
				<Line Number="982" Count="-1"></Line>
				<Line Number="983" Count="0">    while (elements--)</Line>
				<Line Number="984" Count="-1">    {</Line>
				<Line Number="985" Count="0">        current_element_delta = *ptr_expected * UNITY_FLOAT_PRECISION;</Line>
				<Line Number="986" Count="-1"></Line>
				<Line Number="987" Count="0">        if (current_element_delta &lt; 0)</Line>
				<Line Number="988" Count="-1">        {</Line>
				<Line Number="989" Count="-1">            /* fix delta sign for correct calculations */</Line>
				<Line Number="990" Count="0">            current_element_delta = -current_element_delta;</Line>
				<Line Number="991" Count="-1">        }</Line>
				<Line Number="992" Count="-1"></Line>
				<Line Number="993" Count="0">        if (!UnityFloatsWithin(in_delta + current_element_delta, *ptr_expected, *ptr_actual))</Line>
				<Line Number="994" Count="-1">        {</Line>
				<Line Number="995" Count="0">            UnityTestResultsFailBegin(lineNumber);</Line>
				<Line Number="996" Count="0">            UnityPrint(UnityStrElement);</Line>
				<Line Number="997" Count="0">            UnityPrintNumberUnsigned(num_elements - elements - 1);</Line>
				<Line Number="998" Count="0">            UNITY_PRINT_EXPECTED_AND_ACTUAL_FLOAT((UNITY_DOUBLE)*ptr_expected, (UNITY_DOUBLE)*ptr_actual);</Line>
				<Line Number="999" Count="0">            UnityAddMsgIfSpecified(msg);</Line>
				<Line Number="1000" Count="0">            UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="1001" Count="-1">        }</Line>
				<Line Number="1002" Count="0">        if (flags == UNITY_ARRAY_TO_ARRAY)</Line>
				<Line Number="1003" Count="-1">        {</Line>
				<Line Number="1004" Count="0">            ptr_expected++;</Line>
				<Line Number="1005" Count="-1">        }</Line>
				<Line Number="1006" Count="0">        ptr_actual++;</Line>
				<Line Number="1007" Count="-1">    }</Line>
				<Line Number="1008" Count="-1">}</Line>
				<Line Number="1009" Count="-1"></Line>
				<Line Number="1010" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="1011" Count="0">void UnityAssertFloatsWithin(const UNITY_FLOAT delta,</Line>
				<Line Number="1012" Count="-1">                             const UNITY_FLOAT expected,</Line>
				<Line Number="1013" Count="-1">                             const UNITY_FLOAT actual,</Line>
				<Line Number="1014" Count="-1">                             const char* msg,</Line>
				<Line Number="1015" Count="-1">                             const UNITY_LINE_TYPE lineNumber)</Line>
				<Line Number="1016" Count="-1">{</Line>
				<Line Number="1017" Count="0">    RETURN_IF_FAIL_OR_IGNORE;</Line>
				<Line Number="1018" Count="-1"></Line>
				<Line Number="1019" Count="-1"></Line>
				<Line Number="1020" Count="0">    if (!UnityFloatsWithin(delta, expected, actual))</Line>
				<Line Number="1021" Count="-1">    {</Line>
				<Line Number="1022" Count="0">        UnityTestResultsFailBegin(lineNumber);</Line>
				<Line Number="1023" Count="0">        UNITY_PRINT_EXPECTED_AND_ACTUAL_FLOAT((UNITY_DOUBLE)expected, (UNITY_DOUBLE)actual);</Line>
				<Line Number="1024" Count="0">        UnityAddMsgIfSpecified(msg);</Line>
				<Line Number="1025" Count="0">        UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="1026" Count="-1">    }</Line>
				<Line Number="1027" Count="0">}</Line>
				<Line Number="1028" Count="-1"></Line>
				<Line Number="1029" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="1030" Count="0">void UnityAssertFloatsNotWithin(const UNITY_FLOAT delta,</Line>
				<Line Number="1031" Count="-1">                                const UNITY_FLOAT expected,</Line>
				<Line Number="1032" Count="-1">                                const UNITY_FLOAT actual,</Line>
				<Line Number="1033" Count="-1">                                const char* msg,</Line>
				<Line Number="1034" Count="-1">                                const UNITY_LINE_TYPE lineNumber)</Line>
				<Line Number="1035" Count="-1">{</Line>
				<Line Number="1036" Count="0">    RETURN_IF_FAIL_OR_IGNORE;</Line>
				<Line Number="1037" Count="-1"></Line>
				<Line Number="1038" Count="0">    if (UnityFloatsWithin(delta, expected, actual))</Line>
				<Line Number="1039" Count="-1">    {</Line>
				<Line Number="1040" Count="0">        UnityTestResultsFailBegin(lineNumber);</Line>
				<Line Number="1041" Count="0">        UnityPrint(UnityStrExpected);</Line>
				<Line Number="1042" Count="0">        UnityPrintFloat((UNITY_DOUBLE)expected);</Line>
				<Line Number="1043" Count="0">        UnityPrint(UnityStrNotEqual);</Line>
				<Line Number="1044" Count="0">        UnityPrintFloat((UNITY_DOUBLE)actual);</Line>
				<Line Number="1045" Count="0">        UnityAddMsgIfSpecified(msg);</Line>
				<Line Number="1046" Count="0">        UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="1047" Count="-1">    }</Line>
				<Line Number="1048" Count="0">}</Line>
				<Line Number="1049" Count="-1"></Line>
				<Line Number="1050" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="1051" Count="0">void UnityAssertGreaterOrLessFloat(const UNITY_FLOAT threshold,</Line>
				<Line Number="1052" Count="-1">                                   const UNITY_FLOAT actual,</Line>
				<Line Number="1053" Count="-1">                                   const UNITY_COMPARISON_T compare,</Line>
				<Line Number="1054" Count="-1">                                   const char* msg,</Line>
				<Line Number="1055" Count="-1">                                   const UNITY_LINE_TYPE lineNumber)</Line>
				<Line Number="1056" Count="-1">{</Line>
				<Line Number="1057" Count="-1">    int failed;</Line>
				<Line Number="1058" Count="-1"></Line>
				<Line Number="1059" Count="0">    RETURN_IF_FAIL_OR_IGNORE;</Line>
				<Line Number="1060" Count="-1"></Line>
				<Line Number="1061" Count="0">    failed = 0;</Line>
				<Line Number="1062" Count="-1"></Line>
				<Line Number="1063" Count="-1">    /* Checking for "not success" rather than failure to get the right result for NaN */</Line>
				<Line Number="1064" Count="0">    if (!(actual &lt; threshold) &amp;&amp; (compare &amp; UNITY_SMALLER_THAN)) { failed = 1; }</Line>
				<Line Number="1065" Count="0">    if (!(actual &gt; threshold) &amp;&amp; (compare &amp; UNITY_GREATER_THAN)) { failed = 1; }</Line>
				<Line Number="1066" Count="-1"></Line>
				<Line Number="1067" Count="0">    if ((compare &amp; UNITY_EQUAL_TO) &amp;&amp; UnityFloatsWithin(threshold * UNITY_FLOAT_PRECISION, threshold, actual)) { failed = 0; }</Line>
				<Line Number="1068" Count="-1"></Line>
				<Line Number="1069" Count="0">    if (failed)</Line>
				<Line Number="1070" Count="-1">    {</Line>
				<Line Number="1071" Count="0">        UnityTestResultsFailBegin(lineNumber);</Line>
				<Line Number="1072" Count="0">        UnityPrint(UnityStrExpected);</Line>
				<Line Number="1073" Count="0">        UnityPrintFloat(actual);</Line>
				<Line Number="1074" Count="0">        if (compare &amp; UNITY_GREATER_THAN) { UnityPrint(UnityStrGt); }</Line>
				<Line Number="1075" Count="0">        if (compare &amp; UNITY_SMALLER_THAN) { UnityPrint(UnityStrLt); }</Line>
				<Line Number="1076" Count="0">        if (compare &amp; UNITY_EQUAL_TO)     { UnityPrint(UnityStrOrEqual);  }</Line>
				<Line Number="1077" Count="0">        UnityPrintFloat(threshold);</Line>
				<Line Number="1078" Count="0">        UnityAddMsgIfSpecified(msg);</Line>
				<Line Number="1079" Count="0">        UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="1080" Count="-1">    }</Line>
				<Line Number="1081" Count="0">}</Line>
				<Line Number="1082" Count="-1"></Line>
				<Line Number="1083" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="1084" Count="0">void UnityAssertFloatSpecial(const UNITY_FLOAT actual,</Line>
				<Line Number="1085" Count="-1">                             const char* msg,</Line>
				<Line Number="1086" Count="-1">                             const UNITY_LINE_TYPE lineNumber,</Line>
				<Line Number="1087" Count="-1">                             const UNITY_FLOAT_TRAIT_T style)</Line>
				<Line Number="1088" Count="-1">{</Line>
				<Line Number="1089" Count="0">    const char* trait_names[] = {UnityStrInf, UnityStrNegInf, UnityStrNaN, UnityStrDet};</Line>
				<Line Number="1090" Count="0">    UNITY_INT should_be_trait = ((UNITY_INT)style &amp; 1);</Line>
				<Line Number="1091" Count="0">    UNITY_INT is_trait        = !should_be_trait;</Line>
				<Line Number="1092" Count="0">    UNITY_INT trait_index     = (UNITY_INT)(style &gt;&gt; 1);</Line>
				<Line Number="1093" Count="-1"></Line>
				<Line Number="1094" Count="0">    RETURN_IF_FAIL_OR_IGNORE;</Line>
				<Line Number="1095" Count="-1"></Line>
				<Line Number="1096" Count="0">    switch (style)</Line>
				<Line Number="1097" Count="-1">    {</Line>
				<Line Number="1098" Count="0">        case UNITY_FLOAT_IS_INF:</Line>
				<Line Number="1099" Count="-1">        case UNITY_FLOAT_IS_NOT_INF:</Line>
				<Line Number="1100" Count="0">            is_trait = UNITY_IS_INF(actual) &amp;&amp; (actual &gt; 0);</Line>
				<Line Number="1101" Count="0">            break;</Line>
				<Line Number="1102" Count="0">        case UNITY_FLOAT_IS_NEG_INF:</Line>
				<Line Number="1103" Count="-1">        case UNITY_FLOAT_IS_NOT_NEG_INF:</Line>
				<Line Number="1104" Count="0">            is_trait = UNITY_IS_INF(actual) &amp;&amp; (actual &lt; 0);</Line>
				<Line Number="1105" Count="0">            break;</Line>
				<Line Number="1106" Count="-1"></Line>
				<Line Number="1107" Count="0">        case UNITY_FLOAT_IS_NAN:</Line>
				<Line Number="1108" Count="-1">        case UNITY_FLOAT_IS_NOT_NAN:</Line>
				<Line Number="1109" Count="0">            is_trait = UNITY_IS_NAN(actual) ? 1 : 0;</Line>
				<Line Number="1110" Count="0">            break;</Line>
				<Line Number="1111" Count="-1"></Line>
				<Line Number="1112" Count="0">        case UNITY_FLOAT_IS_DET: /* A determinate number is non infinite and not NaN. */</Line>
				<Line Number="1113" Count="-1">        case UNITY_FLOAT_IS_NOT_DET:</Line>
				<Line Number="1114" Count="0">            is_trait = !UNITY_IS_INF(actual) &amp;&amp; !UNITY_IS_NAN(actual);</Line>
				<Line Number="1115" Count="0">            break;</Line>
				<Line Number="1116" Count="-1"></Line>
				<Line Number="1117" Count="0">        case UNITY_FLOAT_INVALID_TRAIT:  /* Supress warning */</Line>
				<Line Number="1118" Count="-1">        default: /* including UNITY_FLOAT_INVALID_TRAIT */</Line>
				<Line Number="1119" Count="0">            trait_index = 0;</Line>
				<Line Number="1120" Count="0">            trait_names[0] = UnityStrInvalidFloatTrait;</Line>
				<Line Number="1121" Count="0">            break;</Line>
				<Line Number="1122" Count="-1">    }</Line>
				<Line Number="1123" Count="-1"></Line>
				<Line Number="1124" Count="0">    if (is_trait != should_be_trait)</Line>
				<Line Number="1125" Count="-1">    {</Line>
				<Line Number="1126" Count="0">        UnityTestResultsFailBegin(lineNumber);</Line>
				<Line Number="1127" Count="0">        UnityPrint(UnityStrExpected);</Line>
				<Line Number="1128" Count="0">        if (!should_be_trait)</Line>
				<Line Number="1129" Count="-1">        {</Line>
				<Line Number="1130" Count="0">            UnityPrint(UnityStrNot);</Line>
				<Line Number="1131" Count="-1">        }</Line>
				<Line Number="1132" Count="0">        UnityPrint(trait_names[trait_index]);</Line>
				<Line Number="1133" Count="0">        UnityPrint(UnityStrWas);</Line>
				<Line Number="1134" Count="-1">#ifndef UNITY_EXCLUDE_FLOAT_PRINT</Line>
				<Line Number="1135" Count="0">        UnityPrintFloat((UNITY_DOUBLE)actual);</Line>
				<Line Number="1136" Count="-1">#else</Line>
				<Line Number="1137" Count="-1">        if (should_be_trait)</Line>
				<Line Number="1138" Count="-1">        {</Line>
				<Line Number="1139" Count="-1">            UnityPrint(UnityStrNot);</Line>
				<Line Number="1140" Count="-1">        }</Line>
				<Line Number="1141" Count="-1">        UnityPrint(trait_names[trait_index]);</Line>
				<Line Number="1142" Count="-1">#endif</Line>
				<Line Number="1143" Count="0">        UnityAddMsgIfSpecified(msg);</Line>
				<Line Number="1144" Count="0">        UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="1145" Count="-1">    }</Line>
				<Line Number="1146" Count="0">}</Line>
				<Line Number="1147" Count="-1"></Line>
				<Line Number="1148" Count="-1">#endif /* not UNITY_EXCLUDE_FLOAT */</Line>
				<Line Number="1149" Count="-1"></Line>
				<Line Number="1150" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="1151" Count="-1">#ifndef UNITY_EXCLUDE_DOUBLE</Line>
				<Line Number="1152" Count="-1">static int UnityDoublesWithin(UNITY_DOUBLE delta, UNITY_DOUBLE expected, UNITY_DOUBLE actual)</Line>
				<Line Number="1153" Count="-1">{</Line>
				<Line Number="1154" Count="-1">    UNITY_DOUBLE diff;</Line>
				<Line Number="1155" Count="-1">    UNITY_FLOAT_OR_DOUBLE_WITHIN(delta, expected, actual, diff);</Line>
				<Line Number="1156" Count="-1">}</Line>
				<Line Number="1157" Count="-1"></Line>
				<Line Number="1158" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="1159" Count="-1">void UnityAssertWithinDoubleArray(const UNITY_DOUBLE delta,</Line>
				<Line Number="1160" Count="-1">                                  UNITY_PTR_ATTRIBUTE const UNITY_DOUBLE* expected,</Line>
				<Line Number="1161" Count="-1">                                  UNITY_PTR_ATTRIBUTE const UNITY_DOUBLE* actual,</Line>
				<Line Number="1162" Count="-1">                                  const UNITY_UINT32 num_elements,</Line>
				<Line Number="1163" Count="-1">                                  const char* msg,</Line>
				<Line Number="1164" Count="-1">                                  const UNITY_LINE_TYPE lineNumber,</Line>
				<Line Number="1165" Count="-1">                                  const UNITY_FLAGS_T flags)</Line>
				<Line Number="1166" Count="-1">{</Line>
				<Line Number="1167" Count="-1">    UNITY_UINT32 elements = num_elements;</Line>
				<Line Number="1168" Count="-1">    UNITY_PTR_ATTRIBUTE const UNITY_DOUBLE* ptr_expected = expected;</Line>
				<Line Number="1169" Count="-1">    UNITY_PTR_ATTRIBUTE const UNITY_DOUBLE* ptr_actual = actual;</Line>
				<Line Number="1170" Count="-1">    UNITY_DOUBLE in_delta = delta;</Line>
				<Line Number="1171" Count="-1">    UNITY_DOUBLE current_element_delta = delta;</Line>
				<Line Number="1172" Count="-1"></Line>
				<Line Number="1173" Count="-1">    RETURN_IF_FAIL_OR_IGNORE;</Line>
				<Line Number="1174" Count="-1"></Line>
				<Line Number="1175" Count="-1">    if (elements == 0)</Line>
				<Line Number="1176" Count="-1">    {</Line>
				<Line Number="1177" Count="-1">#ifdef UNITY_COMPARE_PTRS_ON_ZERO_ARRAY</Line>
				<Line Number="1178" Count="-1">        UNITY_TEST_ASSERT_EQUAL_PTR(expected, actual, lineNumber, msg);</Line>
				<Line Number="1179" Count="-1">#else</Line>
				<Line Number="1180" Count="-1">        UnityPrintPointlessAndBail();</Line>
				<Line Number="1181" Count="-1">#endif</Line>
				<Line Number="1182" Count="-1">    }</Line>
				<Line Number="1183" Count="-1"></Line>
				<Line Number="1184" Count="-1">    if (UNITY_IS_INF(in_delta))</Line>
				<Line Number="1185" Count="-1">    {</Line>
				<Line Number="1186" Count="-1">        return; /* Arrays will be force equal with infinite delta */</Line>
				<Line Number="1187" Count="-1">    }</Line>
				<Line Number="1188" Count="-1"></Line>
				<Line Number="1189" Count="-1">    if (UNITY_IS_NAN(in_delta))</Line>
				<Line Number="1190" Count="-1">    {</Line>
				<Line Number="1191" Count="-1">        /* Delta must be correct number */</Line>
				<Line Number="1192" Count="-1">        UnityPrintPointlessAndBail();</Line>
				<Line Number="1193" Count="-1">    }</Line>
				<Line Number="1194" Count="-1"></Line>
				<Line Number="1195" Count="-1">    if (expected == actual)</Line>
				<Line Number="1196" Count="-1">    {</Line>
				<Line Number="1197" Count="-1">        return; /* Both are NULL or same pointer */</Line>
				<Line Number="1198" Count="-1">    }</Line>
				<Line Number="1199" Count="-1"></Line>
				<Line Number="1200" Count="-1">    if (UnityIsOneArrayNull((UNITY_INTERNAL_PTR)expected, (UNITY_INTERNAL_PTR)actual, lineNumber, msg))</Line>
				<Line Number="1201" Count="-1">    {</Line>
				<Line Number="1202" Count="-1">        UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="1203" Count="-1">    }</Line>
				<Line Number="1204" Count="-1"></Line>
				<Line Number="1205" Count="-1">    /* fix delta sign if need */</Line>
				<Line Number="1206" Count="-1">    if (in_delta &lt; 0)</Line>
				<Line Number="1207" Count="-1">    {</Line>
				<Line Number="1208" Count="-1">        in_delta = -in_delta;</Line>
				<Line Number="1209" Count="-1">    }</Line>
				<Line Number="1210" Count="-1"></Line>
				<Line Number="1211" Count="-1">    while (elements--)</Line>
				<Line Number="1212" Count="-1">    {</Line>
				<Line Number="1213" Count="-1">        current_element_delta = *ptr_expected * UNITY_DOUBLE_PRECISION;</Line>
				<Line Number="1214" Count="-1"></Line>
				<Line Number="1215" Count="-1">        if (current_element_delta &lt; 0)</Line>
				<Line Number="1216" Count="-1">        {</Line>
				<Line Number="1217" Count="-1">            /* fix delta sign for correct calculations */</Line>
				<Line Number="1218" Count="-1">            current_element_delta = -current_element_delta;</Line>
				<Line Number="1219" Count="-1">        }</Line>
				<Line Number="1220" Count="-1"></Line>
				<Line Number="1221" Count="-1">        if (!UnityDoublesWithin(in_delta + current_element_delta, *ptr_expected, *ptr_actual))</Line>
				<Line Number="1222" Count="-1">        {</Line>
				<Line Number="1223" Count="-1">            UnityTestResultsFailBegin(lineNumber);</Line>
				<Line Number="1224" Count="-1">            UnityPrint(UnityStrElement);</Line>
				<Line Number="1225" Count="-1">            UnityPrintNumberUnsigned(num_elements - elements - 1);</Line>
				<Line Number="1226" Count="-1">            UNITY_PRINT_EXPECTED_AND_ACTUAL_FLOAT(*ptr_expected, *ptr_actual);</Line>
				<Line Number="1227" Count="-1">            UnityAddMsgIfSpecified(msg);</Line>
				<Line Number="1228" Count="-1">            UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="1229" Count="-1">        }</Line>
				<Line Number="1230" Count="-1">        if (flags == UNITY_ARRAY_TO_ARRAY)</Line>
				<Line Number="1231" Count="-1">        {</Line>
				<Line Number="1232" Count="-1">            ptr_expected++;</Line>
				<Line Number="1233" Count="-1">        }</Line>
				<Line Number="1234" Count="-1">        ptr_actual++;</Line>
				<Line Number="1235" Count="-1">    }</Line>
				<Line Number="1236" Count="-1">}</Line>
				<Line Number="1237" Count="-1"></Line>
				<Line Number="1238" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="1239" Count="-1">void UnityAssertDoublesWithin(const UNITY_DOUBLE delta,</Line>
				<Line Number="1240" Count="-1">                              const UNITY_DOUBLE expected,</Line>
				<Line Number="1241" Count="-1">                              const UNITY_DOUBLE actual,</Line>
				<Line Number="1242" Count="-1">                              const char* msg,</Line>
				<Line Number="1243" Count="-1">                              const UNITY_LINE_TYPE lineNumber)</Line>
				<Line Number="1244" Count="-1">{</Line>
				<Line Number="1245" Count="-1">    RETURN_IF_FAIL_OR_IGNORE;</Line>
				<Line Number="1246" Count="-1"></Line>
				<Line Number="1247" Count="-1">    if (!UnityDoublesWithin(delta, expected, actual))</Line>
				<Line Number="1248" Count="-1">    {</Line>
				<Line Number="1249" Count="-1">        UnityTestResultsFailBegin(lineNumber);</Line>
				<Line Number="1250" Count="-1">        UNITY_PRINT_EXPECTED_AND_ACTUAL_FLOAT(expected, actual);</Line>
				<Line Number="1251" Count="-1">        UnityAddMsgIfSpecified(msg);</Line>
				<Line Number="1252" Count="-1">        UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="1253" Count="-1">    }</Line>
				<Line Number="1254" Count="-1">}</Line>
				<Line Number="1255" Count="-1"></Line>
				<Line Number="1256" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="1257" Count="-1">void UnityAssertDoublesNotWithin(const UNITY_DOUBLE delta,</Line>
				<Line Number="1258" Count="-1">                                 const UNITY_DOUBLE expected,</Line>
				<Line Number="1259" Count="-1">                                 const UNITY_DOUBLE actual,</Line>
				<Line Number="1260" Count="-1">                                 const char* msg,</Line>
				<Line Number="1261" Count="-1">                                 const UNITY_LINE_TYPE lineNumber)</Line>
				<Line Number="1262" Count="-1">{</Line>
				<Line Number="1263" Count="-1">    RETURN_IF_FAIL_OR_IGNORE;</Line>
				<Line Number="1264" Count="-1"></Line>
				<Line Number="1265" Count="-1">    if (UnityDoublesWithin(delta, expected, actual))</Line>
				<Line Number="1266" Count="-1">    {</Line>
				<Line Number="1267" Count="-1">        UnityTestResultsFailBegin(lineNumber);</Line>
				<Line Number="1268" Count="-1">        UnityPrint(UnityStrExpected);</Line>
				<Line Number="1269" Count="-1">        UnityPrintFloat((UNITY_DOUBLE)expected);</Line>
				<Line Number="1270" Count="-1">        UnityPrint(UnityStrNotEqual);</Line>
				<Line Number="1271" Count="-1">        UnityPrintFloat((UNITY_DOUBLE)actual);</Line>
				<Line Number="1272" Count="-1">        UnityAddMsgIfSpecified(msg);</Line>
				<Line Number="1273" Count="-1">        UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="1274" Count="-1">    }</Line>
				<Line Number="1275" Count="-1">}</Line>
				<Line Number="1276" Count="-1"></Line>
				<Line Number="1277" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="1278" Count="-1">void UnityAssertGreaterOrLessDouble(const UNITY_DOUBLE threshold,</Line>
				<Line Number="1279" Count="-1">                                    const UNITY_DOUBLE actual,</Line>
				<Line Number="1280" Count="-1">                                    const UNITY_COMPARISON_T compare,</Line>
				<Line Number="1281" Count="-1">                                    const char* msg,</Line>
				<Line Number="1282" Count="-1">                                    const UNITY_LINE_TYPE lineNumber)</Line>
				<Line Number="1283" Count="-1">{</Line>
				<Line Number="1284" Count="-1">    int failed;</Line>
				<Line Number="1285" Count="-1"></Line>
				<Line Number="1286" Count="-1">    RETURN_IF_FAIL_OR_IGNORE;</Line>
				<Line Number="1287" Count="-1"></Line>
				<Line Number="1288" Count="-1">    failed = 0;</Line>
				<Line Number="1289" Count="-1"></Line>
				<Line Number="1290" Count="-1">    /* Checking for "not success" rather than failure to get the right result for NaN */</Line>
				<Line Number="1291" Count="-1">    if (!(actual &lt; threshold) &amp;&amp; (compare &amp; UNITY_SMALLER_THAN)) { failed = 1; }</Line>
				<Line Number="1292" Count="-1">    if (!(actual &gt; threshold) &amp;&amp; (compare &amp; UNITY_GREATER_THAN)) { failed = 1; }</Line>
				<Line Number="1293" Count="-1"></Line>
				<Line Number="1294" Count="-1">    if ((compare &amp; UNITY_EQUAL_TO) &amp;&amp; UnityDoublesWithin(threshold * UNITY_DOUBLE_PRECISION, threshold, actual)) { failed = 0; }</Line>
				<Line Number="1295" Count="-1"></Line>
				<Line Number="1296" Count="-1">    if (failed)</Line>
				<Line Number="1297" Count="-1">    {</Line>
				<Line Number="1298" Count="-1">        UnityTestResultsFailBegin(lineNumber);</Line>
				<Line Number="1299" Count="-1">        UnityPrint(UnityStrExpected);</Line>
				<Line Number="1300" Count="-1">        UnityPrintFloat(actual);</Line>
				<Line Number="1301" Count="-1">        if (compare &amp; UNITY_GREATER_THAN) { UnityPrint(UnityStrGt); }</Line>
				<Line Number="1302" Count="-1">        if (compare &amp; UNITY_SMALLER_THAN) { UnityPrint(UnityStrLt); }</Line>
				<Line Number="1303" Count="-1">        if (compare &amp; UNITY_EQUAL_TO)     { UnityPrint(UnityStrOrEqual);  }</Line>
				<Line Number="1304" Count="-1">        UnityPrintFloat(threshold);</Line>
				<Line Number="1305" Count="-1">        UnityAddMsgIfSpecified(msg);</Line>
				<Line Number="1306" Count="-1">        UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="1307" Count="-1">    }</Line>
				<Line Number="1308" Count="-1">}</Line>
				<Line Number="1309" Count="-1"></Line>
				<Line Number="1310" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="1311" Count="-1">void UnityAssertDoubleSpecial(const UNITY_DOUBLE actual,</Line>
				<Line Number="1312" Count="-1">                              const char* msg,</Line>
				<Line Number="1313" Count="-1">                              const UNITY_LINE_TYPE lineNumber,</Line>
				<Line Number="1314" Count="-1">                              const UNITY_FLOAT_TRAIT_T style)</Line>
				<Line Number="1315" Count="-1">{</Line>
				<Line Number="1316" Count="-1">    const char* trait_names[] = {UnityStrInf, UnityStrNegInf, UnityStrNaN, UnityStrDet};</Line>
				<Line Number="1317" Count="-1">    UNITY_INT should_be_trait = ((UNITY_INT)style &amp; 1);</Line>
				<Line Number="1318" Count="-1">    UNITY_INT is_trait        = !should_be_trait;</Line>
				<Line Number="1319" Count="-1">    UNITY_INT trait_index     = (UNITY_INT)(style &gt;&gt; 1);</Line>
				<Line Number="1320" Count="-1"></Line>
				<Line Number="1321" Count="-1">    RETURN_IF_FAIL_OR_IGNORE;</Line>
				<Line Number="1322" Count="-1"></Line>
				<Line Number="1323" Count="-1">    switch (style)</Line>
				<Line Number="1324" Count="-1">    {</Line>
				<Line Number="1325" Count="-1">        case UNITY_FLOAT_IS_INF:</Line>
				<Line Number="1326" Count="-1">        case UNITY_FLOAT_IS_NOT_INF:</Line>
				<Line Number="1327" Count="-1">            is_trait = UNITY_IS_INF(actual) &amp;&amp; (actual &gt; 0);</Line>
				<Line Number="1328" Count="-1">            break;</Line>
				<Line Number="1329" Count="-1">        case UNITY_FLOAT_IS_NEG_INF:</Line>
				<Line Number="1330" Count="-1">        case UNITY_FLOAT_IS_NOT_NEG_INF:</Line>
				<Line Number="1331" Count="-1">            is_trait = UNITY_IS_INF(actual) &amp;&amp; (actual &lt; 0);</Line>
				<Line Number="1332" Count="-1">            break;</Line>
				<Line Number="1333" Count="-1"></Line>
				<Line Number="1334" Count="-1">        case UNITY_FLOAT_IS_NAN:</Line>
				<Line Number="1335" Count="-1">        case UNITY_FLOAT_IS_NOT_NAN:</Line>
				<Line Number="1336" Count="-1">            is_trait = UNITY_IS_NAN(actual) ? 1 : 0;</Line>
				<Line Number="1337" Count="-1">            break;</Line>
				<Line Number="1338" Count="-1"></Line>
				<Line Number="1339" Count="-1">        case UNITY_FLOAT_IS_DET: /* A determinate number is non infinite and not NaN. */</Line>
				<Line Number="1340" Count="-1">        case UNITY_FLOAT_IS_NOT_DET:</Line>
				<Line Number="1341" Count="-1">            is_trait = !UNITY_IS_INF(actual) &amp;&amp; !UNITY_IS_NAN(actual);</Line>
				<Line Number="1342" Count="-1">            break;</Line>
				<Line Number="1343" Count="-1"></Line>
				<Line Number="1344" Count="-1">        case UNITY_FLOAT_INVALID_TRAIT:  /* Supress warning */</Line>
				<Line Number="1345" Count="-1">        default: /* including UNITY_FLOAT_INVALID_TRAIT */</Line>
				<Line Number="1346" Count="-1">            trait_index = 0;</Line>
				<Line Number="1347" Count="-1">            trait_names[0] = UnityStrInvalidFloatTrait;</Line>
				<Line Number="1348" Count="-1">            break;</Line>
				<Line Number="1349" Count="-1">    }</Line>
				<Line Number="1350" Count="-1"></Line>
				<Line Number="1351" Count="-1">    if (is_trait != should_be_trait)</Line>
				<Line Number="1352" Count="-1">    {</Line>
				<Line Number="1353" Count="-1">        UnityTestResultsFailBegin(lineNumber);</Line>
				<Line Number="1354" Count="-1">        UnityPrint(UnityStrExpected);</Line>
				<Line Number="1355" Count="-1">        if (!should_be_trait)</Line>
				<Line Number="1356" Count="-1">        {</Line>
				<Line Number="1357" Count="-1">            UnityPrint(UnityStrNot);</Line>
				<Line Number="1358" Count="-1">        }</Line>
				<Line Number="1359" Count="-1">        UnityPrint(trait_names[trait_index]);</Line>
				<Line Number="1360" Count="-1">        UnityPrint(UnityStrWas);</Line>
				<Line Number="1361" Count="-1">#ifndef UNITY_EXCLUDE_FLOAT_PRINT</Line>
				<Line Number="1362" Count="-1">        UnityPrintFloat(actual);</Line>
				<Line Number="1363" Count="-1">#else</Line>
				<Line Number="1364" Count="-1">        if (should_be_trait)</Line>
				<Line Number="1365" Count="-1">        {</Line>
				<Line Number="1366" Count="-1">            UnityPrint(UnityStrNot);</Line>
				<Line Number="1367" Count="-1">        }</Line>
				<Line Number="1368" Count="-1">        UnityPrint(trait_names[trait_index]);</Line>
				<Line Number="1369" Count="-1">#endif</Line>
				<Line Number="1370" Count="-1">        UnityAddMsgIfSpecified(msg);</Line>
				<Line Number="1371" Count="-1">        UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="1372" Count="-1">    }</Line>
				<Line Number="1373" Count="-1">}</Line>
				<Line Number="1374" Count="-1"></Line>
				<Line Number="1375" Count="-1">#endif /* not UNITY_EXCLUDE_DOUBLE */</Line>
				<Line Number="1376" Count="-1"></Line>
				<Line Number="1377" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="1378" Count="0">void UnityAssertNumbersWithin(const UNITY_UINT delta,</Line>
				<Line Number="1379" Count="-1">                              const UNITY_INT expected,</Line>
				<Line Number="1380" Count="-1">                              const UNITY_INT actual,</Line>
				<Line Number="1381" Count="-1">                              const char* msg,</Line>
				<Line Number="1382" Count="-1">                              const UNITY_LINE_TYPE lineNumber,</Line>
				<Line Number="1383" Count="-1">                              const UNITY_DISPLAY_STYLE_T style)</Line>
				<Line Number="1384" Count="-1">{</Line>
				<Line Number="1385" Count="0">    RETURN_IF_FAIL_OR_IGNORE;</Line>
				<Line Number="1386" Count="-1"></Line>
				<Line Number="1387" Count="0">    if ((style &amp; UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)</Line>
				<Line Number="1388" Count="-1">    {</Line>
				<Line Number="1389" Count="0">        if (actual &gt; expected)</Line>
				<Line Number="1390" Count="-1">        {</Line>
				<Line Number="1391" Count="0">            Unity.CurrentTestFailed = (((UNITY_UINT)actual - (UNITY_UINT)expected) &gt; delta);</Line>
				<Line Number="1392" Count="-1">        }</Line>
				<Line Number="1393" Count="-1">        else</Line>
				<Line Number="1394" Count="-1">        {</Line>
				<Line Number="1395" Count="0">            Unity.CurrentTestFailed = (((UNITY_UINT)expected - (UNITY_UINT)actual) &gt; delta);</Line>
				<Line Number="1396" Count="-1">        }</Line>
				<Line Number="1397" Count="-1">    }</Line>
				<Line Number="1398" Count="-1">    else</Line>
				<Line Number="1399" Count="-1">    {</Line>
				<Line Number="1400" Count="0">        if ((UNITY_UINT)actual &gt; (UNITY_UINT)expected)</Line>
				<Line Number="1401" Count="-1">        {</Line>
				<Line Number="1402" Count="0">            Unity.CurrentTestFailed = (((UNITY_UINT)actual - (UNITY_UINT)expected) &gt; delta);</Line>
				<Line Number="1403" Count="-1">        }</Line>
				<Line Number="1404" Count="-1">        else</Line>
				<Line Number="1405" Count="-1">        {</Line>
				<Line Number="1406" Count="0">            Unity.CurrentTestFailed = (((UNITY_UINT)expected - (UNITY_UINT)actual) &gt; delta);</Line>
				<Line Number="1407" Count="-1">        }</Line>
				<Line Number="1408" Count="-1">    }</Line>
				<Line Number="1409" Count="-1"></Line>
				<Line Number="1410" Count="0">    if (Unity.CurrentTestFailed)</Line>
				<Line Number="1411" Count="-1">    {</Line>
				<Line Number="1412" Count="0">        UnityTestResultsFailBegin(lineNumber);</Line>
				<Line Number="1413" Count="0">        UnityPrint(UnityStrDelta);</Line>
				<Line Number="1414" Count="0">        UnityPrintNumberByStyle((UNITY_INT)delta, style);</Line>
				<Line Number="1415" Count="0">        UnityPrint(UnityStrExpected);</Line>
				<Line Number="1416" Count="0">        UnityPrintNumberByStyle(expected, style);</Line>
				<Line Number="1417" Count="0">        UnityPrint(UnityStrWas);</Line>
				<Line Number="1418" Count="0">        UnityPrintNumberByStyle(actual, style);</Line>
				<Line Number="1419" Count="0">        UnityAddMsgIfSpecified(msg);</Line>
				<Line Number="1420" Count="0">        UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="1421" Count="-1">    }</Line>
				<Line Number="1422" Count="0">}</Line>
				<Line Number="1423" Count="-1"></Line>
				<Line Number="1424" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="1425" Count="0">void UnityAssertNumbersArrayWithin(const UNITY_UINT delta,</Line>
				<Line Number="1426" Count="-1">                                   UNITY_INTERNAL_PTR expected,</Line>
				<Line Number="1427" Count="-1">                                   UNITY_INTERNAL_PTR actual,</Line>
				<Line Number="1428" Count="-1">                                   const UNITY_UINT32 num_elements,</Line>
				<Line Number="1429" Count="-1">                                   const char* msg,</Line>
				<Line Number="1430" Count="-1">                                   const UNITY_LINE_TYPE lineNumber,</Line>
				<Line Number="1431" Count="-1">                                   const UNITY_DISPLAY_STYLE_T style,</Line>
				<Line Number="1432" Count="-1">                                   const UNITY_FLAGS_T flags)</Line>
				<Line Number="1433" Count="-1">{</Line>
				<Line Number="1434" Count="0">    UNITY_UINT32 elements = num_elements;</Line>
				<Line Number="1435" Count="0">    unsigned int length   = style &amp; 0xF;</Line>
				<Line Number="1436" Count="0">    unsigned int increment = 0;</Line>
				<Line Number="1437" Count="-1"></Line>
				<Line Number="1438" Count="0">    RETURN_IF_FAIL_OR_IGNORE;</Line>
				<Line Number="1439" Count="-1"></Line>
				<Line Number="1440" Count="0">    if (num_elements == 0)</Line>
				<Line Number="1441" Count="-1">    {</Line>
				<Line Number="1442" Count="-1">#ifdef UNITY_COMPARE_PTRS_ON_ZERO_ARRAY</Line>
				<Line Number="1443" Count="-1">        UNITY_TEST_ASSERT_EQUAL_PTR(expected, actual, lineNumber, msg);</Line>
				<Line Number="1444" Count="-1">#else</Line>
				<Line Number="1445" Count="0">        UnityPrintPointlessAndBail();</Line>
				<Line Number="1446" Count="-1">#endif</Line>
				<Line Number="1447" Count="-1">    }</Line>
				<Line Number="1448" Count="-1"></Line>
				<Line Number="1449" Count="0">    if (expected == actual)</Line>
				<Line Number="1450" Count="-1">    {</Line>
				<Line Number="1451" Count="0">        return; /* Both are NULL or same pointer */</Line>
				<Line Number="1452" Count="-1">    }</Line>
				<Line Number="1453" Count="-1"></Line>
				<Line Number="1454" Count="0">    if (UnityIsOneArrayNull(expected, actual, lineNumber, msg))</Line>
				<Line Number="1455" Count="-1">    {</Line>
				<Line Number="1456" Count="0">        UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="1457" Count="-1">    }</Line>
				<Line Number="1458" Count="-1"></Line>
				<Line Number="1459" Count="0">    while ((elements &gt; 0) &amp;&amp; (elements--))</Line>
				<Line Number="1460" Count="-1">    {</Line>
				<Line Number="1461" Count="-1">        UNITY_INT expect_val;</Line>
				<Line Number="1462" Count="-1">        UNITY_INT actual_val;</Line>
				<Line Number="1463" Count="-1"></Line>
				<Line Number="1464" Count="0">        switch (length)</Line>
				<Line Number="1465" Count="-1">        {</Line>
				<Line Number="1466" Count="0">            case 1:</Line>
				<Line Number="1467" Count="-1">                /* fixing problems with signed overflow on unsigned numbers */</Line>
				<Line Number="1468" Count="0">                if ((style &amp; UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)</Line>
				<Line Number="1469" Count="-1">                {</Line>
				<Line Number="1470" Count="0">                    expect_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT8*)expected;</Line>
				<Line Number="1471" Count="0">                    actual_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT8*)actual;</Line>
				<Line Number="1472" Count="0">                    increment  = sizeof(UNITY_INT8);</Line>
				<Line Number="1473" Count="-1">                }</Line>
				<Line Number="1474" Count="-1">                else</Line>
				<Line Number="1475" Count="-1">                {</Line>
				<Line Number="1476" Count="0">                    expect_val = (UNITY_INT)*(UNITY_PTR_ATTRIBUTE const UNITY_UINT8*)expected;</Line>
				<Line Number="1477" Count="0">                    actual_val = (UNITY_INT)*(UNITY_PTR_ATTRIBUTE const UNITY_UINT8*)actual;</Line>
				<Line Number="1478" Count="0">                    increment  = sizeof(UNITY_UINT8);</Line>
				<Line Number="1479" Count="-1">                }</Line>
				<Line Number="1480" Count="0">                break;</Line>
				<Line Number="1481" Count="-1"></Line>
				<Line Number="1482" Count="0">            case 2:</Line>
				<Line Number="1483" Count="-1">                /* fixing problems with signed overflow on unsigned numbers */</Line>
				<Line Number="1484" Count="0">                if ((style &amp; UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)</Line>
				<Line Number="1485" Count="-1">                {</Line>
				<Line Number="1486" Count="0">                    expect_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT16*)expected;</Line>
				<Line Number="1487" Count="0">                    actual_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT16*)actual;</Line>
				<Line Number="1488" Count="0">                    increment  = sizeof(UNITY_INT16);</Line>
				<Line Number="1489" Count="-1">                }</Line>
				<Line Number="1490" Count="-1">                else</Line>
				<Line Number="1491" Count="-1">                {</Line>
				<Line Number="1492" Count="0">                    expect_val = (UNITY_INT)*(UNITY_PTR_ATTRIBUTE const UNITY_UINT16*)expected;</Line>
				<Line Number="1493" Count="0">                    actual_val = (UNITY_INT)*(UNITY_PTR_ATTRIBUTE const UNITY_UINT16*)actual;</Line>
				<Line Number="1494" Count="0">                    increment  = sizeof(UNITY_UINT16);</Line>
				<Line Number="1495" Count="-1">                }</Line>
				<Line Number="1496" Count="0">                break;</Line>
				<Line Number="1497" Count="-1"></Line>
				<Line Number="1498" Count="-1">#ifdef UNITY_SUPPORT_64</Line>
				<Line Number="1499" Count="0">            case 8:</Line>
				<Line Number="1500" Count="-1">                /* fixing problems with signed overflow on unsigned numbers */</Line>
				<Line Number="1501" Count="0">                if ((style &amp; UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)</Line>
				<Line Number="1502" Count="-1">                {</Line>
				<Line Number="1503" Count="0">                    expect_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT64*)expected;</Line>
				<Line Number="1504" Count="0">                    actual_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT64*)actual;</Line>
				<Line Number="1505" Count="0">                    increment  = sizeof(UNITY_INT64);</Line>
				<Line Number="1506" Count="-1">                }</Line>
				<Line Number="1507" Count="-1">                else</Line>
				<Line Number="1508" Count="-1">                {</Line>
				<Line Number="1509" Count="0">                    expect_val = (UNITY_INT)*(UNITY_PTR_ATTRIBUTE const UNITY_UINT64*)expected;</Line>
				<Line Number="1510" Count="0">                    actual_val = (UNITY_INT)*(UNITY_PTR_ATTRIBUTE const UNITY_UINT64*)actual;</Line>
				<Line Number="1511" Count="0">                    increment  = sizeof(UNITY_UINT64);</Line>
				<Line Number="1512" Count="-1">                }</Line>
				<Line Number="1513" Count="0">                break;</Line>
				<Line Number="1514" Count="-1">#endif</Line>
				<Line Number="1515" Count="-1"></Line>
				<Line Number="1516" Count="0">            default: /* default is length 4 bytes */</Line>
				<Line Number="1517" Count="-1">            case 4:</Line>
				<Line Number="1518" Count="-1">                /* fixing problems with signed overflow on unsigned numbers */</Line>
				<Line Number="1519" Count="0">                if ((style &amp; UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)</Line>
				<Line Number="1520" Count="-1">                {</Line>
				<Line Number="1521" Count="0">                    expect_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT32*)expected;</Line>
				<Line Number="1522" Count="0">                    actual_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT32*)actual;</Line>
				<Line Number="1523" Count="0">                    increment  = sizeof(UNITY_INT32);</Line>
				<Line Number="1524" Count="-1">                }</Line>
				<Line Number="1525" Count="-1">                else</Line>
				<Line Number="1526" Count="-1">                {</Line>
				<Line Number="1527" Count="0">                    expect_val = (UNITY_INT)*(UNITY_PTR_ATTRIBUTE const UNITY_UINT32*)expected;</Line>
				<Line Number="1528" Count="0">                    actual_val = (UNITY_INT)*(UNITY_PTR_ATTRIBUTE const UNITY_UINT32*)actual;</Line>
				<Line Number="1529" Count="0">                    increment  = sizeof(UNITY_UINT32);</Line>
				<Line Number="1530" Count="-1">                }</Line>
				<Line Number="1531" Count="0">                length = 4;</Line>
				<Line Number="1532" Count="0">                break;</Line>
				<Line Number="1533" Count="-1">        }</Line>
				<Line Number="1534" Count="-1"></Line>
				<Line Number="1535" Count="0">        if ((style &amp; UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)</Line>
				<Line Number="1536" Count="-1">        {</Line>
				<Line Number="1537" Count="0">            if (actual_val &gt; expect_val)</Line>
				<Line Number="1538" Count="-1">            {</Line>
				<Line Number="1539" Count="0">                Unity.CurrentTestFailed = (((UNITY_UINT)actual_val - (UNITY_UINT)expect_val) &gt; delta);</Line>
				<Line Number="1540" Count="-1">            }</Line>
				<Line Number="1541" Count="-1">            else</Line>
				<Line Number="1542" Count="-1">            {</Line>
				<Line Number="1543" Count="0">                Unity.CurrentTestFailed = (((UNITY_UINT)expect_val - (UNITY_UINT)actual_val) &gt; delta);</Line>
				<Line Number="1544" Count="-1">            }</Line>
				<Line Number="1545" Count="-1">        }</Line>
				<Line Number="1546" Count="-1">        else</Line>
				<Line Number="1547" Count="-1">        {</Line>
				<Line Number="1548" Count="0">            if ((UNITY_UINT)actual_val &gt; (UNITY_UINT)expect_val)</Line>
				<Line Number="1549" Count="-1">            {</Line>
				<Line Number="1550" Count="0">                Unity.CurrentTestFailed = (((UNITY_UINT)actual_val - (UNITY_UINT)expect_val) &gt; delta);</Line>
				<Line Number="1551" Count="-1">            }</Line>
				<Line Number="1552" Count="-1">            else</Line>
				<Line Number="1553" Count="-1">            {</Line>
				<Line Number="1554" Count="0">                Unity.CurrentTestFailed = (((UNITY_UINT)expect_val - (UNITY_UINT)actual_val) &gt; delta);</Line>
				<Line Number="1555" Count="-1">            }</Line>
				<Line Number="1556" Count="-1">        }</Line>
				<Line Number="1557" Count="-1"></Line>
				<Line Number="1558" Count="0">        if (Unity.CurrentTestFailed)</Line>
				<Line Number="1559" Count="-1">        {</Line>
				<Line Number="1560" Count="0">            if ((style &amp; UNITY_DISPLAY_RANGE_UINT) &amp;&amp; (length &lt; (UNITY_INT_WIDTH / 8)))</Line>
				<Line Number="1561" Count="-1">            {   /* For UINT, remove sign extension (padding 1's) from signed type casts above */</Line>
				<Line Number="1562" Count="0">                UNITY_INT mask = 1;</Line>
				<Line Number="1563" Count="0">                mask = (mask &lt;&lt; 8 * length) - 1;</Line>
				<Line Number="1564" Count="0">                expect_val &amp;= mask;</Line>
				<Line Number="1565" Count="0">                actual_val &amp;= mask;</Line>
				<Line Number="1566" Count="-1">            }</Line>
				<Line Number="1567" Count="0">            UnityTestResultsFailBegin(lineNumber);</Line>
				<Line Number="1568" Count="0">            UnityPrint(UnityStrDelta);</Line>
				<Line Number="1569" Count="0">            UnityPrintNumberByStyle((UNITY_INT)delta, style);</Line>
				<Line Number="1570" Count="0">            UnityPrint(UnityStrElement);</Line>
				<Line Number="1571" Count="0">            UnityPrintNumberUnsigned(num_elements - elements - 1);</Line>
				<Line Number="1572" Count="0">            UnityPrint(UnityStrExpected);</Line>
				<Line Number="1573" Count="0">            UnityPrintNumberByStyle(expect_val, style);</Line>
				<Line Number="1574" Count="0">            UnityPrint(UnityStrWas);</Line>
				<Line Number="1575" Count="0">            UnityPrintNumberByStyle(actual_val, style);</Line>
				<Line Number="1576" Count="0">            UnityAddMsgIfSpecified(msg);</Line>
				<Line Number="1577" Count="0">            UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="1578" Count="-1">        }</Line>
				<Line Number="1579" Count="-1">        /* Walk through array by incrementing the pointers */</Line>
				<Line Number="1580" Count="0">        if (flags == UNITY_ARRAY_TO_ARRAY)</Line>
				<Line Number="1581" Count="-1">        {</Line>
				<Line Number="1582" Count="0">            expected = (UNITY_INTERNAL_PTR)((const char*)expected + increment);</Line>
				<Line Number="1583" Count="-1">        }</Line>
				<Line Number="1584" Count="0">        actual = (UNITY_INTERNAL_PTR)((const char*)actual + increment);</Line>
				<Line Number="1585" Count="-1">    }</Line>
				<Line Number="1586" Count="-1">}</Line>
				<Line Number="1587" Count="-1"></Line>
				<Line Number="1588" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="1589" Count="7">void UnityAssertEqualString(const char* expected,</Line>
				<Line Number="1590" Count="-1">                            const char* actual,</Line>
				<Line Number="1591" Count="-1">                            const char* msg,</Line>
				<Line Number="1592" Count="-1">                            const UNITY_LINE_TYPE lineNumber)</Line>
				<Line Number="1593" Count="-1">{</Line>
				<Line Number="1594" Count="-1">    UNITY_UINT32 i;</Line>
				<Line Number="1595" Count="-1"></Line>
				<Line Number="1596" Count="7">    RETURN_IF_FAIL_OR_IGNORE;</Line>
				<Line Number="1597" Count="-1"></Line>
				<Line Number="1598" Count="-1">    /* if both pointers not null compare the strings */</Line>
				<Line Number="1599" Count="7">    if (expected &amp;&amp; actual)</Line>
				<Line Number="1600" Count="-1">    {</Line>
				<Line Number="1601" Count="118">        for (i = 0; expected[i] || actual[i]; i++)</Line>
				<Line Number="1602" Count="-1">        {</Line>
				<Line Number="1603" Count="111">            if (expected[i] != actual[i])</Line>
				<Line Number="1604" Count="-1">            {</Line>
				<Line Number="1605" Count="0">                Unity.CurrentTestFailed = 1;</Line>
				<Line Number="1606" Count="0">                break;</Line>
				<Line Number="1607" Count="-1">            }</Line>
				<Line Number="1608" Count="-1">        }</Line>
				<Line Number="1609" Count="-1">    }</Line>
				<Line Number="1610" Count="-1">    else</Line>
				<Line Number="1611" Count="-1">    { /* fail if either null but not if both */</Line>
				<Line Number="1612" Count="0">        if (expected || actual)</Line>
				<Line Number="1613" Count="-1">        {</Line>
				<Line Number="1614" Count="0">            Unity.CurrentTestFailed = 1;</Line>
				<Line Number="1615" Count="-1">        }</Line>
				<Line Number="1616" Count="-1">    }</Line>
				<Line Number="1617" Count="-1"></Line>
				<Line Number="1618" Count="7">    if (Unity.CurrentTestFailed)</Line>
				<Line Number="1619" Count="-1">    {</Line>
				<Line Number="1620" Count="0">        UnityTestResultsFailBegin(lineNumber);</Line>
				<Line Number="1621" Count="0">        UnityPrintExpectedAndActualStrings(expected, actual);</Line>
				<Line Number="1622" Count="0">        UnityAddMsgIfSpecified(msg);</Line>
				<Line Number="1623" Count="0">        UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="1624" Count="-1">    }</Line>
				<Line Number="1625" Count="7">}</Line>
				<Line Number="1626" Count="-1"></Line>
				<Line Number="1627" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="1628" Count="0">void UnityAssertEqualStringLen(const char* expected,</Line>
				<Line Number="1629" Count="-1">                               const char* actual,</Line>
				<Line Number="1630" Count="-1">                               const UNITY_UINT32 length,</Line>
				<Line Number="1631" Count="-1">                               const char* msg,</Line>
				<Line Number="1632" Count="-1">                               const UNITY_LINE_TYPE lineNumber)</Line>
				<Line Number="1633" Count="-1">{</Line>
				<Line Number="1634" Count="-1">    UNITY_UINT32 i;</Line>
				<Line Number="1635" Count="-1"></Line>
				<Line Number="1636" Count="0">    RETURN_IF_FAIL_OR_IGNORE;</Line>
				<Line Number="1637" Count="-1"></Line>
				<Line Number="1638" Count="-1">    /* if both pointers not null compare the strings */</Line>
				<Line Number="1639" Count="0">    if (expected &amp;&amp; actual)</Line>
				<Line Number="1640" Count="-1">    {</Line>
				<Line Number="1641" Count="0">        for (i = 0; (i &lt; length) &amp;&amp; (expected[i] || actual[i]); i++)</Line>
				<Line Number="1642" Count="-1">        {</Line>
				<Line Number="1643" Count="0">            if (expected[i] != actual[i])</Line>
				<Line Number="1644" Count="-1">            {</Line>
				<Line Number="1645" Count="0">                Unity.CurrentTestFailed = 1;</Line>
				<Line Number="1646" Count="0">                break;</Line>
				<Line Number="1647" Count="-1">            }</Line>
				<Line Number="1648" Count="-1">        }</Line>
				<Line Number="1649" Count="-1">    }</Line>
				<Line Number="1650" Count="-1">    else</Line>
				<Line Number="1651" Count="-1">    { /* fail if either null but not if both */</Line>
				<Line Number="1652" Count="0">        if (expected || actual)</Line>
				<Line Number="1653" Count="-1">        {</Line>
				<Line Number="1654" Count="0">            Unity.CurrentTestFailed = 1;</Line>
				<Line Number="1655" Count="-1">        }</Line>
				<Line Number="1656" Count="-1">    }</Line>
				<Line Number="1657" Count="-1"></Line>
				<Line Number="1658" Count="0">    if (Unity.CurrentTestFailed)</Line>
				<Line Number="1659" Count="-1">    {</Line>
				<Line Number="1660" Count="0">        UnityTestResultsFailBegin(lineNumber);</Line>
				<Line Number="1661" Count="0">        UnityPrintExpectedAndActualStringsLen(expected, actual, length);</Line>
				<Line Number="1662" Count="0">        UnityAddMsgIfSpecified(msg);</Line>
				<Line Number="1663" Count="0">        UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="1664" Count="-1">    }</Line>
				<Line Number="1665" Count="0">}</Line>
				<Line Number="1666" Count="-1"></Line>
				<Line Number="1667" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="1668" Count="0">void UnityAssertEqualStringArray(UNITY_INTERNAL_PTR expected,</Line>
				<Line Number="1669" Count="-1">                                 const char** actual,</Line>
				<Line Number="1670" Count="-1">                                 const UNITY_UINT32 num_elements,</Line>
				<Line Number="1671" Count="-1">                                 const char* msg,</Line>
				<Line Number="1672" Count="-1">                                 const UNITY_LINE_TYPE lineNumber,</Line>
				<Line Number="1673" Count="-1">                                 const UNITY_FLAGS_T flags)</Line>
				<Line Number="1674" Count="-1">{</Line>
				<Line Number="1675" Count="0">    UNITY_UINT32 i = 0;</Line>
				<Line Number="1676" Count="0">    UNITY_UINT32 j = 0;</Line>
				<Line Number="1677" Count="0">    const char* expd = NULL;</Line>
				<Line Number="1678" Count="0">    const char* act = NULL;</Line>
				<Line Number="1679" Count="-1"></Line>
				<Line Number="1680" Count="0">    RETURN_IF_FAIL_OR_IGNORE;</Line>
				<Line Number="1681" Count="-1"></Line>
				<Line Number="1682" Count="-1">    /* if no elements, it's an error */</Line>
				<Line Number="1683" Count="0">    if (num_elements == 0)</Line>
				<Line Number="1684" Count="-1">    {</Line>
				<Line Number="1685" Count="-1">#ifdef UNITY_COMPARE_PTRS_ON_ZERO_ARRAY</Line>
				<Line Number="1686" Count="-1">        UNITY_TEST_ASSERT_EQUAL_PTR(expected, actual, lineNumber, msg);</Line>
				<Line Number="1687" Count="-1">#else</Line>
				<Line Number="1688" Count="0">        UnityPrintPointlessAndBail();</Line>
				<Line Number="1689" Count="-1">#endif</Line>
				<Line Number="1690" Count="-1">    }</Line>
				<Line Number="1691" Count="-1"></Line>
				<Line Number="1692" Count="0">    if ((const void*)expected == (const void*)actual)</Line>
				<Line Number="1693" Count="-1">    {</Line>
				<Line Number="1694" Count="0">        return; /* Both are NULL or same pointer */</Line>
				<Line Number="1695" Count="-1">    }</Line>
				<Line Number="1696" Count="-1"></Line>
				<Line Number="1697" Count="0">    if (UnityIsOneArrayNull((UNITY_INTERNAL_PTR)expected, (UNITY_INTERNAL_PTR)actual, lineNumber, msg))</Line>
				<Line Number="1698" Count="-1">    {</Line>
				<Line Number="1699" Count="0">        UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="1700" Count="-1">    }</Line>
				<Line Number="1701" Count="-1"></Line>
				<Line Number="1702" Count="0">    if (flags != UNITY_ARRAY_TO_ARRAY)</Line>
				<Line Number="1703" Count="-1">    {</Line>
				<Line Number="1704" Count="0">        expd = (const char*)expected;</Line>
				<Line Number="1705" Count="-1">    }</Line>
				<Line Number="1706" Count="-1"></Line>
				<Line Number="1707" Count="-1">    do</Line>
				<Line Number="1708" Count="-1">    {</Line>
				<Line Number="1709" Count="0">        act = actual[j];</Line>
				<Line Number="1710" Count="0">        if (flags == UNITY_ARRAY_TO_ARRAY)</Line>
				<Line Number="1711" Count="-1">        {</Line>
				<Line Number="1712" Count="0">            expd = ((const char* const*)expected)[j];</Line>
				<Line Number="1713" Count="-1">        }</Line>
				<Line Number="1714" Count="-1"></Line>
				<Line Number="1715" Count="-1">        /* if both pointers not null compare the strings */</Line>
				<Line Number="1716" Count="0">        if (expd &amp;&amp; act)</Line>
				<Line Number="1717" Count="-1">        {</Line>
				<Line Number="1718" Count="0">            for (i = 0; expd[i] || act[i]; i++)</Line>
				<Line Number="1719" Count="-1">            {</Line>
				<Line Number="1720" Count="0">                if (expd[i] != act[i])</Line>
				<Line Number="1721" Count="-1">                {</Line>
				<Line Number="1722" Count="0">                    Unity.CurrentTestFailed = 1;</Line>
				<Line Number="1723" Count="0">                    break;</Line>
				<Line Number="1724" Count="-1">                }</Line>
				<Line Number="1725" Count="-1">            }</Line>
				<Line Number="1726" Count="-1">        }</Line>
				<Line Number="1727" Count="-1">        else</Line>
				<Line Number="1728" Count="-1">        { /* handle case of one pointers being null (if both null, test should pass) */</Line>
				<Line Number="1729" Count="0">            if (expd != act)</Line>
				<Line Number="1730" Count="-1">            {</Line>
				<Line Number="1731" Count="0">                Unity.CurrentTestFailed = 1;</Line>
				<Line Number="1732" Count="-1">            }</Line>
				<Line Number="1733" Count="-1">        }</Line>
				<Line Number="1734" Count="-1"></Line>
				<Line Number="1735" Count="0">        if (Unity.CurrentTestFailed)</Line>
				<Line Number="1736" Count="-1">        {</Line>
				<Line Number="1737" Count="0">            UnityTestResultsFailBegin(lineNumber);</Line>
				<Line Number="1738" Count="0">            if (num_elements &gt; 1)</Line>
				<Line Number="1739" Count="-1">            {</Line>
				<Line Number="1740" Count="0">                UnityPrint(UnityStrElement);</Line>
				<Line Number="1741" Count="0">                UnityPrintNumberUnsigned(j);</Line>
				<Line Number="1742" Count="-1">            }</Line>
				<Line Number="1743" Count="0">            UnityPrintExpectedAndActualStrings(expd, act);</Line>
				<Line Number="1744" Count="0">            UnityAddMsgIfSpecified(msg);</Line>
				<Line Number="1745" Count="0">            UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="1746" Count="-1">        }</Line>
				<Line Number="1747" Count="0">    } while (++j &lt; num_elements);</Line>
				<Line Number="1748" Count="-1">}</Line>
				<Line Number="1749" Count="-1"></Line>
				<Line Number="1750" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="1751" Count="0">void UnityAssertEqualMemory(UNITY_INTERNAL_PTR expected,</Line>
				<Line Number="1752" Count="-1">                            UNITY_INTERNAL_PTR actual,</Line>
				<Line Number="1753" Count="-1">                            const UNITY_UINT32 length,</Line>
				<Line Number="1754" Count="-1">                            const UNITY_UINT32 num_elements,</Line>
				<Line Number="1755" Count="-1">                            const char* msg,</Line>
				<Line Number="1756" Count="-1">                            const UNITY_LINE_TYPE lineNumber,</Line>
				<Line Number="1757" Count="-1">                            const UNITY_FLAGS_T flags)</Line>
				<Line Number="1758" Count="-1">{</Line>
				<Line Number="1759" Count="0">    UNITY_PTR_ATTRIBUTE const unsigned char* ptr_exp = (UNITY_PTR_ATTRIBUTE const unsigned char*)expected;</Line>
				<Line Number="1760" Count="0">    UNITY_PTR_ATTRIBUTE const unsigned char* ptr_act = (UNITY_PTR_ATTRIBUTE const unsigned char*)actual;</Line>
				<Line Number="1761" Count="0">    UNITY_UINT32 elements = num_elements;</Line>
				<Line Number="1762" Count="-1">    UNITY_UINT32 bytes;</Line>
				<Line Number="1763" Count="-1"></Line>
				<Line Number="1764" Count="0">    RETURN_IF_FAIL_OR_IGNORE;</Line>
				<Line Number="1765" Count="-1"></Line>
				<Line Number="1766" Count="0">    if (elements == 0)</Line>
				<Line Number="1767" Count="-1">    {</Line>
				<Line Number="1768" Count="-1">#ifdef UNITY_COMPARE_PTRS_ON_ZERO_ARRAY</Line>
				<Line Number="1769" Count="-1">        UNITY_TEST_ASSERT_EQUAL_PTR(expected, actual, lineNumber, msg);</Line>
				<Line Number="1770" Count="-1">#else</Line>
				<Line Number="1771" Count="0">        UnityPrintPointlessAndBail();</Line>
				<Line Number="1772" Count="-1">#endif</Line>
				<Line Number="1773" Count="-1">    }</Line>
				<Line Number="1774" Count="0">    if (length == 0)</Line>
				<Line Number="1775" Count="-1">    {</Line>
				<Line Number="1776" Count="0">        UnityPrintPointlessAndBail();</Line>
				<Line Number="1777" Count="-1">    }</Line>
				<Line Number="1778" Count="-1"></Line>
				<Line Number="1779" Count="0">    if (expected == actual)</Line>
				<Line Number="1780" Count="-1">    {</Line>
				<Line Number="1781" Count="0">        return; /* Both are NULL or same pointer */</Line>
				<Line Number="1782" Count="-1">    }</Line>
				<Line Number="1783" Count="-1"></Line>
				<Line Number="1784" Count="0">    if (UnityIsOneArrayNull(expected, actual, lineNumber, msg))</Line>
				<Line Number="1785" Count="-1">    {</Line>
				<Line Number="1786" Count="0">        UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="1787" Count="-1">    }</Line>
				<Line Number="1788" Count="-1"></Line>
				<Line Number="1789" Count="0">    while (elements--)</Line>
				<Line Number="1790" Count="-1">    {</Line>
				<Line Number="1791" Count="0">        bytes = length;</Line>
				<Line Number="1792" Count="0">        while (bytes--)</Line>
				<Line Number="1793" Count="-1">        {</Line>
				<Line Number="1794" Count="0">            if (*ptr_exp != *ptr_act)</Line>
				<Line Number="1795" Count="-1">            {</Line>
				<Line Number="1796" Count="0">                UnityTestResultsFailBegin(lineNumber);</Line>
				<Line Number="1797" Count="0">                UnityPrint(UnityStrMemory);</Line>
				<Line Number="1798" Count="0">                if (num_elements &gt; 1)</Line>
				<Line Number="1799" Count="-1">                {</Line>
				<Line Number="1800" Count="0">                    UnityPrint(UnityStrElement);</Line>
				<Line Number="1801" Count="0">                    UnityPrintNumberUnsigned(num_elements - elements - 1);</Line>
				<Line Number="1802" Count="-1">                }</Line>
				<Line Number="1803" Count="0">                UnityPrint(UnityStrByte);</Line>
				<Line Number="1804" Count="0">                UnityPrintNumberUnsigned(length - bytes - 1);</Line>
				<Line Number="1805" Count="0">                UnityPrint(UnityStrExpected);</Line>
				<Line Number="1806" Count="0">                UnityPrintNumberByStyle(*ptr_exp, UNITY_DISPLAY_STYLE_HEX8);</Line>
				<Line Number="1807" Count="0">                UnityPrint(UnityStrWas);</Line>
				<Line Number="1808" Count="0">                UnityPrintNumberByStyle(*ptr_act, UNITY_DISPLAY_STYLE_HEX8);</Line>
				<Line Number="1809" Count="0">                UnityAddMsgIfSpecified(msg);</Line>
				<Line Number="1810" Count="0">                UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="1811" Count="-1">            }</Line>
				<Line Number="1812" Count="0">            ptr_exp++;</Line>
				<Line Number="1813" Count="0">            ptr_act++;</Line>
				<Line Number="1814" Count="-1">        }</Line>
				<Line Number="1815" Count="0">        if (flags == UNITY_ARRAY_TO_VAL)</Line>
				<Line Number="1816" Count="-1">        {</Line>
				<Line Number="1817" Count="0">            ptr_exp = (UNITY_PTR_ATTRIBUTE const unsigned char*)expected;</Line>
				<Line Number="1818" Count="-1">        }</Line>
				<Line Number="1819" Count="-1">    }</Line>
				<Line Number="1820" Count="-1">}</Line>
				<Line Number="1821" Count="-1"></Line>
				<Line Number="1822" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="1823" Count="-1"></Line>
				<Line Number="1824" Count="-1">static union</Line>
				<Line Number="1825" Count="-1">{</Line>
				<Line Number="1826" Count="-1">    UNITY_INT8 i8;</Line>
				<Line Number="1827" Count="-1">    UNITY_INT16 i16;</Line>
				<Line Number="1828" Count="-1">    UNITY_INT32 i32;</Line>
				<Line Number="1829" Count="-1">#ifdef UNITY_SUPPORT_64</Line>
				<Line Number="1830" Count="-1">    UNITY_INT64 i64;</Line>
				<Line Number="1831" Count="-1">#endif</Line>
				<Line Number="1832" Count="-1">#ifndef UNITY_EXCLUDE_FLOAT</Line>
				<Line Number="1833" Count="-1">    float f;</Line>
				<Line Number="1834" Count="-1">#endif</Line>
				<Line Number="1835" Count="-1">#ifndef UNITY_EXCLUDE_DOUBLE</Line>
				<Line Number="1836" Count="-1">    double d;</Line>
				<Line Number="1837" Count="-1">#endif</Line>
				<Line Number="1838" Count="-1">} UnityQuickCompare;</Line>
				<Line Number="1839" Count="-1"></Line>
				<Line Number="1840" Count="0">UNITY_INTERNAL_PTR UnityNumToPtr(const UNITY_INT num, const UNITY_UINT8 size)</Line>
				<Line Number="1841" Count="-1">{</Line>
				<Line Number="1842" Count="0">    switch(size)</Line>
				<Line Number="1843" Count="-1">    {</Line>
				<Line Number="1844" Count="0">        case 1:</Line>
				<Line Number="1845" Count="0">            UnityQuickCompare.i8 = (UNITY_INT8)num;</Line>
				<Line Number="1846" Count="0">            return (UNITY_INTERNAL_PTR)(&amp;UnityQuickCompare.i8);</Line>
				<Line Number="1847" Count="-1"></Line>
				<Line Number="1848" Count="0">        case 2:</Line>
				<Line Number="1849" Count="0">            UnityQuickCompare.i16 = (UNITY_INT16)num;</Line>
				<Line Number="1850" Count="0">            return (UNITY_INTERNAL_PTR)(&amp;UnityQuickCompare.i16);</Line>
				<Line Number="1851" Count="-1"></Line>
				<Line Number="1852" Count="-1">#ifdef UNITY_SUPPORT_64</Line>
				<Line Number="1853" Count="0">        case 8:</Line>
				<Line Number="1854" Count="0">            UnityQuickCompare.i64 = (UNITY_INT64)num;</Line>
				<Line Number="1855" Count="0">            return (UNITY_INTERNAL_PTR)(&amp;UnityQuickCompare.i64);</Line>
				<Line Number="1856" Count="-1">#endif</Line>
				<Line Number="1857" Count="-1"></Line>
				<Line Number="1858" Count="0">        default: /* 4 bytes */</Line>
				<Line Number="1859" Count="0">            UnityQuickCompare.i32 = (UNITY_INT32)num;</Line>
				<Line Number="1860" Count="0">            return (UNITY_INTERNAL_PTR)(&amp;UnityQuickCompare.i32);</Line>
				<Line Number="1861" Count="-1">    }</Line>
				<Line Number="1862" Count="-1">}</Line>
				<Line Number="1863" Count="-1"></Line>
				<Line Number="1864" Count="-1">#ifndef UNITY_EXCLUDE_FLOAT</Line>
				<Line Number="1865" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="1866" Count="0">UNITY_INTERNAL_PTR UnityFloatToPtr(const float num)</Line>
				<Line Number="1867" Count="-1">{</Line>
				<Line Number="1868" Count="0">    UnityQuickCompare.f = num;</Line>
				<Line Number="1869" Count="0">    return (UNITY_INTERNAL_PTR)(&amp;UnityQuickCompare.f);</Line>
				<Line Number="1870" Count="-1">}</Line>
				<Line Number="1871" Count="-1">#endif</Line>
				<Line Number="1872" Count="-1"></Line>
				<Line Number="1873" Count="-1">#ifndef UNITY_EXCLUDE_DOUBLE</Line>
				<Line Number="1874" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="1875" Count="-1">UNITY_INTERNAL_PTR UnityDoubleToPtr(const double num)</Line>
				<Line Number="1876" Count="-1">{</Line>
				<Line Number="1877" Count="-1">    UnityQuickCompare.d = num;</Line>
				<Line Number="1878" Count="-1">    return (UNITY_INTERNAL_PTR)(&amp;UnityQuickCompare.d);</Line>
				<Line Number="1879" Count="-1">}</Line>
				<Line Number="1880" Count="-1">#endif</Line>
				<Line Number="1881" Count="-1"></Line>
				<Line Number="1882" Count="-1">#ifdef UNITY_INCLUDE_PRINT_FORMATTED</Line>
				<Line Number="1883" Count="-1"></Line>
				<Line Number="1884" Count="-1">/*-----------------------------------------------</Line>
				<Line Number="1885" Count="-1"> * printf length modifier helpers</Line>
				<Line Number="1886" Count="-1"> *-----------------------------------------------*/</Line>
				<Line Number="1887" Count="-1"></Line>
				<Line Number="1888" Count="-1">enum UnityLengthModifier {</Line>
				<Line Number="1889" Count="-1">    UNITY_LENGTH_MODIFIER_NONE,</Line>
				<Line Number="1890" Count="-1">    UNITY_LENGTH_MODIFIER_LONG_LONG,</Line>
				<Line Number="1891" Count="-1">    UNITY_LENGTH_MODIFIER_LONG,</Line>
				<Line Number="1892" Count="-1">};</Line>
				<Line Number="1893" Count="-1"></Line>
				<Line Number="1894" Count="-1">#define UNITY_EXTRACT_ARG(NUMBER_T, NUMBER, LENGTH_MOD, VA, ARG_T) \</Line>
				<Line Number="1895" Count="-1">do {                                                               \</Line>
				<Line Number="1896" Count="-1">    switch (LENGTH_MOD)                                            \</Line>
				<Line Number="1897" Count="-1">    {                                                              \</Line>
				<Line Number="1898" Count="-1">        case UNITY_LENGTH_MODIFIER_LONG_LONG:                      \</Line>
				<Line Number="1899" Count="-1">        {                                                          \</Line>
				<Line Number="1900" Count="-1">            NUMBER = (NUMBER_T)va_arg(VA, long long ARG_T);        \</Line>
				<Line Number="1901" Count="-1">            break;                                                 \</Line>
				<Line Number="1902" Count="-1">        }                                                          \</Line>
				<Line Number="1903" Count="-1">        case UNITY_LENGTH_MODIFIER_LONG:                           \</Line>
				<Line Number="1904" Count="-1">        {                                                          \</Line>
				<Line Number="1905" Count="-1">            NUMBER = (NUMBER_T)va_arg(VA, long ARG_T);             \</Line>
				<Line Number="1906" Count="-1">            break;                                                 \</Line>
				<Line Number="1907" Count="-1">        }                                                          \</Line>
				<Line Number="1908" Count="-1">        case UNITY_LENGTH_MODIFIER_NONE:                           \</Line>
				<Line Number="1909" Count="-1">        default:                                                   \</Line>
				<Line Number="1910" Count="-1">        {                                                          \</Line>
				<Line Number="1911" Count="-1">            NUMBER = (NUMBER_T)va_arg(VA, ARG_T);                  \</Line>
				<Line Number="1912" Count="-1">            break;                                                 \</Line>
				<Line Number="1913" Count="-1">        }                                                          \</Line>
				<Line Number="1914" Count="-1">    }                                                              \</Line>
				<Line Number="1915" Count="-1">} while (0)</Line>
				<Line Number="1916" Count="-1"></Line>
				<Line Number="1917" Count="-1">static enum UnityLengthModifier UnityLengthModifierGet(const char *pch, int *length)</Line>
				<Line Number="1918" Count="-1">{</Line>
				<Line Number="1919" Count="-1">    enum UnityLengthModifier length_mod;</Line>
				<Line Number="1920" Count="-1">    switch (pch[0])</Line>
				<Line Number="1921" Count="-1">    {</Line>
				<Line Number="1922" Count="-1">        case 'l':</Line>
				<Line Number="1923" Count="-1">            {</Line>
				<Line Number="1924" Count="-1">                if (pch[1] == 'l')</Line>
				<Line Number="1925" Count="-1">                {</Line>
				<Line Number="1926" Count="-1">                    *length = 2;</Line>
				<Line Number="1927" Count="-1">                    length_mod = UNITY_LENGTH_MODIFIER_LONG_LONG;</Line>
				<Line Number="1928" Count="-1">                }</Line>
				<Line Number="1929" Count="-1">                else</Line>
				<Line Number="1930" Count="-1">                {</Line>
				<Line Number="1931" Count="-1">                    *length = 1;</Line>
				<Line Number="1932" Count="-1">                    length_mod = UNITY_LENGTH_MODIFIER_LONG;</Line>
				<Line Number="1933" Count="-1">                }</Line>
				<Line Number="1934" Count="-1">                break;</Line>
				<Line Number="1935" Count="-1">            }</Line>
				<Line Number="1936" Count="-1">        case 'h':</Line>
				<Line Number="1937" Count="-1">            {</Line>
				<Line Number="1938" Count="-1">                // short and char are converted to int</Line>
				<Line Number="1939" Count="-1">                length_mod = UNITY_LENGTH_MODIFIER_NONE;</Line>
				<Line Number="1940" Count="-1">                if (pch[1] == 'h')</Line>
				<Line Number="1941" Count="-1">                {</Line>
				<Line Number="1942" Count="-1">                    *length = 2;</Line>
				<Line Number="1943" Count="-1">                }</Line>
				<Line Number="1944" Count="-1">                else</Line>
				<Line Number="1945" Count="-1">                {</Line>
				<Line Number="1946" Count="-1">                    *length = 1;</Line>
				<Line Number="1947" Count="-1">                }</Line>
				<Line Number="1948" Count="-1">                break;</Line>
				<Line Number="1949" Count="-1">            }</Line>
				<Line Number="1950" Count="-1">        case 'j':</Line>
				<Line Number="1951" Count="-1">        case 'z':</Line>
				<Line Number="1952" Count="-1">        case 't':</Line>
				<Line Number="1953" Count="-1">        case 'L':</Line>
				<Line Number="1954" Count="-1">            {</Line>
				<Line Number="1955" Count="-1">                // Not supported, but should gobble up the length specifier anyway</Line>
				<Line Number="1956" Count="-1">                length_mod = UNITY_LENGTH_MODIFIER_NONE;</Line>
				<Line Number="1957" Count="-1">                *length = 1;</Line>
				<Line Number="1958" Count="-1">                break;</Line>
				<Line Number="1959" Count="-1">            }</Line>
				<Line Number="1960" Count="-1">        default:</Line>
				<Line Number="1961" Count="-1">            {</Line>
				<Line Number="1962" Count="-1">                length_mod = UNITY_LENGTH_MODIFIER_NONE;</Line>
				<Line Number="1963" Count="-1">                *length = 0;</Line>
				<Line Number="1964" Count="-1">            }</Line>
				<Line Number="1965" Count="-1">    }</Line>
				<Line Number="1966" Count="-1">    return length_mod;</Line>
				<Line Number="1967" Count="-1">}</Line>
				<Line Number="1968" Count="-1"></Line>
				<Line Number="1969" Count="-1">/*-----------------------------------------------</Line>
				<Line Number="1970" Count="-1"> * printf helper function</Line>
				<Line Number="1971" Count="-1"> *-----------------------------------------------*/</Line>
				<Line Number="1972" Count="-1">static void UnityPrintFVA(const char* format, va_list va)</Line>
				<Line Number="1973" Count="-1">{</Line>
				<Line Number="1974" Count="-1">    const char* pch = format;</Line>
				<Line Number="1975" Count="-1">    if (pch != NULL)</Line>
				<Line Number="1976" Count="-1">    {</Line>
				<Line Number="1977" Count="-1">        while (*pch)</Line>
				<Line Number="1978" Count="-1">        {</Line>
				<Line Number="1979" Count="-1">            /* format identification character */</Line>
				<Line Number="1980" Count="-1">            if (*pch == '%')</Line>
				<Line Number="1981" Count="-1">            {</Line>
				<Line Number="1982" Count="-1">                pch++;</Line>
				<Line Number="1983" Count="-1"></Line>
				<Line Number="1984" Count="-1">                if (pch != NULL)</Line>
				<Line Number="1985" Count="-1">                {</Line>
				<Line Number="1986" Count="-1">                    int length_mod_size;</Line>
				<Line Number="1987" Count="-1">                    enum UnityLengthModifier length_mod = UnityLengthModifierGet(pch, &amp;length_mod_size);</Line>
				<Line Number="1988" Count="-1">                    pch += length_mod_size;</Line>
				<Line Number="1989" Count="-1"></Line>
				<Line Number="1990" Count="-1">                    switch (*pch)</Line>
				<Line Number="1991" Count="-1">                    {</Line>
				<Line Number="1992" Count="-1">                        case 'd':</Line>
				<Line Number="1993" Count="-1">                        case 'i':</Line>
				<Line Number="1994" Count="-1">                            {</Line>
				<Line Number="1995" Count="-1">                                UNITY_INT number;</Line>
				<Line Number="1996" Count="-1">                                UNITY_EXTRACT_ARG(UNITY_INT, number, length_mod, va, int);</Line>
				<Line Number="1997" Count="-1">                                UnityPrintNumber((UNITY_INT)number);</Line>
				<Line Number="1998" Count="-1">                                break;</Line>
				<Line Number="1999" Count="-1">                            }</Line>
				<Line Number="2000" Count="-1">#ifndef UNITY_EXCLUDE_FLOAT_PRINT</Line>
				<Line Number="2001" Count="-1">                        case 'f':</Line>
				<Line Number="2002" Count="-1">                        case 'g':</Line>
				<Line Number="2003" Count="-1">                            {</Line>
				<Line Number="2004" Count="-1">                                const double number = va_arg(va, double);</Line>
				<Line Number="2005" Count="-1">                                UnityPrintFloat((UNITY_DOUBLE)number);</Line>
				<Line Number="2006" Count="-1">                                break;</Line>
				<Line Number="2007" Count="-1">                            }</Line>
				<Line Number="2008" Count="-1">#endif</Line>
				<Line Number="2009" Count="-1">                        case 'u':</Line>
				<Line Number="2010" Count="-1">                            {</Line>
				<Line Number="2011" Count="-1">                                UNITY_UINT number;</Line>
				<Line Number="2012" Count="-1">                                UNITY_EXTRACT_ARG(UNITY_UINT, number, length_mod, va, unsigned int);</Line>
				<Line Number="2013" Count="-1">                                UnityPrintNumberUnsigned(number);</Line>
				<Line Number="2014" Count="-1">                                break;</Line>
				<Line Number="2015" Count="-1">                            }</Line>
				<Line Number="2016" Count="-1">                        case 'b':</Line>
				<Line Number="2017" Count="-1">                            {</Line>
				<Line Number="2018" Count="-1">                                UNITY_UINT number;</Line>
				<Line Number="2019" Count="-1">                                UNITY_EXTRACT_ARG(UNITY_UINT, number, length_mod, va, unsigned int);</Line>
				<Line Number="2020" Count="-1">                                const UNITY_UINT mask = (UNITY_UINT)0 - (UNITY_UINT)1;</Line>
				<Line Number="2021" Count="-1">                                UNITY_OUTPUT_CHAR('0');</Line>
				<Line Number="2022" Count="-1">                                UNITY_OUTPUT_CHAR('b');</Line>
				<Line Number="2023" Count="-1">                                UnityPrintMask(mask, number);</Line>
				<Line Number="2024" Count="-1">                                break;</Line>
				<Line Number="2025" Count="-1">                            }</Line>
				<Line Number="2026" Count="-1">                        case 'x':</Line>
				<Line Number="2027" Count="-1">                        case 'X':</Line>
				<Line Number="2028" Count="-1">                            {</Line>
				<Line Number="2029" Count="-1">                                UNITY_UINT number;</Line>
				<Line Number="2030" Count="-1">                                UNITY_EXTRACT_ARG(UNITY_UINT, number, length_mod, va, unsigned int);</Line>
				<Line Number="2031" Count="-1">                                UNITY_OUTPUT_CHAR('0');</Line>
				<Line Number="2032" Count="-1">                                UNITY_OUTPUT_CHAR('x');</Line>
				<Line Number="2033" Count="-1">                                UnityPrintNumberHex(number, UNITY_MAX_NIBBLES);</Line>
				<Line Number="2034" Count="-1">                                break;</Line>
				<Line Number="2035" Count="-1">                            }</Line>
				<Line Number="2036" Count="-1">                        case 'p':</Line>
				<Line Number="2037" Count="-1">                            {</Line>
				<Line Number="2038" Count="-1">                                UNITY_UINT number;</Line>
				<Line Number="2039" Count="-1">                                char nibbles_to_print = 8;</Line>
				<Line Number="2040" Count="-1">                                if (UNITY_POINTER_WIDTH == 64)</Line>
				<Line Number="2041" Count="-1">                                {</Line>
				<Line Number="2042" Count="-1">                                    length_mod = UNITY_LENGTH_MODIFIER_LONG_LONG;</Line>
				<Line Number="2043" Count="-1">                                    nibbles_to_print = 16;</Line>
				<Line Number="2044" Count="-1">                                }</Line>
				<Line Number="2045" Count="-1">                                UNITY_EXTRACT_ARG(UNITY_UINT, number, length_mod, va, unsigned int);</Line>
				<Line Number="2046" Count="-1">                                UNITY_OUTPUT_CHAR('0');</Line>
				<Line Number="2047" Count="-1">                                UNITY_OUTPUT_CHAR('x');</Line>
				<Line Number="2048" Count="-1">                                UnityPrintNumberHex((UNITY_UINT)number, nibbles_to_print);</Line>
				<Line Number="2049" Count="-1">                                break;</Line>
				<Line Number="2050" Count="-1">                            }</Line>
				<Line Number="2051" Count="-1">                        case 'c':</Line>
				<Line Number="2052" Count="-1">                            {</Line>
				<Line Number="2053" Count="-1">                                const int ch = va_arg(va, int);</Line>
				<Line Number="2054" Count="-1">                                UnityPrintChar((const char *)&amp;ch);</Line>
				<Line Number="2055" Count="-1">                                break;</Line>
				<Line Number="2056" Count="-1">                            }</Line>
				<Line Number="2057" Count="-1">                        case 's':</Line>
				<Line Number="2058" Count="-1">                            {</Line>
				<Line Number="2059" Count="-1">                                const char * string = va_arg(va, const char *);</Line>
				<Line Number="2060" Count="-1">                                UnityPrint(string);</Line>
				<Line Number="2061" Count="-1">                                break;</Line>
				<Line Number="2062" Count="-1">                            }</Line>
				<Line Number="2063" Count="-1">                        case '%':</Line>
				<Line Number="2064" Count="-1">                            {</Line>
				<Line Number="2065" Count="-1">                                UnityPrintChar(pch);</Line>
				<Line Number="2066" Count="-1">                                break;</Line>
				<Line Number="2067" Count="-1">                            }</Line>
				<Line Number="2068" Count="-1">                        default:</Line>
				<Line Number="2069" Count="-1">                            {</Line>
				<Line Number="2070" Count="-1">                                /* print the unknown format character */</Line>
				<Line Number="2071" Count="-1">                                UNITY_OUTPUT_CHAR('%');</Line>
				<Line Number="2072" Count="-1">                                UnityPrintChar(pch);</Line>
				<Line Number="2073" Count="-1">                                break;</Line>
				<Line Number="2074" Count="-1">                            }</Line>
				<Line Number="2075" Count="-1">                    }</Line>
				<Line Number="2076" Count="-1">                }</Line>
				<Line Number="2077" Count="-1">            }</Line>
				<Line Number="2078" Count="-1">#ifdef UNITY_OUTPUT_COLOR</Line>
				<Line Number="2079" Count="-1">            /* print ANSI escape code */</Line>
				<Line Number="2080" Count="-1">            else if ((*pch == 27) &amp;&amp; (*(pch + 1) == '['))</Line>
				<Line Number="2081" Count="-1">            {</Line>
				<Line Number="2082" Count="-1">                pch += UnityPrintAnsiEscapeString(pch);</Line>
				<Line Number="2083" Count="-1">                continue;</Line>
				<Line Number="2084" Count="-1">            }</Line>
				<Line Number="2085" Count="-1">#endif</Line>
				<Line Number="2086" Count="-1">            else if (*pch == '\n')</Line>
				<Line Number="2087" Count="-1">            {</Line>
				<Line Number="2088" Count="-1">                UNITY_PRINT_EOL();</Line>
				<Line Number="2089" Count="-1">            }</Line>
				<Line Number="2090" Count="-1">            else</Line>
				<Line Number="2091" Count="-1">            {</Line>
				<Line Number="2092" Count="-1">                UnityPrintChar(pch);</Line>
				<Line Number="2093" Count="-1">            }</Line>
				<Line Number="2094" Count="-1"></Line>
				<Line Number="2095" Count="-1">            pch++;</Line>
				<Line Number="2096" Count="-1">        }</Line>
				<Line Number="2097" Count="-1">    }</Line>
				<Line Number="2098" Count="-1">}</Line>
				<Line Number="2099" Count="-1"></Line>
				<Line Number="2100" Count="-1">void UnityPrintF(const UNITY_LINE_TYPE line, const char* format, ...)</Line>
				<Line Number="2101" Count="-1">{</Line>
				<Line Number="2102" Count="-1">    UnityTestResultsBegin(Unity.TestFile, line);</Line>
				<Line Number="2103" Count="-1">    UnityPrint("INFO");</Line>
				<Line Number="2104" Count="-1">    if(format != NULL)</Line>
				<Line Number="2105" Count="-1">    {</Line>
				<Line Number="2106" Count="-1">        UnityPrint(": ");</Line>
				<Line Number="2107" Count="-1">        va_list va;</Line>
				<Line Number="2108" Count="-1">        va_start(va, format);</Line>
				<Line Number="2109" Count="-1">        UnityPrintFVA(format, va);</Line>
				<Line Number="2110" Count="-1">        va_end(va);</Line>
				<Line Number="2111" Count="-1">    }</Line>
				<Line Number="2112" Count="-1">    UNITY_PRINT_EOL();</Line>
				<Line Number="2113" Count="-1">}</Line>
				<Line Number="2114" Count="-1">#endif /* ! UNITY_INCLUDE_PRINT_FORMATTED */</Line>
				<Line Number="2115" Count="-1"></Line>
				<Line Number="2116" Count="-1"></Line>
				<Line Number="2117" Count="-1">/*-----------------------------------------------</Line>
				<Line Number="2118" Count="-1"> * Control Functions</Line>
				<Line Number="2119" Count="-1"> *-----------------------------------------------*/</Line>
				<Line Number="2120" Count="-1"></Line>
				<Line Number="2121" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="2122" Count="0">void UnityFail(const char* msg, const UNITY_LINE_TYPE line)</Line>
				<Line Number="2123" Count="-1">{</Line>
				<Line Number="2124" Count="0">    RETURN_IF_FAIL_OR_IGNORE;</Line>
				<Line Number="2125" Count="-1"></Line>
				<Line Number="2126" Count="0">    UnityTestResultsBegin(Unity.TestFile, line);</Line>
				<Line Number="2127" Count="0">    UnityPrint(UnityStrFail);</Line>
				<Line Number="2128" Count="0">    if (msg != NULL)</Line>
				<Line Number="2129" Count="-1">    {</Line>
				<Line Number="2130" Count="0">        UNITY_OUTPUT_CHAR(':');</Line>
				<Line Number="2131" Count="-1"></Line>
				<Line Number="2132" Count="-1">#ifdef UNITY_PRINT_TEST_CONTEXT</Line>
				<Line Number="2133" Count="-1">        UNITY_PRINT_TEST_CONTEXT();</Line>
				<Line Number="2134" Count="-1">#endif</Line>
				<Line Number="2135" Count="-1">#ifndef UNITY_EXCLUDE_DETAILS</Line>
				<Line Number="2136" Count="0">        if (Unity.CurrentDetail1)</Line>
				<Line Number="2137" Count="-1">        {</Line>
				<Line Number="2138" Count="0">            UnityPrint(UnityStrDetail1Name);</Line>
				<Line Number="2139" Count="0">            UnityPrint(Unity.CurrentDetail1);</Line>
				<Line Number="2140" Count="0">            if (Unity.CurrentDetail2)</Line>
				<Line Number="2141" Count="-1">            {</Line>
				<Line Number="2142" Count="0">                UnityPrint(UnityStrDetail2Name);</Line>
				<Line Number="2143" Count="0">                UnityPrint(Unity.CurrentDetail2);</Line>
				<Line Number="2144" Count="-1">            }</Line>
				<Line Number="2145" Count="0">            UnityPrint(UnityStrSpacer);</Line>
				<Line Number="2146" Count="-1">        }</Line>
				<Line Number="2147" Count="-1">#endif</Line>
				<Line Number="2148" Count="0">        if (msg[0] != ' ')</Line>
				<Line Number="2149" Count="-1">        {</Line>
				<Line Number="2150" Count="0">            UNITY_OUTPUT_CHAR(' ');</Line>
				<Line Number="2151" Count="-1">        }</Line>
				<Line Number="2152" Count="0">        UnityPrint(msg);</Line>
				<Line Number="2153" Count="-1">    }</Line>
				<Line Number="2154" Count="-1"></Line>
				<Line Number="2155" Count="0">    UNITY_FAIL_AND_BAIL;</Line>
				<Line Number="2156" Count="-1">}</Line>
				<Line Number="2157" Count="-1"></Line>
				<Line Number="2158" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="2159" Count="0">void UnityIgnore(const char* msg, const UNITY_LINE_TYPE line)</Line>
				<Line Number="2160" Count="-1">{</Line>
				<Line Number="2161" Count="0">    RETURN_IF_FAIL_OR_IGNORE;</Line>
				<Line Number="2162" Count="-1"></Line>
				<Line Number="2163" Count="0">    UnityTestResultsBegin(Unity.TestFile, line);</Line>
				<Line Number="2164" Count="0">    UnityPrint(UnityStrIgnore);</Line>
				<Line Number="2165" Count="0">    if (msg != NULL)</Line>
				<Line Number="2166" Count="-1">    {</Line>
				<Line Number="2167" Count="0">        UNITY_OUTPUT_CHAR(':');</Line>
				<Line Number="2168" Count="0">        UNITY_OUTPUT_CHAR(' ');</Line>
				<Line Number="2169" Count="0">        UnityPrint(msg);</Line>
				<Line Number="2170" Count="-1">    }</Line>
				<Line Number="2171" Count="0">    UNITY_IGNORE_AND_BAIL;</Line>
				<Line Number="2172" Count="-1">}</Line>
				<Line Number="2173" Count="-1"></Line>
				<Line Number="2174" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="2175" Count="0">void UnityMessage(const char* msg, const UNITY_LINE_TYPE line)</Line>
				<Line Number="2176" Count="-1">{</Line>
				<Line Number="2177" Count="0">    UnityTestResultsBegin(Unity.TestFile, line);</Line>
				<Line Number="2178" Count="0">    UnityPrint("INFO");</Line>
				<Line Number="2179" Count="0">    if (msg != NULL)</Line>
				<Line Number="2180" Count="-1">    {</Line>
				<Line Number="2181" Count="0">      UNITY_OUTPUT_CHAR(':');</Line>
				<Line Number="2182" Count="0">      UNITY_OUTPUT_CHAR(' ');</Line>
				<Line Number="2183" Count="0">      UnityPrint(msg);</Line>
				<Line Number="2184" Count="-1">    }</Line>
				<Line Number="2185" Count="0">    UNITY_PRINT_EOL();</Line>
				<Line Number="2186" Count="0">}</Line>
				<Line Number="2187" Count="-1"></Line>
				<Line Number="2188" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="2189" Count="-1">/* If we have not defined our own test runner, then include our default test runner to make life easier */</Line>
				<Line Number="2190" Count="-1">#ifndef UNITY_SKIP_DEFAULT_RUNNER</Line>
				<Line Number="2191" Count="28">void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)</Line>
				<Line Number="2192" Count="-1">{</Line>
				<Line Number="2193" Count="28">    Unity.CurrentTestName = FuncName;</Line>
				<Line Number="2194" Count="28">    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;</Line>
				<Line Number="2195" Count="28">    Unity.NumberOfTests++;</Line>
				<Line Number="2196" Count="28">    UNITY_CLR_DETAILS();</Line>
				<Line Number="2197" Count="-1">    UNITY_EXEC_TIME_START();</Line>
				<Line Number="2198" Count="28">    if (TEST_PROTECT())</Line>
				<Line Number="2199" Count="-1">    {</Line>
				<Line Number="2200" Count="28">        setUp();</Line>
				<Line Number="2201" Count="28">        Func();</Line>
				<Line Number="2202" Count="-1">    }</Line>
				<Line Number="2203" Count="28">    if (TEST_PROTECT())</Line>
				<Line Number="2204" Count="-1">    {</Line>
				<Line Number="2205" Count="28">        tearDown();</Line>
				<Line Number="2206" Count="-1">    }</Line>
				<Line Number="2207" Count="-1">    UNITY_EXEC_TIME_STOP();</Line>
				<Line Number="2208" Count="28">    UnityConcludeTest();</Line>
				<Line Number="2209" Count="28">}</Line>
				<Line Number="2210" Count="-1">#endif</Line>
				<Line Number="2211" Count="-1"></Line>
				<Line Number="2212" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="2213" Count="0">void UnitySetTestFile(const char* filename)</Line>
				<Line Number="2214" Count="-1">{</Line>
				<Line Number="2215" Count="0">    Unity.TestFile = filename;</Line>
				<Line Number="2216" Count="0">}</Line>
				<Line Number="2217" Count="-1"></Line>
				<Line Number="2218" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="2219" Count="4">void UnityBegin(const char* filename)</Line>
				<Line Number="2220" Count="-1">{</Line>
				<Line Number="2221" Count="4">    Unity.TestFile = filename;</Line>
				<Line Number="2222" Count="4">    Unity.CurrentTestName = NULL;</Line>
				<Line Number="2223" Count="4">    Unity.CurrentTestLineNumber = 0;</Line>
				<Line Number="2224" Count="4">    Unity.NumberOfTests = 0;</Line>
				<Line Number="2225" Count="4">    Unity.TestFailures = 0;</Line>
				<Line Number="2226" Count="4">    Unity.TestIgnores = 0;</Line>
				<Line Number="2227" Count="4">    Unity.CurrentTestFailed = 0;</Line>
				<Line Number="2228" Count="4">    Unity.CurrentTestIgnored = 0;</Line>
				<Line Number="2229" Count="-1"></Line>
				<Line Number="2230" Count="4">    UNITY_CLR_DETAILS();</Line>
				<Line Number="2231" Count="-1">    UNITY_OUTPUT_START();</Line>
				<Line Number="2232" Count="4">}</Line>
				<Line Number="2233" Count="-1"></Line>
				<Line Number="2234" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="2235" Count="4">int UnityEnd(void)</Line>
				<Line Number="2236" Count="-1">{</Line>
				<Line Number="2237" Count="4">    UNITY_PRINT_EOL();</Line>
				<Line Number="2238" Count="4">    UnityPrint(UnityStrBreaker);</Line>
				<Line Number="2239" Count="4">    UNITY_PRINT_EOL();</Line>
				<Line Number="2240" Count="4">    UnityPrintNumber((UNITY_INT)(Unity.NumberOfTests));</Line>
				<Line Number="2241" Count="4">    UnityPrint(UnityStrResultsTests);</Line>
				<Line Number="2242" Count="4">    UnityPrintNumber((UNITY_INT)(Unity.TestFailures));</Line>
				<Line Number="2243" Count="4">    UnityPrint(UnityStrResultsFailures);</Line>
				<Line Number="2244" Count="4">    UnityPrintNumber((UNITY_INT)(Unity.TestIgnores));</Line>
				<Line Number="2245" Count="4">    UnityPrint(UnityStrResultsIgnored);</Line>
				<Line Number="2246" Count="4">    UNITY_PRINT_EOL();</Line>
				<Line Number="2247" Count="4">    if (Unity.TestFailures == 0U)</Line>
				<Line Number="2248" Count="-1">    {</Line>
				<Line Number="2249" Count="4">        UnityPrint(UnityStrOk);</Line>
				<Line Number="2250" Count="-1">    }</Line>
				<Line Number="2251" Count="-1">    else</Line>
				<Line Number="2252" Count="-1">    {</Line>
				<Line Number="2253" Count="0">        UnityPrint(UnityStrFail);</Line>
				<Line Number="2254" Count="-1">#ifdef UNITY_DIFFERENTIATE_FINAL_FAIL</Line>
				<Line Number="2255" Count="-1">        UNITY_OUTPUT_CHAR('E'); UNITY_OUTPUT_CHAR('D');</Line>
				<Line Number="2256" Count="-1">#endif</Line>
				<Line Number="2257" Count="-1">    }</Line>
				<Line Number="2258" Count="4">    UNITY_PRINT_EOL();</Line>
				<Line Number="2259" Count="-1">    UNITY_FLUSH_CALL();</Line>
				<Line Number="2260" Count="-1">    UNITY_OUTPUT_COMPLETE();</Line>
				<Line Number="2261" Count="4">    return (int)(Unity.TestFailures);</Line>
				<Line Number="2262" Count="-1">}</Line>
				<Line Number="2263" Count="-1"></Line>
				<Line Number="2264" Count="-1">/*-----------------------------------------------</Line>
				<Line Number="2265" Count="-1"> * Command Line Argument Support</Line>
				<Line Number="2266" Count="-1"> *-----------------------------------------------*/</Line>
				<Line Number="2267" Count="-1">#ifdef UNITY_USE_COMMAND_LINE_ARGS</Line>
				<Line Number="2268" Count="-1"></Line>
				<Line Number="2269" Count="-1">char* UnityOptionIncludeNamed = NULL;</Line>
				<Line Number="2270" Count="-1">char* UnityOptionExcludeNamed = NULL;</Line>
				<Line Number="2271" Count="-1">int UnityVerbosity            = 1;</Line>
				<Line Number="2272" Count="-1"></Line>
				<Line Number="2273" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="2274" Count="-1">int UnityParseOptions(int argc, char** argv)</Line>
				<Line Number="2275" Count="-1">{</Line>
				<Line Number="2276" Count="-1">    int i;</Line>
				<Line Number="2277" Count="-1">    UnityOptionIncludeNamed = NULL;</Line>
				<Line Number="2278" Count="-1">    UnityOptionExcludeNamed = NULL;</Line>
				<Line Number="2279" Count="-1"></Line>
				<Line Number="2280" Count="-1">    for (i = 1; i &lt; argc; i++)</Line>
				<Line Number="2281" Count="-1">    {</Line>
				<Line Number="2282" Count="-1">        if (argv[i][0] == '-')</Line>
				<Line Number="2283" Count="-1">        {</Line>
				<Line Number="2284" Count="-1">            switch (argv[i][1])</Line>
				<Line Number="2285" Count="-1">            {</Line>
				<Line Number="2286" Count="-1">                case 'l': /* list tests */</Line>
				<Line Number="2287" Count="-1">                    return -1;</Line>
				<Line Number="2288" Count="-1">                case 'n': /* include tests with name including this string */</Line>
				<Line Number="2289" Count="-1">                case 'f': /* an alias for -n */</Line>
				<Line Number="2290" Count="-1">                    if (argv[i][2] == '=')</Line>
				<Line Number="2291" Count="-1">                    {</Line>
				<Line Number="2292" Count="-1">                        UnityOptionIncludeNamed = &amp;argv[i][3];</Line>
				<Line Number="2293" Count="-1">                    }</Line>
				<Line Number="2294" Count="-1">                    else if (++i &lt; argc)</Line>
				<Line Number="2295" Count="-1">                    {</Line>
				<Line Number="2296" Count="-1">                        UnityOptionIncludeNamed = argv[i];</Line>
				<Line Number="2297" Count="-1">                    }</Line>
				<Line Number="2298" Count="-1">                    else</Line>
				<Line Number="2299" Count="-1">                    {</Line>
				<Line Number="2300" Count="-1">                        UnityPrint("ERROR: No Test String to Include Matches For");</Line>
				<Line Number="2301" Count="-1">                        UNITY_PRINT_EOL();</Line>
				<Line Number="2302" Count="-1">                        return 1;</Line>
				<Line Number="2303" Count="-1">                    }</Line>
				<Line Number="2304" Count="-1">                    break;</Line>
				<Line Number="2305" Count="-1">                case 'q': /* quiet */</Line>
				<Line Number="2306" Count="-1">                    UnityVerbosity = 0;</Line>
				<Line Number="2307" Count="-1">                    break;</Line>
				<Line Number="2308" Count="-1">                case 'v': /* verbose */</Line>
				<Line Number="2309" Count="-1">                    UnityVerbosity = 2;</Line>
				<Line Number="2310" Count="-1">                    break;</Line>
				<Line Number="2311" Count="-1">                case 'x': /* exclude tests with name including this string */</Line>
				<Line Number="2312" Count="-1">                    if (argv[i][2] == '=')</Line>
				<Line Number="2313" Count="-1">                    {</Line>
				<Line Number="2314" Count="-1">                        UnityOptionExcludeNamed = &amp;argv[i][3];</Line>
				<Line Number="2315" Count="-1">                    }</Line>
				<Line Number="2316" Count="-1">                    else if (++i &lt; argc)</Line>
				<Line Number="2317" Count="-1">                    {</Line>
				<Line Number="2318" Count="-1">                        UnityOptionExcludeNamed = argv[i];</Line>
				<Line Number="2319" Count="-1">                    }</Line>
				<Line Number="2320" Count="-1">                    else</Line>
				<Line Number="2321" Count="-1">                    {</Line>
				<Line Number="2322" Count="-1">                        UnityPrint("ERROR: No Test String to Exclude Matches For");</Line>
				<Line Number="2323" Count="-1">                        UNITY_PRINT_EOL();</Line>
				<Line Number="2324" Count="-1">                        return 1;</Line>
				<Line Number="2325" Count="-1">                    }</Line>
				<Line Number="2326" Count="-1">                    break;</Line>
				<Line Number="2327" Count="-1">                default:</Line>
				<Line Number="2328" Count="-1">                    UnityPrint("ERROR: Unknown Option ");</Line>
				<Line Number="2329" Count="-1">                    UNITY_OUTPUT_CHAR(argv[i][1]);</Line>
				<Line Number="2330" Count="-1">                    UNITY_PRINT_EOL();</Line>
				<Line Number="2331" Count="-1">                    /* Now display help */</Line>
				<Line Number="2332" Count="-1">                    /* FALLTHRU */</Line>
				<Line Number="2333" Count="-1">                case 'h':</Line>
				<Line Number="2334" Count="-1">                    UnityPrint("Options: "); UNITY_PRINT_EOL();</Line>
				<Line Number="2335" Count="-1">                    UnityPrint("-l        List all tests and exit"); UNITY_PRINT_EOL();</Line>
				<Line Number="2336" Count="-1">                    UnityPrint("-f NAME   Filter to run only tests whose name includes NAME"); UNITY_PRINT_EOL();</Line>
				<Line Number="2337" Count="-1">                    UnityPrint("-n NAME   (deprecated) alias of -f"); UNITY_PRINT_EOL();</Line>
				<Line Number="2338" Count="-1">                    UnityPrint("-h        show this Help menu"); UNITY_PRINT_EOL();</Line>
				<Line Number="2339" Count="-1">                    UnityPrint("-q        Quiet/decrease verbosity"); UNITY_PRINT_EOL();</Line>
				<Line Number="2340" Count="-1">                    UnityPrint("-v        increase Verbosity"); UNITY_PRINT_EOL();</Line>
				<Line Number="2341" Count="-1">                    UnityPrint("-x NAME   eXclude tests whose name includes NAME"); UNITY_PRINT_EOL();</Line>
				<Line Number="2342" Count="-1">                    UNITY_OUTPUT_FLUSH();</Line>
				<Line Number="2343" Count="-1">                    return 1;</Line>
				<Line Number="2344" Count="-1">            }</Line>
				<Line Number="2345" Count="-1">        }</Line>
				<Line Number="2346" Count="-1">    }</Line>
				<Line Number="2347" Count="-1"></Line>
				<Line Number="2348" Count="-1">    return 0;</Line>
				<Line Number="2349" Count="-1">}</Line>
				<Line Number="2350" Count="-1"></Line>
				<Line Number="2351" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="2352" Count="-1">int IsStringInBiggerString(const char* longstring, const char* shortstring)</Line>
				<Line Number="2353" Count="-1">{</Line>
				<Line Number="2354" Count="-1">    const char* lptr = longstring;</Line>
				<Line Number="2355" Count="-1">    const char* sptr = shortstring;</Line>
				<Line Number="2356" Count="-1">    const char* lnext = lptr;</Line>
				<Line Number="2357" Count="-1"></Line>
				<Line Number="2358" Count="-1">    if (*sptr == '*')</Line>
				<Line Number="2359" Count="-1">    {</Line>
				<Line Number="2360" Count="-1">        return 1;</Line>
				<Line Number="2361" Count="-1">    }</Line>
				<Line Number="2362" Count="-1"></Line>
				<Line Number="2363" Count="-1">    while (*lptr)</Line>
				<Line Number="2364" Count="-1">    {</Line>
				<Line Number="2365" Count="-1">        lnext = lptr + 1;</Line>
				<Line Number="2366" Count="-1"></Line>
				<Line Number="2367" Count="-1">        /* If they current bytes match, go on to the next bytes */</Line>
				<Line Number="2368" Count="-1">        while (*lptr &amp;&amp; *sptr &amp;&amp; (*lptr == *sptr))</Line>
				<Line Number="2369" Count="-1">        {</Line>
				<Line Number="2370" Count="-1">            lptr++;</Line>
				<Line Number="2371" Count="-1">            sptr++;</Line>
				<Line Number="2372" Count="-1"></Line>
				<Line Number="2373" Count="-1">            /* We're done if we match the entire string or up to a wildcard */</Line>
				<Line Number="2374" Count="-1">            if (*sptr == '*')</Line>
				<Line Number="2375" Count="-1">                return 1;</Line>
				<Line Number="2376" Count="-1">            if (*sptr == ',')</Line>
				<Line Number="2377" Count="-1">                return 1;</Line>
				<Line Number="2378" Count="-1">            if (*sptr == '"')</Line>
				<Line Number="2379" Count="-1">                return 1;</Line>
				<Line Number="2380" Count="-1">            if (*sptr == '\'')</Line>
				<Line Number="2381" Count="-1">                return 1;</Line>
				<Line Number="2382" Count="-1">            if (*sptr == ':')</Line>
				<Line Number="2383" Count="-1">                return 2;</Line>
				<Line Number="2384" Count="-1">            if (*sptr == 0)</Line>
				<Line Number="2385" Count="-1">                return 1;</Line>
				<Line Number="2386" Count="-1">        }</Line>
				<Line Number="2387" Count="-1"></Line>
				<Line Number="2388" Count="-1">        /* Otherwise we start in the long pointer 1 character further and try again */</Line>
				<Line Number="2389" Count="-1">        lptr = lnext;</Line>
				<Line Number="2390" Count="-1">        sptr = shortstring;</Line>
				<Line Number="2391" Count="-1">    }</Line>
				<Line Number="2392" Count="-1"></Line>
				<Line Number="2393" Count="-1">    return 0;</Line>
				<Line Number="2394" Count="-1">}</Line>
				<Line Number="2395" Count="-1"></Line>
				<Line Number="2396" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="2397" Count="-1">int UnityStringArgumentMatches(const char* str)</Line>
				<Line Number="2398" Count="-1">{</Line>
				<Line Number="2399" Count="-1">    int retval;</Line>
				<Line Number="2400" Count="-1">    const char* ptr1;</Line>
				<Line Number="2401" Count="-1">    const char* ptr2;</Line>
				<Line Number="2402" Count="-1">    const char* ptrf;</Line>
				<Line Number="2403" Count="-1"></Line>
				<Line Number="2404" Count="-1">    /* Go through the options and get the substrings for matching one at a time */</Line>
				<Line Number="2405" Count="-1">    ptr1 = str;</Line>
				<Line Number="2406" Count="-1">    while (ptr1[0] != 0)</Line>
				<Line Number="2407" Count="-1">    {</Line>
				<Line Number="2408" Count="-1">        if ((ptr1[0] == '"') || (ptr1[0] == '\''))</Line>
				<Line Number="2409" Count="-1">        {</Line>
				<Line Number="2410" Count="-1">            ptr1++;</Line>
				<Line Number="2411" Count="-1">        }</Line>
				<Line Number="2412" Count="-1"></Line>
				<Line Number="2413" Count="-1">        /* look for the start of the next partial */</Line>
				<Line Number="2414" Count="-1">        ptr2 = ptr1;</Line>
				<Line Number="2415" Count="-1">        ptrf = 0;</Line>
				<Line Number="2416" Count="-1">        do</Line>
				<Line Number="2417" Count="-1">        {</Line>
				<Line Number="2418" Count="-1">            ptr2++;</Line>
				<Line Number="2419" Count="-1">            if ((ptr2[0] == ':') &amp;&amp; (ptr2[1] != 0) &amp;&amp; (ptr2[0] != '\'') &amp;&amp; (ptr2[0] != '"') &amp;&amp; (ptr2[0] != ','))</Line>
				<Line Number="2420" Count="-1">            {</Line>
				<Line Number="2421" Count="-1">                ptrf = &amp;ptr2[1];</Line>
				<Line Number="2422" Count="-1">            }</Line>
				<Line Number="2423" Count="-1">        } while ((ptr2[0] != 0) &amp;&amp; (ptr2[0] != '\'') &amp;&amp; (ptr2[0] != '"') &amp;&amp; (ptr2[0] != ','));</Line>
				<Line Number="2424" Count="-1"></Line>
				<Line Number="2425" Count="-1">        while ((ptr2[0] != 0) &amp;&amp; ((ptr2[0] == ':') || (ptr2[0] == '\'') || (ptr2[0] == '"') || (ptr2[0] == ',')))</Line>
				<Line Number="2426" Count="-1">        {</Line>
				<Line Number="2427" Count="-1">            ptr2++;</Line>
				<Line Number="2428" Count="-1">        }</Line>
				<Line Number="2429" Count="-1"></Line>
				<Line Number="2430" Count="-1">        /* done if complete filename match */</Line>
				<Line Number="2431" Count="-1">        retval = IsStringInBiggerString(Unity.TestFile, ptr1);</Line>
				<Line Number="2432" Count="-1">        if (retval == 1)</Line>
				<Line Number="2433" Count="-1">        {</Line>
				<Line Number="2434" Count="-1">            return retval;</Line>
				<Line Number="2435" Count="-1">        }</Line>
				<Line Number="2436" Count="-1"></Line>
				<Line Number="2437" Count="-1">        /* done if testname match after filename partial match */</Line>
				<Line Number="2438" Count="-1">        if ((retval == 2) &amp;&amp; (ptrf != 0))</Line>
				<Line Number="2439" Count="-1">        {</Line>
				<Line Number="2440" Count="-1">            if (IsStringInBiggerString(Unity.CurrentTestName, ptrf))</Line>
				<Line Number="2441" Count="-1">            {</Line>
				<Line Number="2442" Count="-1">                return 1;</Line>
				<Line Number="2443" Count="-1">            }</Line>
				<Line Number="2444" Count="-1">        }</Line>
				<Line Number="2445" Count="-1"></Line>
				<Line Number="2446" Count="-1">        /* done if complete testname match */</Line>
				<Line Number="2447" Count="-1">        if (IsStringInBiggerString(Unity.CurrentTestName, ptr1) == 1)</Line>
				<Line Number="2448" Count="-1">        {</Line>
				<Line Number="2449" Count="-1">            return 1;</Line>
				<Line Number="2450" Count="-1">        }</Line>
				<Line Number="2451" Count="-1"></Line>
				<Line Number="2452" Count="-1">        ptr1 = ptr2;</Line>
				<Line Number="2453" Count="-1">    }</Line>
				<Line Number="2454" Count="-1"></Line>
				<Line Number="2455" Count="-1">    /* we couldn't find a match for any substrings */</Line>
				<Line Number="2456" Count="-1">    return 0;</Line>
				<Line Number="2457" Count="-1">}</Line>
				<Line Number="2458" Count="-1"></Line>
				<Line Number="2459" Count="-1">/*-----------------------------------------------*/</Line>
				<Line Number="2460" Count="-1">int UnityTestMatches(void)</Line>
				<Line Number="2461" Count="-1">{</Line>
				<Line Number="2462" Count="-1">    /* Check if this test name matches the included test pattern */</Line>
				<Line Number="2463" Count="-1">    int retval;</Line>
				<Line Number="2464" Count="-1">    if (UnityOptionIncludeNamed)</Line>
				<Line Number="2465" Count="-1">    {</Line>
				<Line Number="2466" Count="-1">        retval = UnityStringArgumentMatches(UnityOptionIncludeNamed);</Line>
				<Line Number="2467" Count="-1">    }</Line>
				<Line Number="2468" Count="-1">    else</Line>
				<Line Number="2469" Count="-1">    {</Line>
				<Line Number="2470" Count="-1">        retval = 1;</Line>
				<Line Number="2471" Count="-1">    }</Line>
				<Line Number="2472" Count="-1"></Line>
				<Line Number="2473" Count="-1">    /* Check if this test name matches the excluded test pattern */</Line>
				<Line Number="2474" Count="-1">    if (UnityOptionExcludeNamed)</Line>
				<Line Number="2475" Count="-1">    {</Line>
				<Line Number="2476" Count="-1">        if (UnityStringArgumentMatches(UnityOptionExcludeNamed))</Line>
				<Line Number="2477" Count="-1">        {</Line>
				<Line Number="2478" Count="-1">            retval = 0;</Line>
				<Line Number="2479" Count="-1">        }</Line>
				<Line Number="2480" Count="-1">    }</Line>
				<Line Number="2481" Count="-1"></Line>
				<Line Number="2482" Count="-1">    return retval;</Line>
				<Line Number="2483" Count="-1">}</Line>
				<Line Number="2484" Count="-1"></Line>
				<Line Number="2485" Count="-1">#endif /* UNITY_USE_COMMAND_LINE_ARGS */</Line>
				<Line Number="2486" Count="-1">/*-----------------------------------------------*/</Line>
			</Report>
		</File>
		<File Name="ascii_helper.c" FullPath="./src/ascii_helper.c">
			<Report>
				<Line Number="0" Count="-1">#include &lt;ascii_helper.h&gt;</Line>
				<Line Number="1" Count="-1">#include &lt;stdlib.h&gt;</Line>
				<Line Number="2" Count="-1">#include &lt;string.h&gt;</Line>
				<Line Number="3" Count="-1"></Line>
				<Line Number="4" Count="-1">uint16_t computeArrayWithStringLengths(uint8_t amountStrings, char * strings[], uint16_t * stringLengthArray);</Line>
				<Line Number="5" Count="-1"></Line>
				<Line Number="6" Count="20">void integerToAscii(char * result, uint32_t num, uint8_t size, uint8_t position) {</Line>
				<Line Number="7" Count="20">    uint32_t divisor = 1;</Line>
				<Line Number="8" Count="52">    for (uint8_t i = 0; i &lt; size - 1; ++i) {</Line>
				<Line Number="9" Count="32">        divisor *= 10;</Line>
				<Line Number="10" Count="-1">    }</Line>
				<Line Number="11" Count="-1"></Line>
				<Line Number="12" Count="72">    for (uint8_t i = position; i &lt; position + size; ++i) {</Line>
				<Line Number="13" Count="52">        uint8_t digit = num / divisor;</Line>
				<Line Number="14" Count="52">        result[i] = digit + '0';</Line>
				<Line Number="15" Count="52">        num %= divisor;</Line>
				<Line Number="16" Count="52">        divisor /= 10;</Line>
				<Line Number="17" Count="-1">    }</Line>
				<Line Number="18" Count="20">}</Line>
				<Line Number="19" Count="-1"></Line>
				<Line Number="20" Count="2">char * concatStrings(uint8_t amountOfStrings, char * strings[]) {</Line>
				<Line Number="21" Count="-1"></Line>
				<Line Number="22" Count="2">    uint16_t * stringLengthArray = (uint16_t *) malloc(amountOfStrings * sizeof(uint16_t));</Line>
				<Line Number="23" Count="2">    if (stringLengthArray == NULL) {</Line>
				<Line Number="24" Count="0">        return NULL;</Line>
				<Line Number="25" Count="-1">    }</Line>
				<Line Number="26" Count="-1"></Line>
				<Line Number="27" Count="-1">    //16kB max length of a string is enough for every avr mcu</Line>
				<Line Number="28" Count="2">    uint16_t total_length = computeArrayWithStringLengths(amountOfStrings, strings, stringLengthArray);</Line>
				<Line Number="29" Count="-1"></Line>
				<Line Number="30" Count="2">    char * stringToReturn = malloc((total_length + 1) * sizeof(char));</Line>
				<Line Number="31" Count="2">    if (stringToReturn == NULL) {</Line>
				<Line Number="32" Count="0">        free(stringLengthArray);</Line>
				<Line Number="33" Count="0">        return NULL;</Line>
				<Line Number="34" Count="-1">    }</Line>
				<Line Number="35" Count="2">    char * destination = stringToReturn;</Line>
				<Line Number="36" Count="-1"></Line>
				<Line Number="37" Count="6">    for (uint8_t i = 0; i &lt; amountOfStrings; i++) {</Line>
				<Line Number="38" Count="4">        memcpy(destination, strings[i], stringLengthArray[i]);</Line>
				<Line Number="39" Count="4">        destination += stringLengthArray[i];</Line>
				<Line Number="40" Count="-1">    }</Line>
				<Line Number="41" Count="2">    *destination = '\0';</Line>
				<Line Number="42" Count="2">    free(stringLengthArray);</Line>
				<Line Number="43" Count="2">     return stringToReturn;</Line>
				<Line Number="44" Count="-1">}</Line>
				<Line Number="45" Count="-1"></Line>
				<Line Number="46" Count="-1"></Line>
				<Line Number="47" Count="2">uint16_t computeArrayWithStringLengths(uint8_t amountStrings, char * strings[], uint16_t * stringLengthArray) {</Line>
				<Line Number="48" Count="2">    uint16_t total_length = 0;</Line>
				<Line Number="49" Count="-1"></Line>
				<Line Number="50" Count="6">    for (uint8_t i = 0; i &lt; amountStrings; i++) {</Line>
				<Line Number="51" Count="4">        uint16_t len = 0;</Line>
				<Line Number="52" Count="4">        char * temp = strings[i];  // Temporary pointer to iterate over the string</Line>
				<Line Number="53" Count="30">        while (*temp != '\0') {</Line>
				<Line Number="54" Count="26">            len++;</Line>
				<Line Number="55" Count="26">            temp++;</Line>
				<Line Number="56" Count="-1">        }</Line>
				<Line Number="57" Count="4">        total_length += len;</Line>
				<Line Number="58" Count="4">        stringLengthArray[i] = len;</Line>
				<Line Number="59" Count="-1">    }</Line>
				<Line Number="60" Count="2">    return total_length;</Line>
				<Line Number="61" Count="-1">}</Line>
				<Line Number="62" Count="-1"></Line>
				<Line Number="63" Count="7">AsciiHelper * dOS_initAsciiHelper(void) {</Line>
				<Line Number="64" Count="7">    AsciiHelper * helper = malloc(sizeof(AsciiHelper));</Line>
				<Line Number="65" Count="7">    if (helper == NULL) {</Line>
				<Line Number="66" Count="0">        return NULL;</Line>
				<Line Number="67" Count="-1">    } else {</Line>
				<Line Number="68" Count="7">        helper-&gt;integerToAscii = integerToAscii;</Line>
				<Line Number="69" Count="7">        helper-&gt;concatStrings = concatStrings;</Line>
				<Line Number="70" Count="7">        return helper;</Line>
				<Line Number="71" Count="-1">    }</Line>
				<Line Number="72" Count="-1">}</Line>
			</Report>
		</File>
		<File Name="string_repository.c" FullPath="./src/string_repository.c">
			<Report>
				<Line Number="0" Count="-1">#include &lt;string_repository.h&gt;</Line>
				<Line Number="1" Count="-1">#include &lt;stdlib.h&gt;</Line>
				<Line Number="2" Count="-1"></Line>
				<Line Number="3" Count="-1">// Hashing function (limited to 255 managed strings)</Line>
				<Line Number="4" Count="-1">uint8_t getHash(LazyLoadingString* stringToAdd);</Line>
				<Line Number="5" Count="-1">// Find a string in the managed database, has to be int16_t to return -1 as fail, and hold all positive values for uint8</Line>
				<Line Number="6" Count="-1">int16_t findStringInDb(LazyLoadingString* stringToFetch);</Line>
				<Line Number="7" Count="-1">// Global pointer to the StringRepository instance</Line>
				<Line Number="8" Count="-1">StringRepository * stringRepository;</Line>
				<Line Number="9" Count="-1"></Line>
				<Line Number="10" Count="-1"></Line>
				<Line Number="11" Count="-1">// Add a string to the database of managed strings, enabling lazy loading and availability for freeMemoryRandom function.</Line>
				<Line Number="12" Count="-1">// Alternatively, users can manage this manually using the data structures.</Line>
				<Line Number="13" Count="-1">// uses placement with hashing, best case O(1), could be changed to placement without hashing for small amount of strings</Line>
				<Line Number="14" Count="4">LazyLoadingString** addString(LazyLoadingString* stringToAdd) {</Line>
				<Line Number="15" Count="-1">    // Calculate hash to determine placement in the array</Line>
				<Line Number="16" Count="4">	uint8_t placement = getHash(stringToAdd);</Line>
				<Line Number="17" Count="4">	for (int i = 0; i &lt; MAX_SIZE_STRING_DB; i++) {</Line>
				<Line Number="18" Count="4">		placement = (placement + i) % MAX_SIZE_STRING_DB;</Line>
				<Line Number="19" Count="-1">        // Find an empty slot and add the string, start a next fit placement strategy if the hashed placed is already in use</Line>
				<Line Number="20" Count="4">		if (stringRepository-&gt;arrayOfManagedLazyStringPointers[placement] == NULL) {</Line>
				<Line Number="21" Count="4">            stringRepository-&gt;arrayOfManagedLazyStringPointers[placement] = stringToAdd;</Line>
				<Line Number="22" Count="4">			return &amp;stringRepository-&gt;arrayOfManagedLazyStringPointers[placement];</Line>
				<Line Number="23" Count="-1">		}</Line>
				<Line Number="24" Count="-1">	}</Line>
				<Line Number="25" Count="0">	return NULL;</Line>
				<Line Number="26" Count="-1">}</Line>
				<Line Number="27" Count="-1"></Line>
				<Line Number="28" Count="-1">// Retrieve a string from RAM, loading it from flash if not present</Line>
				<Line Number="29" Count="1">char* getStringFromRamElseLoadFromFlash(LazyLoadingString * stringToFetch, StringStorage * stringStorage) {</Line>
				<Line Number="30" Count="1">    if (stringStorage == NULL || stringToFetch == NULL ) {</Line>
				<Line Number="31" Count="0">        return NULL;</Line>
				<Line Number="32" Count="-1">    }</Line>
				<Line Number="33" Count="-1"></Line>
				<Line Number="34" Count="1">    if (stringToFetch-&gt;pointerToString == NULL) {</Line>
				<Line Number="35" Count="1">		stringToFetch-&gt;pointerToString = stringStorage-&gt;createStringFromFlash(stringToFetch-&gt;flashString);</Line>
				<Line Number="36" Count="-1">	}</Line>
				<Line Number="37" Count="1">	return stringToFetch-&gt;pointerToString;</Line>
				<Line Number="38" Count="-1">}</Line>
				<Line Number="39" Count="-1"></Line>
				<Line Number="40" Count="-1">// Free memory of a single string while retaining management for lazy loading</Line>
				<Line Number="41" Count="6">LazyLoadingString* freeString(LazyLoadingString* stringToKill) {</Line>
				<Line Number="42" Count="6">	free(stringToKill-&gt;pointerToString);</Line>
				<Line Number="43" Count="6">	stringToKill-&gt;pointerToString = NULL;</Line>
				<Line Number="44" Count="6">	return stringToKill;</Line>
				<Line Number="45" Count="-1">}</Line>
				<Line Number="46" Count="-1"></Line>
				<Line Number="47" Count="-1">// Remove string from the array of managed strings, ensuring memory is freed</Line>
				<Line Number="48" Count="1">LazyLoadingString* removeStringFromManagement(LazyLoadingString* stringToKill) {</Line>
				<Line Number="49" Count="-1"></Line>
				<Line Number="50" Count="1">	int16_t index = findStringInDb(stringToKill);</Line>
				<Line Number="51" Count="1">	if (index &gt;= 0) {</Line>
				<Line Number="52" Count="1">		freeString(stringToKill);</Line>
				<Line Number="53" Count="1">        stringRepository-&gt;arrayOfManagedLazyStringPointers[index] = NULL;</Line>
				<Line Number="54" Count="1">		return stringToKill;</Line>
				<Line Number="55" Count="-1">	}</Line>
				<Line Number="56" Count="0">	return NULL;</Line>
				<Line Number="57" Count="-1">}</Line>
				<Line Number="58" Count="-1"></Line>
				<Line Number="59" Count="-1">// Free memory based on a percentage, ensuring at least one element is freed</Line>
				<Line Number="60" Count="1">void freeMemoryRandom(uint8_t percentage) {</Line>
				<Line Number="61" Count="1">	uint8_t step = 100 / percentage;</Line>
				<Line Number="62" Count="-1">	//we delete at least one element</Line>
				<Line Number="63" Count="1">	if (step &gt; (MAX_SIZE_STRING_DB - 1)) {</Line>
				<Line Number="64" Count="0">		step = MAX_SIZE_STRING_DB - 1;</Line>
				<Line Number="65" Count="-1">	}</Line>
				<Line Number="66" Count="5">	for (uint8_t i = 0; i &lt; MAX_SIZE_STRING_DB; i += step) {</Line>
				<Line Number="67" Count="4">		freeString(stringRepository-&gt;arrayOfManagedLazyStringPointers[i]);</Line>
				<Line Number="68" Count="-1">	}</Line>
				<Line Number="69" Count="1">}</Line>
				<Line Number="70" Count="-1">// Initialize the StringRepository instance</Line>
				<Line Number="71" Count="5">StringRepository * dOS_initStringRepository(void) {</Line>
				<Line Number="72" Count="5">    StringRepository * repository = malloc(sizeof(StringRepository));</Line>
				<Line Number="73" Count="5">    if (repository == NULL) {</Line>
				<Line Number="74" Count="0">        return NULL;</Line>
				<Line Number="75" Count="-1">    } else {</Line>
				<Line Number="76" Count="-1">        // Assign function pointers</Line>
				<Line Number="77" Count="5">        repository-&gt;getStringFromRamElseLoadFromFlash = getStringFromRamElseLoadFromFlash;</Line>
				<Line Number="78" Count="5">        repository-&gt;addString = addString;</Line>
				<Line Number="79" Count="5">        repository-&gt;freeString = freeString;</Line>
				<Line Number="80" Count="5">        repository-&gt;removeStringFromManagement = removeStringFromManagement;</Line>
				<Line Number="81" Count="5">        repository-&gt;freeMemoryRandom = freeMemoryRandom;</Line>
				<Line Number="82" Count="45">        for (int i = 0; i &lt; MAX_SIZE_STRING_DB; i++) {</Line>
				<Line Number="83" Count="40">            repository-&gt;arrayOfManagedLazyStringPointers[i] = NULL;</Line>
				<Line Number="84" Count="-1">        }</Line>
				<Line Number="85" Count="5">        stringRepository = repository;</Line>
				<Line Number="86" Count="5">        return repository;</Line>
				<Line Number="87" Count="-1">    }</Line>
				<Line Number="88" Count="-1">}</Line>
				<Line Number="89" Count="-1"></Line>
				<Line Number="90" Count="-1"></Line>
				<Line Number="91" Count="5">uint8_t getHash(LazyLoadingString * stringToAdd) {</Line>
				<Line Number="92" Count="-1">    // hashing with the pointer address</Line>
				<Line Number="93" Count="5">	return (((uint16_t) stringToAdd) % MAX_SIZE_STRING_DB);</Line>
				<Line Number="94" Count="-1">}</Line>
				<Line Number="95" Count="-1"></Line>
				<Line Number="96" Count="1">int16_t findStringInDb(LazyLoadingString* stringToFetch) {</Line>
				<Line Number="97" Count="1">	uint8_t placement = getHash(stringToFetch);</Line>
				<Line Number="98" Count="1">	for (uint8_t i = 0; i &lt; MAX_SIZE_STRING_DB; i++) {</Line>
				<Line Number="99" Count="1">		placement = (placement + i) % MAX_SIZE_STRING_DB;</Line>
				<Line Number="100" Count="-1"></Line>
				<Line Number="101" Count="1">		if (stringRepository-&gt;arrayOfManagedLazyStringPointers[placement] == stringToFetch) {</Line>
				<Line Number="102" Count="1">			return placement;</Line>
				<Line Number="103" Count="-1">		}</Line>
				<Line Number="104" Count="-1">	}</Line>
				<Line Number="105" Count="0">	return -1;</Line>
				<Line Number="106" Count="-1">}</Line>
			</Report>
		</File>
		<File Name="time.c" FullPath="./src/time.c">
			<Report>
				<Line Number="0" Count="-1">#include "time.h"</Line>
				<Line Number="1" Count="-1">#include &lt;ascii_helper.h&gt;</Line>
				<Line Number="2" Count="-1"></Line>
				<Line Number="3" Count="-1">uint32_t (* takeTimeFromClock)(void) = NULL;</Line>
				<Line Number="4" Count="-1"></Line>
				<Line Number="5" Count="-1">//helper functions</Line>
				<Line Number="6" Count="-1">uint16_t calcYear(uint32_t * days);</Line>
				<Line Number="7" Count="-1"></Line>
				<Line Number="8" Count="-1">uint8_t daysInMonth(uint16_t year, uint8_t month);</Line>
				<Line Number="9" Count="-1"></Line>
				<Line Number="10" Count="-1">uint8_t calcUtcOffset(uint32_t epochTimeY2K);</Line>
				<Line Number="11" Count="-1"></Line>
				<Line Number="12" Count="-1">uint8_t calcMonth(uint32_t * days, uint16_t year);</Line>
				<Line Number="13" Count="-1"></Line>
				<Line Number="14" Count="-1">uint8_t isDst(uint16_t year, uint8_t month, uint8_t day);</Line>
				<Line Number="15" Count="-1"></Line>
				<Line Number="16" Count="-1">uint8_t calcZellerCongruence(uint16_t year, uint8_t month, uint8_t day);</Line>
				<Line Number="17" Count="-1"></Line>
				<Line Number="18" Count="-1">uint8_t isLeapYear(uint16_t year);</Line>
				<Line Number="19" Count="-1"></Line>
				<Line Number="20" Count="-1">void formatString(char * resultString, struct tm * timeStructPtr);</Line>
				<Line Number="21" Count="-1"></Line>
				<Line Number="22" Count="-1">void addTimezone(char * result, uint8_t timezoneFlag);</Line>
				<Line Number="23" Count="-1"></Line>
				<Line Number="24" Count="-1">//expecting no mcu library use this function, because it is per default unknown in a mcu environment without rtc</Line>
				<Line Number="25" Count="-1">//calculate this value with systemClock and CLOCKS_PER_SECOND or F_CPU in mcuClock if necessary and subtract the sleep times</Line>
				<Line Number="26" Count="-1">// to keep this implementation as close as possible to the ansi/iso 9899-1990. After implementation connect it to the version in time.h</Line>
				<Line Number="27" Count="0">uint32_t clock(void) {</Line>
				<Line Number="28" Count="0">    return -1;</Line>
				<Line Number="29" Count="-1">}</Line>
				<Line Number="30" Count="-1"></Line>
				<Line Number="31" Count="-1">//time1 - time0</Line>
				<Line Number="32" Count="0">int32_t difftime(uint32_t time1, uint32_t time0) {</Line>
				<Line Number="33" Count="-1"></Line>
				<Line Number="34" Count="-1">    // 0 - uint32_t_max exceeds max negative values of int32_T, avoid the operation</Line>
				<Line Number="35" Count="0">    int64_t diff = (int64_t) time1 - (int64_t) time0;</Line>
				<Line Number="36" Count="-1">    //return INT32_MIN if we exceed its boundary</Line>
				<Line Number="37" Count="0">    return (diff &lt; INT32_MIN) ? INT32_MIN : (int32_t) diff;</Line>
				<Line Number="38" Count="-1">}</Line>
				<Line Number="39" Count="-1"></Line>
				<Line Number="40" Count="-1">// Converts the given year, month, day, hour, minute, and second into seconds since the epoch</Line>
				<Line Number="41" Count="3">uint32_t mktime(const struct tm * timeptr) {</Line>
				<Line Number="42" Count="3">    const struct tm time = (*timeptr);</Line>
				<Line Number="43" Count="-1"></Line>
				<Line Number="44" Count="-1">    // Calculate number of days since the epoch</Line>
				<Line Number="45" Count="3">    uint16_t daysSinceEpoch = (time.tm_year - EPOCH_YEAR) * 365;</Line>
				<Line Number="46" Count="-1"></Line>
				<Line Number="47" Count="-1">    // add one day for leap years</Line>
				<Line Number="48" Count="45">    for (uint16_t y = EPOCH_YEAR; y &lt; time.tm_year; y++) {</Line>
				<Line Number="49" Count="42">        if (isLeapYear(y))</Line>
				<Line Number="50" Count="12">            daysSinceEpoch++;</Line>
				<Line Number="51" Count="-1">    }</Line>
				<Line Number="52" Count="-1"></Line>
				<Line Number="53" Count="10">    for (uint8_t m = 1; m &lt; time.tm_mon; m++) {</Line>
				<Line Number="54" Count="7">        daysSinceEpoch += daysInMonth(time.tm_year, m);</Line>
				<Line Number="55" Count="-1">    }</Line>
				<Line Number="56" Count="-1"></Line>
				<Line Number="57" Count="3">    uint32_t secondsSinceEpoch = daysSinceEpoch * ONE_DAY;</Line>
				<Line Number="58" Count="3">    secondsSinceEpoch += (time.tm_mday - 1) * ONE_DAY;</Line>
				<Line Number="59" Count="3">    secondsSinceEpoch += time.tm_hour * ONE_HOUR;</Line>
				<Line Number="60" Count="3">    secondsSinceEpoch += time.tm_min * 60;</Line>
				<Line Number="61" Count="3">    secondsSinceEpoch += time.tm_sec;</Line>
				<Line Number="62" Count="-1"></Line>
				<Line Number="63" Count="3">    return secondsSinceEpoch;</Line>
				<Line Number="64" Count="-1">}</Line>
				<Line Number="65" Count="-1"></Line>
				<Line Number="66" Count="405">uint8_t isLeapYear(uint16_t year) {</Line>
				<Line Number="67" Count="405">    return (year % 4 == 0 &amp;&amp; year % 100 != 0) || (year % 400 == 0);</Line>
				<Line Number="68" Count="-1">}</Line>
				<Line Number="69" Count="-1"></Line>
				<Line Number="70" Count="0">uint32_t time(uint32_t * timer) {</Line>
				<Line Number="71" Count="0">    uint32_t timestamp = 0;</Line>
				<Line Number="72" Count="-1"></Line>
				<Line Number="73" Count="0">    if (takeTimeFromClock != NULL) {</Line>
				<Line Number="74" Count="0">        timestamp = takeTimeFromClock();</Line>
				<Line Number="75" Count="0">        if (timer != NULL) {</Line>
				<Line Number="76" Count="0">            (*timer) = timestamp;</Line>
				<Line Number="77" Count="-1">        }</Line>
				<Line Number="78" Count="0">    } else if (timer != NULL) {</Line>
				<Line Number="79" Count="0">        timestamp = (*timer);</Line>
				<Line Number="80" Count="-1">    }</Line>
				<Line Number="81" Count="-1"></Line>
				<Line Number="82" Count="0">    return timestamp;</Line>
				<Line Number="83" Count="-1">}</Line>
				<Line Number="84" Count="-1"></Line>
				<Line Number="85" Count="0">char * ctime(uint32_t * timer) {</Line>
				<Line Number="86" Count="0">    uint32_t volatile timestamp = time(NULL);</Line>
				<Line Number="87" Count="0">    if (timer != NULL) {</Line>
				<Line Number="88" Count="0">        (*timer) = timestamp;</Line>
				<Line Number="89" Count="-1">    }</Line>
				<Line Number="90" Count="0">    struct tm  * timePointer = localtime(timer);</Line>
				<Line Number="91" Count="0">    char * result = asctime(timePointer);</Line>
				<Line Number="92" Count="0">    free(timePointer);</Line>
				<Line Number="93" Count="0">    return result;</Line>
				<Line Number="94" Count="-1">}</Line>
				<Line Number="95" Count="-1"></Line>
				<Line Number="96" Count="3">char * asctime(struct tm * timeptr) {</Line>
				<Line Number="97" Count="-1">    char * result;</Line>
				<Line Number="98" Count="3">    result = (char *) malloc(TIMESTAMP_LENGTH * sizeof(char));</Line>
				<Line Number="99" Count="3">    if (result == NULL) {</Line>
				<Line Number="100" Count="0">        return NULL;</Line>
				<Line Number="101" Count="-1">    }</Line>
				<Line Number="102" Count="3">    formatString(result, timeptr);</Line>
				<Line Number="103" Count="3">    switch (timeptr-&gt;tm_isdst) {</Line>
				<Line Number="104" Count="1">        case 1: {</Line>
				<Line Number="105" Count="-1">            //CAVE: intended change of meanings for more efficient operations</Line>
				<Line Number="106" Count="1">            addTimezone(result, 2);</Line>
				<Line Number="107" Count="1">            break;</Line>
				<Line Number="108" Count="-1">        }</Line>
				<Line Number="109" Count="1">        case 2: {</Line>
				<Line Number="110" Count="1">            addTimezone(result, 1);</Line>
				<Line Number="111" Count="1">            break;</Line>
				<Line Number="112" Count="-1">        }</Line>
				<Line Number="113" Count="1">        case 0: {</Line>
				<Line Number="114" Count="1">            addTimezone(result, 0);</Line>
				<Line Number="115" Count="-1">        }</Line>
				<Line Number="116" Count="3">        default:;</Line>
				<Line Number="117" Count="-1">    }</Line>
				<Line Number="118" Count="-1">    // null terminate the string</Line>
				<Line Number="119" Count="3">    result[25] = 0;</Line>
				<Line Number="120" Count="3">    return result;</Line>
				<Line Number="121" Count="-1">}</Line>
				<Line Number="122" Count="-1"></Line>
				<Line Number="123" Count="-1">// CAVE: The meaning is now shifted for more efficient bit operation, flag 0 still UTC, but Flag 1 CEST now, Flag 2 CEST</Line>
				<Line Number="124" Count="3">void addTimezone(char * result, uint8_t timezoneFlag) {</Line>
				<Line Number="125" Count="3">    uint8_t adjustment = timezoneFlag &amp; 1;</Line>
				<Line Number="126" Count="3">    uint8_t index = 20 - adjustment; //will shift the position on to the left for CEST</Line>
				<Line Number="127" Count="-1"></Line>
				<Line Number="128" Count="-1">    // (</Line>
				<Line Number="129" Count="3">    result[index++] = 0x28;</Line>
				<Line Number="130" Count="3">    if (!timezoneFlag) {</Line>
				<Line Number="131" Count="-1">        // U</Line>
				<Line Number="132" Count="1">        result[index++] = 0x55;</Line>
				<Line Number="133" Count="1">        result[index++] = 0x54;</Line>
				<Line Number="134" Count="-1">        // C</Line>
				<Line Number="135" Count="1">        result[index++] = 0x43;</Line>
				<Line Number="136" Count="-1">    } else {</Line>
				<Line Number="137" Count="2">        result[index++] = 0x43;</Line>
				<Line Number="138" Count="2">        result[index++] = 0x45;</Line>
				<Line Number="139" Count="2">        if (adjustment) {</Line>
				<Line Number="140" Count="-1">            //S</Line>
				<Line Number="141" Count="1">            result[index++] = 0x53;</Line>
				<Line Number="142" Count="-1">        }</Line>
				<Line Number="143" Count="2">        result[index++] = 0x54;</Line>
				<Line Number="144" Count="-1">    }</Line>
				<Line Number="145" Count="-1">    // )</Line>
				<Line Number="146" Count="3">    result[index++] = 0x29;</Line>
				<Line Number="147" Count="3">}</Line>
				<Line Number="148" Count="-1"></Line>
				<Line Number="149" Count="3">void formatString(char * resultString, struct tm * timeStructPtr) {</Line>
				<Line Number="150" Count="3">    AsciiHelper * helper = dOS_initAsciiHelper();</Line>
				<Line Number="151" Count="3">    if (helper != NULL) {</Line>
				<Line Number="152" Count="3">        helper-&gt;integerToAscii(resultString, timeStructPtr-&gt;tm_year, 4, 0);</Line>
				<Line Number="153" Count="3">        helper-&gt;integerToAscii(resultString, timeStructPtr-&gt;tm_mon, 2, 5);</Line>
				<Line Number="154" Count="3">        helper-&gt;integerToAscii(resultString, timeStructPtr-&gt;tm_mday, 2, 8);</Line>
				<Line Number="155" Count="3">        helper-&gt;integerToAscii(resultString, timeStructPtr-&gt;tm_hour, 2, 11);</Line>
				<Line Number="156" Count="3">        helper-&gt;integerToAscii(resultString, timeStructPtr-&gt;tm_min, 2, 14);</Line>
				<Line Number="157" Count="3">        helper-&gt;integerToAscii(resultString, timeStructPtr-&gt;tm_sec, 2, 17);</Line>
				<Line Number="158" Count="-1">        // -</Line>
				<Line Number="159" Count="3">        resultString[4] = resultString[7] = 0x2d;</Line>
				<Line Number="160" Count="-1">        //whitespace</Line>
				<Line Number="161" Count="3">        resultString[10] = 0x20;</Line>
				<Line Number="162" Count="-1">        // :</Line>
				<Line Number="163" Count="3">        resultString[13] = resultString[16] = 0x3a;</Line>
				<Line Number="164" Count="-1">        //whitespace</Line>
				<Line Number="165" Count="3">        resultString[19] = 0x20;</Line>
				<Line Number="166" Count="-1">    }</Line>
				<Line Number="167" Count="3">	free(helper);</Line>
				<Line Number="168" Count="3">}</Line>
				<Line Number="169" Count="-1"></Line>
				<Line Number="170" Count="3">struct tm * gmtime(const uint32_t * timer) {</Line>
				<Line Number="171" Count="-1">    // Allocate memory for a struct time structure</Line>
				<Line Number="172" Count="3">    struct tm * constructedTime = (struct tm *) malloc(sizeof(struct tm));</Line>
				<Line Number="173" Count="3">    if (constructedTime == NULL) {</Line>
				<Line Number="174" Count="0">        return NULL;</Line>
				<Line Number="175" Count="-1">    }</Line>
				<Line Number="176" Count="3">    uint32_t timeValue = (*timer);</Line>
				<Line Number="177" Count="-1"></Line>
				<Line Number="178" Count="3">    constructedTime-&gt;tm_sec = timeValue % 60;</Line>
				<Line Number="179" Count="3">    timeValue /= 60;</Line>
				<Line Number="180" Count="3">    constructedTime-&gt;tm_min = timeValue % 60;</Line>
				<Line Number="181" Count="3">    timeValue /= 60;</Line>
				<Line Number="182" Count="3">    constructedTime-&gt;tm_hour = timeValue % 24;</Line>
				<Line Number="183" Count="3">    timeValue /= 24;</Line>
				<Line Number="184" Count="-1">    // Convert days since epoch to year, month, day</Line>
				<Line Number="185" Count="3">    constructedTime-&gt;tm_year = calcYear(&amp;timeValue);</Line>
				<Line Number="186" Count="-1">    // Find the month and day</Line>
				<Line Number="187" Count="3">    constructedTime-&gt;tm_mon = calcMonth(&amp;timeValue, constructedTime-&gt;tm_year);</Line>
				<Line Number="188" Count="3">    constructedTime-&gt;tm_mday = timeValue + 1; // Days start from 0, so add 1</Line>
				<Line Number="189" Count="-1"></Line>
				<Line Number="190" Count="3">    return constructedTime;</Line>
				<Line Number="191" Count="-1">}</Line>
				<Line Number="192" Count="-1"></Line>
				<Line Number="193" Count="3">struct tm * localtime(const uint32_t * timer) {</Line>
				<Line Number="194" Count="3">    uint32_t adjusted = (*timer);</Line>
				<Line Number="195" Count="3">    uint8_t utcOffset = calcUtcOffset(adjusted);</Line>
				<Line Number="196" Count="-1">    // Adjust for UTC offset</Line>
				<Line Number="197" Count="3">    adjusted += utcOffset * ONE_HOUR;</Line>
				<Line Number="198" Count="3">    struct tm * timeToReturn = gmtime(&amp;adjusted);</Line>
				<Line Number="199" Count="-1"></Line>
				<Line Number="200" Count="3">    timeToReturn-&gt;tm_isdst = utcOffset;</Line>
				<Line Number="201" Count="3">    return timeToReturn;</Line>
				<Line Number="202" Count="-1">}</Line>
				<Line Number="203" Count="-1"></Line>
				<Line Number="204" Count="0">size_t strftime(char * s, size_t maxsize, const char * format, const struct tm * timeptr) {</Line>
				<Line Number="205" Count="0">    return 0;</Line>
				<Line Number="206" Count="-1">}</Line>
				<Line Number="207" Count="-1"></Line>
				<Line Number="208" Count="-1">//time1 - time0</Line>
				<Line Number="209" Count="0">uint32_t difftime_unsigned(uint32_t time1, uint32_t time0) {</Line>
				<Line Number="210" Count="-1"></Line>
				<Line Number="211" Count="0">    int64_t diff = (int64_t) time1 - (int64_t) time0;</Line>
				<Line Number="212" Count="0">    return (uint32_t) (diff &gt;= 0 ? diff : -diff);</Line>
				<Line Number="213" Count="-1">}</Line>
				<Line Number="214" Count="-1"></Line>
				<Line Number="215" Count="-1"></Line>
				<Line Number="216" Count="0">void setMcuClockCallback(uint32_t (* mcuClockCallback)(void)) {</Line>
				<Line Number="217" Count="0">    takeTimeFromClock = mcuClockCallback;</Line>
				<Line Number="218" Count="0">}</Line>
				<Line Number="219" Count="-1"></Line>
				<Line Number="220" Count="-1"></Line>
				<Line Number="221" Count="-1">// Returns the number of days in a given month of a given year</Line>
				<Line Number="222" Count="70">uint8_t daysInMonth(uint16_t year, uint8_t month) {</Line>
				<Line Number="223" Count="-1"></Line>
				<Line Number="224" Count="-1">    static const uint8_t days[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};</Line>
				<Line Number="225" Count="70">    uint8_t daysInMonth = days[month - 1];</Line>
				<Line Number="226" Count="-1"></Line>
				<Line Number="227" Count="70">    if (month == 2 &amp;&amp; isLeapYear(year)) { daysInMonth++; }</Line>
				<Line Number="228" Count="-1"></Line>
				<Line Number="229" Count="70">    return daysInMonth;</Line>
				<Line Number="230" Count="-1">}</Line>
				<Line Number="231" Count="-1"></Line>
				<Line Number="232" Count="7">uint8_t calcZellerCongruence(uint16_t year, uint8_t month, uint8_t day) {</Line>
				<Line Number="233" Count="-1">    uint32_t h;</Line>
				<Line Number="234" Count="7">    if (month == 1) {</Line>
				<Line Number="235" Count="0">        month = 13;</Line>
				<Line Number="236" Count="0">        year--;</Line>
				<Line Number="237" Count="-1">    }</Line>
				<Line Number="238" Count="7">    if (month == 2) {</Line>
				<Line Number="239" Count="0">        month = 14;</Line>
				<Line Number="240" Count="0">        year--;</Line>
				<Line Number="241" Count="-1">    }</Line>
				<Line Number="242" Count="7">    h = day + 13 * (month + 1) / 5 + (year % 100) + (year % 100) / 4 + (year / 100) / 4 + 5 * (year / 100);</Line>
				<Line Number="243" Count="7">    h = h % 7;</Line>
				<Line Number="244" Count="7">    return h;</Line>
				<Line Number="245" Count="-1">}</Line>
				<Line Number="246" Count="-1"></Line>
				<Line Number="247" Count="10">uint8_t isDst(uint16_t year, uint8_t month, uint8_t day) {</Line>
				<Line Number="248" Count="-1">    // DST in Germany starts on the last Sunday of March and ends on the last Sunday of October</Line>
				<Line Number="249" Count="-1"></Line>
				<Line Number="250" Count="10">    if (month &gt; 3 &amp;&amp; month &lt; 10) {</Line>
				<Line Number="251" Count="3">        return 1;</Line>
				<Line Number="252" Count="-1">    }</Line>
				<Line Number="253" Count="-1"></Line>
				<Line Number="254" Count="-1">    // Check if month is March through October</Line>
				<Line Number="255" Count="7">    if (month &lt; 3 || month &gt; 10) {</Line>
				<Line Number="256" Count="3">        return 0;</Line>
				<Line Number="257" Count="-1">    }</Line>
				<Line Number="258" Count="-1"></Line>
				<Line Number="259" Count="-1">    // Calculate the day of the week for the last day of the month</Line>
				<Line Number="260" Count="4">    uint8_t lastDayOfMonth = calcZellerCongruence(year, month, 31);</Line>
				<Line Number="261" Count="-1"></Line>
				<Line Number="262" Count="-1">    // Determine the date of the last Sunday of the month</Line>
				<Line Number="263" Count="4">    uint8_t lastSunday = 31 - ((lastDayOfMonth - 1) % 7);</Line>
				<Line Number="264" Count="-1"></Line>
				<Line Number="265" Count="4">    if ((day &gt;= lastSunday &amp;&amp; month == 3) || (day &lt; lastSunday &amp;&amp; month == 10)) {</Line>
				<Line Number="266" Count="2">        return 1;</Line>
				<Line Number="267" Count="-1">    }</Line>
				<Line Number="268" Count="2">    return 0;</Line>
				<Line Number="269" Count="-1">}</Line>
				<Line Number="270" Count="-1"></Line>
				<Line Number="271" Count="9">uint16_t calcYear(uint32_t * days) {</Line>
				<Line Number="272" Count="9">    uint16_t year = EPOCH_YEAR;</Line>
				<Line Number="273" Count="178">    while ((*days) &gt;= (uint16_t)365 + isLeapYear(year)) {</Line>
				<Line Number="274" Count="169">        if (isLeapYear(year)) {</Line>
				<Line Number="275" Count="49">            (*days) -= 366;</Line>
				<Line Number="276" Count="49">            year++;</Line>
				<Line Number="277" Count="-1">        } else {</Line>
				<Line Number="278" Count="120">            (*days) -= 365;</Line>
				<Line Number="279" Count="120">            year++;</Line>
				<Line Number="280" Count="-1">        }</Line>
				<Line Number="281" Count="-1">    }</Line>
				<Line Number="282" Count="9">    return year;</Line>
				<Line Number="283" Count="-1">}</Line>
				<Line Number="284" Count="-1"></Line>
				<Line Number="285" Count="10">uint8_t calcMonth(uint32_t * days, uint16_t year) {</Line>
				<Line Number="286" Count="10">    uint8_t month = 1;</Line>
				<Line Number="287" Count="36">    while ((*days) &gt;= daysInMonth(year, month)) {</Line>
				<Line Number="288" Count="26">        (*days) -= daysInMonth(year, month);</Line>
				<Line Number="289" Count="26">        month++;</Line>
				<Line Number="290" Count="-1">    }</Line>
				<Line Number="291" Count="10">    return month;</Line>
				<Line Number="292" Count="-1">}</Line>
				<Line Number="293" Count="-1"></Line>
				<Line Number="294" Count="5">uint8_t calcUtcOffset(uint32_t epochTimeY2K) {</Line>
				<Line Number="295" Count="5">    uint32_t days = epochTimeY2K /= ONE_DAY;</Line>
				<Line Number="296" Count="-1">    // Convert days since epoch to year, month, day</Line>
				<Line Number="297" Count="5">    uint16_t year = calcYear(&amp;days);</Line>
				<Line Number="298" Count="-1">    // Find the month and day</Line>
				<Line Number="299" Count="5">    uint8_t month = calcMonth(&amp;days, year);</Line>
				<Line Number="300" Count="-1">    // Days start from 0, so add 1</Line>
				<Line Number="301" Count="5">    uint8_t day = days + 1;</Line>
				<Line Number="302" Count="-1">    // Get the UTC offset based on whether daylight saving time (DST) is in effect</Line>
				<Line Number="303" Count="5">    return isDst(year, month, day) ? 2 : 1;</Line>
				<Line Number="304" Count="-1">}</Line>
			</Report>
		</File>
		<File Name="_ascii_helper.c" FullPath="./tests/_ascii_helper.c">
			<Report>
				<Line Number="0" Count="-1">#include &lt;unity.h&gt;</Line>
				<Line Number="1" Count="-1">#include &lt;ascii_helper.h&gt;</Line>
				<Line Number="2" Count="-1">#include &lt;stdlib.h&gt;</Line>
				<Line Number="3" Count="-1"></Line>
				<Line Number="4" Count="4">void setUp(void) {}</Line>
				<Line Number="5" Count="4">void tearDown(void) {</Line>
				<Line Number="6" Count="4">}</Line>
				<Line Number="7" Count="-1"></Line>
				<Line Number="8" Count="2">void test_integerToAscii(void) {</Line>
				<Line Number="9" Count="-1">    char resultArray[10]; // Adjust the size as per your requirement</Line>
				<Line Number="10" Count="2">    uint32_t num = 12345;</Line>
				<Line Number="11" Count="2">    uint8_t size = 5;</Line>
				<Line Number="12" Count="2">    uint8_t position = 0;</Line>
				<Line Number="13" Count="-1"></Line>
				<Line Number="14" Count="2">    AsciiHelper * asciiHelper = dOS_initAsciiHelper();</Line>
				<Line Number="15" Count="-1"></Line>
				<Line Number="16" Count="-1">    // Call the function</Line>
				<Line Number="17" Count="2">    asciiHelper-&gt;integerToAscii(resultArray, num, size, position);</Line>
				<Line Number="18" Count="-1"></Line>
				<Line Number="19" Count="-1">    // Check the result</Line>
				<Line Number="20" Count="2">    TEST_ASSERT_EQUAL_STRING("12345", resultArray);</Line>
				<Line Number="21" Count="2">}</Line>
				<Line Number="22" Count="-1"></Line>
				<Line Number="23" Count="2">void test_concatStrings_TwoStrings(void) {</Line>
				<Line Number="24" Count="2">    char * strings[] = {"Hello, ", "world!"};</Line>
				<Line Number="25" Count="2">    AsciiHelper * asciiHelper = dOS_initAsciiHelper();</Line>
				<Line Number="26" Count="-1"></Line>
				<Line Number="27" Count="-1"></Line>
				<Line Number="28" Count="2">    char * result = asciiHelper-&gt;concatStrings(2, strings);</Line>
				<Line Number="29" Count="-1"></Line>
				<Line Number="30" Count="-1">    // Verify the result is not NULL</Line>
				<Line Number="31" Count="2">    TEST_ASSERT_NOT_NULL(result);</Line>
				<Line Number="32" Count="-1"></Line>
				<Line Number="33" Count="-1">    // Verify the concatenated string is "Hello, world!"</Line>
				<Line Number="34" Count="2">    TEST_ASSERT_EQUAL_STRING("Hello, world!", result);</Line>
				<Line Number="35" Count="-1"></Line>
				<Line Number="36" Count="-1">    // Clean up memory</Line>
				<Line Number="37" Count="2">    free(result);</Line>
				<Line Number="38" Count="2">}</Line>
				<Line Number="39" Count="2">int main(void) {</Line>
				<Line Number="40" Count="2">    UNITY_BEGIN();</Line>
				<Line Number="41" Count="-1"></Line>
				<Line Number="42" Count="2">    RUN_TEST(test_integerToAscii);</Line>
				<Line Number="43" Count="2">    RUN_TEST(test_concatStrings_TwoStrings);</Line>
				<Line Number="44" Count="-1"></Line>
				<Line Number="45" Count="-1"></Line>
				<Line Number="46" Count="2">    return UNITY_END();</Line>
				<Line Number="47" Count="-1">}</Line>
			</Report>
		</File>
		<File Name="_string_storage.c" FullPath="./tests/_src/_string_storage.c">
			<Report>
				<Line Number="0" Count="-1">#include "../_include/_string_storage.h"</Line>
				<Line Number="1" Count="-1">#include &lt;stdlib.h&gt;</Line>
				<Line Number="2" Count="-1"></Line>
				<Line Number="3" Count="-1"></Line>
				<Line Number="4" Count="1">char* createStringFromFlash(const char* flashString) {</Line>
				<Line Number="5" Count="-1"></Line>
				<Line Number="6" Count="1">    return "mock";</Line>
				<Line Number="7" Count="-1">}</Line>
				<Line Number="8" Count="-1"></Line>
				<Line Number="9" Count="-1">const char initMsgOnFlash[] = " setup complete.";</Line>
				<Line Number="10" Count="-1">LazyLoadingString initMsg = {.flashString = initMsgOnFlash, .pointerToString = NULL};</Line>
				<Line Number="11" Count="-1"></Line>
				<Line Number="12" Count="1">StringStorage * dOS_initStringStorage(void) {</Line>
				<Line Number="13" Count="1">    StringStorage * storage = malloc(sizeof(StringStorage));</Line>
				<Line Number="14" Count="1">    if (storage == NULL) {</Line>
				<Line Number="15" Count="0">        return NULL;</Line>
				<Line Number="16" Count="-1">    } else {</Line>
				<Line Number="17" Count="1">        storage-&gt;initMsg=initMsg;</Line>
				<Line Number="18" Count="1">        storage-&gt;loadStringFromFlash=createStringFromFlash;</Line>
				<Line Number="19" Count="1">        return storage;</Line>
				<Line Number="20" Count="-1">    }</Line>
				<Line Number="21" Count="-1">}</Line>
			</Report>
		</File>
		<File Name="_string_repository.c" FullPath="./tests/_string_repository.c">
			<Report>
				<Line Number="0" Count="-1">#include &lt;unity.h&gt;</Line>
				<Line Number="1" Count="-1">#include &lt;string_repository.h&gt;</Line>
				<Line Number="2" Count="-1">#include &lt;malloc.h&gt;</Line>
				<Line Number="3" Count="-1"></Line>
				<Line Number="4" Count="5">void setUp(void) {}</Line>
				<Line Number="5" Count="5">void tearDown(void) {}</Line>
				<Line Number="6" Count="-1"></Line>
				<Line Number="7" Count="1">void test_addString(void) {</Line>
				<Line Number="8" Count="-1">    StringRepository * repositoryUnderTest;</Line>
				<Line Number="9" Count="1">    repositoryUnderTest = dOS_initStringRepository();</Line>
				<Line Number="10" Count="-1">    // Create a LazyLoadingString object</Line>
				<Line Number="11" Count="1">    LazyLoadingString* lazyString = malloc(sizeof(LazyLoadingString));</Line>
				<Line Number="12" Count="-1"></Line>
				<Line Number="13" Count="1">    lazyString-&gt;flashString = (const char *) 0xff;</Line>
				<Line Number="14" Count="1">    lazyString-&gt;pointerToString = NULL; // Initialize pointerToString</Line>
				<Line Number="15" Count="-1">    // Add the string to the repository</Line>
				<Line Number="16" Count="1">    LazyLoadingString** addedString = repositoryUnderTest-&gt;addString(lazyString);</Line>
				<Line Number="17" Count="-1">    // Check if the string was added successfully</Line>
				<Line Number="18" Count="1">    TEST_ASSERT_NOT_NULL(addedString);</Line>
				<Line Number="19" Count="1">    TEST_ASSERT_EQUAL_PTR(lazyString, *addedString);</Line>
				<Line Number="20" Count="1">    free(repositoryUnderTest);</Line>
				<Line Number="21" Count="1">}</Line>
				<Line Number="22" Count="-1"></Line>
				<Line Number="23" Count="1">void test_getString(void) {</Line>
				<Line Number="24" Count="-1">    StringRepository * stringRepository;</Line>
				<Line Number="25" Count="1">    stringRepository = dOS_initStringRepository();</Line>
				<Line Number="26" Count="1">    StringStorage * stringStorage = dOS_initStringStorage();</Line>
				<Line Number="27" Count="-1">    // Create a LazyLoadingString object and add it to the repository</Line>
				<Line Number="28" Count="1">    LazyLoadingString* lazyString = malloc(sizeof(LazyLoadingString));</Line>
				<Line Number="29" Count="1">    lazyString-&gt;flashString = (const char *) 0xff;</Line>
				<Line Number="30" Count="1">    lazyString-&gt;pointerToString = NULL;</Line>
				<Line Number="31" Count="1">    stringRepository-&gt;addString(lazyString);</Line>
				<Line Number="32" Count="-1">    // Try to retrieve the string</Line>
				<Line Number="33" Count="1">    char* retrievedString = stringRepository-&gt;getStringFromRamElseLoadFromFlash(lazyString, stringStorage); // Pass NULL for StringStorage</Line>
				<Line Number="34" Count="-1">    // Check if the retrieved string is not NULL</Line>
				<Line Number="35" Count="1">    TEST_ASSERT_NOT_NULL(retrievedString);</Line>
				<Line Number="36" Count="-1">    // You might want to add further checks depending on your implementation</Line>
				<Line Number="37" Count="1">    free(stringRepository);</Line>
				<Line Number="38" Count="1">}</Line>
				<Line Number="39" Count="-1"></Line>
				<Line Number="40" Count="1">void test_freeString(void) {</Line>
				<Line Number="41" Count="-1">    StringRepository * stringRepository;</Line>
				<Line Number="42" Count="1">    stringRepository = dOS_initStringRepository();</Line>
				<Line Number="43" Count="-1">    // Create a LazyLoadingString object and add it to the repository</Line>
				<Line Number="44" Count="1">    LazyLoadingString* lazyString = malloc(sizeof(LazyLoadingString));</Line>
				<Line Number="45" Count="1">    lazyString-&gt;pointerToString = malloc(10 * sizeof(char)); // Allocate memory for pointerToString</Line>
				<Line Number="46" Count="1">    lazyString-&gt;flashString = (const char *) 0xff;</Line>
				<Line Number="47" Count="1">    stringRepository-&gt;addString(lazyString);</Line>
				<Line Number="48" Count="-1">    // Free the string</Line>
				<Line Number="49" Count="1">    LazyLoadingString* freedString = stringRepository-&gt;freeString(lazyString);</Line>
				<Line Number="50" Count="-1">    // Check if the freed string is the same as the original one</Line>
				<Line Number="51" Count="1">    TEST_ASSERT_EQUAL_PTR(lazyString, freedString);</Line>
				<Line Number="52" Count="-1">    // Check if the pointerToString is NULL after freeing</Line>
				<Line Number="53" Count="1">    TEST_ASSERT_NULL(lazyString-&gt;pointerToString);</Line>
				<Line Number="54" Count="1">    free(stringRepository);</Line>
				<Line Number="55" Count="1">    free(lazyString);</Line>
				<Line Number="56" Count="1">}</Line>
				<Line Number="57" Count="-1"></Line>
				<Line Number="58" Count="1">void test_removeStringFromManagement(void) {</Line>
				<Line Number="59" Count="-1">    StringRepository * stringRepository;</Line>
				<Line Number="60" Count="1">    stringRepository = dOS_initStringRepository();</Line>
				<Line Number="61" Count="-1">    // Create a LazyLoadingString object and add it to the repository</Line>
				<Line Number="62" Count="1">    LazyLoadingString* lazyString = malloc(sizeof(LazyLoadingString));</Line>
				<Line Number="63" Count="1">    lazyString-&gt;flashString = (const char *) 0xff;</Line>
				<Line Number="64" Count="1">    lazyString-&gt;pointerToString = NULL;</Line>
				<Line Number="65" Count="1">    stringRepository-&gt;addString(lazyString);</Line>
				<Line Number="66" Count="-1">    // Remove the string from management</Line>
				<Line Number="67" Count="1">    LazyLoadingString* removedString = stringRepository-&gt;removeStringFromManagement(lazyString);</Line>
				<Line Number="68" Count="-1">    // Check if the removed string is the same as the original one</Line>
				<Line Number="69" Count="1">    TEST_ASSERT_EQUAL_PTR(lazyString, removedString);</Line>
				<Line Number="70" Count="-1">    // Check if the string is no longer in the repository</Line>
				<Line Number="71" Count="1">    TEST_ASSERT_NULL(stringRepository-&gt;arrayOfManagedLazyStringPointers[0]);</Line>
				<Line Number="72" Count="1">    free(stringRepository);</Line>
				<Line Number="73" Count="1">}</Line>
				<Line Number="74" Count="-1"></Line>
				<Line Number="75" Count="1">void test_freeMemoryRandom(void) {</Line>
				<Line Number="76" Count="-1">    // Initialize the repository</Line>
				<Line Number="77" Count="1">    StringRepository * repository = dOS_initStringRepository();</Line>
				<Line Number="78" Count="1">    TEST_ASSERT_NOT_NULL(repository);</Line>
				<Line Number="79" Count="-1"></Line>
				<Line Number="80" Count="-1">    // Add some strings to the repository for testing</Line>
				<Line Number="81" Count="9">    for (int i = 0; i &lt; MAX_SIZE_STRING_DB; i++) {</Line>
				<Line Number="82" Count="8">        LazyLoadingString* lazyString = malloc(sizeof(LazyLoadingString));</Line>
				<Line Number="83" Count="8">        lazyString-&gt;pointerToString = malloc(10 * sizeof(char)); // Allocate memory for pointerToString</Line>
				<Line Number="84" Count="8">        repository-&gt;arrayOfManagedLazyStringPointers[i] = lazyString;</Line>
				<Line Number="85" Count="8">        repository-&gt;arrayOfManagedLazyStringPointers[i]-&gt;flashString = (const char *) (i + 0xff);</Line>
				<Line Number="86" Count="-1"></Line>
				<Line Number="87" Count="-1">    }</Line>
				<Line Number="88" Count="-1"></Line>
				<Line Number="89" Count="-1">    // Free memory randomly with a percentage of 50%</Line>
				<Line Number="90" Count="1">    repository-&gt;freeMemoryRandom(50);</Line>
				<Line Number="91" Count="-1"></Line>
				<Line Number="92" Count="-1">    // Check if approximately half of the strings are deallocated</Line>
				<Line Number="93" Count="1">    int deallocatedCount = 0;</Line>
				<Line Number="94" Count="9">    for (int i = 0; i &lt; MAX_SIZE_STRING_DB; i++) {</Line>
				<Line Number="95" Count="8">        if (repository-&gt;arrayOfManagedLazyStringPointers[i]-&gt;pointerToString == NULL) {</Line>
				<Line Number="96" Count="4">            deallocatedCount++;</Line>
				<Line Number="97" Count="-1">        }</Line>
				<Line Number="98" Count="-1">    }</Line>
				<Line Number="99" Count="-1">    // Allow some tolerance due to rounding errors</Line>
				<Line Number="100" Count="1">    int expectedDeallocatedCount = MAX_SIZE_STRING_DB / 2;</Line>
				<Line Number="101" Count="1">    TEST_ASSERT_TRUE(abs(deallocatedCount - expectedDeallocatedCount) &lt;= 1);</Line>
				<Line Number="102" Count="-1"></Line>
				<Line Number="103" Count="-1">    // Free the remaining strings</Line>
				<Line Number="104" Count="9">    for (int i = 0; i &lt; MAX_SIZE_STRING_DB; i++) {</Line>
				<Line Number="105" Count="8">        if (repository-&gt;arrayOfManagedLazyStringPointers[i] != NULL) {</Line>
				<Line Number="106" Count="8">            free(repository-&gt;arrayOfManagedLazyStringPointers[i]-&gt;pointerToString);</Line>
				<Line Number="107" Count="8">            free(repository-&gt;arrayOfManagedLazyStringPointers[i]);</Line>
				<Line Number="108" Count="-1">        }</Line>
				<Line Number="109" Count="-1">    }</Line>
				<Line Number="110" Count="1">    free(repository);</Line>
				<Line Number="111" Count="1">}</Line>
				<Line Number="112" Count="-1"></Line>
				<Line Number="113" Count="1">int main(void) {</Line>
				<Line Number="114" Count="1">    UNITY_BEGIN();</Line>
				<Line Number="115" Count="-1">    // Run tests</Line>
				<Line Number="116" Count="1">    RUN_TEST(test_addString);</Line>
				<Line Number="117" Count="1">    RUN_TEST(test_getString);</Line>
				<Line Number="118" Count="1">    RUN_TEST(test_freeString);</Line>
				<Line Number="119" Count="1">    RUN_TEST(test_removeStringFromManagement);</Line>
				<Line Number="120" Count="1">    RUN_TEST(test_freeMemoryRandom);</Line>
				<Line Number="121" Count="1">    return UNITY_END();</Line>
				<Line Number="122" Count="-1">}</Line>
			</Report>
		</File>
		<File Name="_time.c" FullPath="./tests/_time.c">
			<Report>
				<Line Number="0" Count="-1">#include &lt;time.h&gt;</Line>
				<Line Number="1" Count="-1">#include &lt;unity.h&gt;</Line>
				<Line Number="2" Count="-1"></Line>
				<Line Number="3" Count="-1">//given</Line>
				<Line Number="4" Count="-1">struct tm     epochStartDate = {0, 0, 0, 1, 1, EPOCH_YEAR};</Line>
				<Line Number="5" Count="-1">struct tm     februaryThirteenth2021 = {0, 0, 0, 13, 2, 2021, 0, 0, 1};</Line>
				<Line Number="6" Count="-1">struct tm     julyThirteenth2021 = {0, 0, 0, 13, 7, 2021, 0, 0, 2};</Line>
				<Line Number="7" Count="-1">const uint32_t      februaryThirteenth2021Time_T = 666489600;</Line>
				<Line Number="8" Count="-1">const uint32_t      julyThirtieth2021Time_T = 679449600;</Line>
				<Line Number="9" Count="-1"></Line>
				<Line Number="10" Count="-1">//declaration for the helper functions that aren't present in the header</Line>
				<Line Number="11" Count="-1">uint16_t            calcYear(uint32_t *days);</Line>
				<Line Number="12" Count="-1">uint8_t             daysInMonth(uint16_t year, uint8_t month);</Line>
				<Line Number="13" Count="-1">uint8_t             calcUtcOffset(uint32_t epochTimeY2K);</Line>
				<Line Number="14" Count="-1">uint8_t             calcMonth(uint32_t *days, uint16_t year);</Line>
				<Line Number="15" Count="-1">uint8_t             isDst(uint16_t year, uint8_t month, uint8_t day);</Line>
				<Line Number="16" Count="-1">uint8_t             calcZellerCongruence(uint16_t year, uint8_t month, uint8_t day);</Line>
				<Line Number="17" Count="-1">#include "../src/time.c"</Line>
				<Line Number="18" Count="-1"></Line>
				<Line Number="19" Count="19">void setUp(void) {}</Line>
				<Line Number="20" Count="19">void tearDown(void) {}</Line>
				<Line Number="21" Count="-1"></Line>
				<Line Number="22" Count="-1">//iso functions</Line>
				<Line Number="23" Count="-1"></Line>
				<Line Number="24" Count="1">void mktime_epochStartDateUTC_returnZero(void) {</Line>
				<Line Number="25" Count="-1"></Line>
				<Line Number="26" Count="1">    uint32_t resultInt32 = mktime(&amp;epochStartDate);</Line>
				<Line Number="27" Count="1">    uint32_t expected_result = 0;</Line>
				<Line Number="28" Count="1">    TEST_ASSERT_EQUAL_UINT32(expected_result, resultInt32);</Line>
				<Line Number="29" Count="1">}</Line>
				<Line Number="30" Count="-1"></Line>
				<Line Number="31" Count="1">void mktime_februaryThirteenthCET_calculateCorrectly(void) {</Line>
				<Line Number="32" Count="-1"></Line>
				<Line Number="33" Count="1">    uint32_t resultInt32 = mktime(&amp;februaryThirteenth2021);</Line>
				<Line Number="34" Count="1">    uint32_t expected_result = februaryThirteenth2021Time_T;</Line>
				<Line Number="35" Count="1">    TEST_ASSERT_EQUAL_UINT32(expected_result, resultInt32);</Line>
				<Line Number="36" Count="1">}</Line>
				<Line Number="37" Count="-1"></Line>
				<Line Number="38" Count="1">void mktime_julyThirteenthCEST_calculateCorrectly(void) {</Line>
				<Line Number="39" Count="-1"></Line>
				<Line Number="40" Count="1">    uint32_t resultInt32 = mktime(&amp;julyThirteenth2021);</Line>
				<Line Number="41" Count="1">    uint32_t expected_result = julyThirtieth2021Time_T;</Line>
				<Line Number="42" Count="1">    TEST_ASSERT_EQUAL_UINT32(expected_result, resultInt32);</Line>
				<Line Number="43" Count="1">}</Line>
				<Line Number="44" Count="-1">// Helper function to test asctime with a given timestamp</Line>
				<Line Number="45" Count="3">void test_asctime_with_timestamp(struct tm * timestamp, const char * expected_format, size_t expected_length) {</Line>
				<Line Number="46" Count="3">    char * resultString = asctime(timestamp);</Line>
				<Line Number="47" Count="3">    TEST_ASSERT_NOT_NULL(resultString);</Line>
				<Line Number="48" Count="-1"></Line>
				<Line Number="49" Count="3">    char expected_result[expected_length];</Line>
				<Line Number="50" Count="3">    sprintf(expected_result, expected_format,</Line>
				<Line Number="51" Count="3">            timestamp-&gt;tm_year, timestamp-&gt;tm_mon, timestamp-&gt;tm_mday,</Line>
				<Line Number="52" Count="3">            timestamp-&gt;tm_hour, timestamp-&gt;tm_min, timestamp-&gt;tm_sec);</Line>
				<Line Number="53" Count="-1"></Line>
				<Line Number="54" Count="3">    TEST_ASSERT_EQUAL_STRING(expected_result, resultString);</Line>
				<Line Number="55" Count="3">    size_t result_length = 0;</Line>
				<Line Number="56" Count="78">    while (resultString[result_length] != '\0') {result_length++;}</Line>
				<Line Number="57" Count="3">    TEST_ASSERT_EQUAL_UINT32(expected_length, result_length);</Line>
				<Line Number="58" Count="3">}</Line>
				<Line Number="59" Count="-1"></Line>
				<Line Number="60" Count="1">void asctime_UtcCetCestTimestamps_createThreeStringsWithCorrectTimezones(void) {</Line>
				<Line Number="61" Count="-1">    // Testing with epochStartDate</Line>
				<Line Number="62" Count="1">    test_asctime_with_timestamp(&amp;epochStartDate, "%04d-%02d-%02d %02d:%02d:%02d (UTC)", 25);</Line>
				<Line Number="63" Count="-1"></Line>
				<Line Number="64" Count="-1">    // Testing with februaryThirteenth2021</Line>
				<Line Number="65" Count="1">    test_asctime_with_timestamp(&amp;februaryThirteenth2021, "%04d-%02d-%02d %02d:%02d:%02d (CET)", 25);</Line>
				<Line Number="66" Count="-1"></Line>
				<Line Number="67" Count="-1">    // Testing with julyThirteenth2021</Line>
				<Line Number="68" Count="1">    test_asctime_with_timestamp(&amp;julyThirteenth2021, "%04d-%02d-%02d %02d:%02d:%02d(CEST)", 25);</Line>
				<Line Number="69" Count="1">}</Line>
				<Line Number="70" Count="-1"></Line>
				<Line Number="71" Count="1">void localtime_februaryThirteenthCET_returnCorrectWintertimeStruct(void) {</Line>
				<Line Number="72" Count="-1"></Line>
				<Line Number="73" Count="1">    struct tm * result = localtime(&amp;februaryThirteenth2021Time_T);</Line>
				<Line Number="74" Count="-1">    //add one hour because of CET</Line>
				<Line Number="75" Count="1">    TEST_ASSERT_NOT_NULL(result);</Line>
				<Line Number="76" Count="1">    TEST_ASSERT_EQUAL_INT(0, result-&gt;tm_sec);</Line>
				<Line Number="77" Count="1">    TEST_ASSERT_EQUAL_INT(0, result-&gt;tm_min);</Line>
				<Line Number="78" Count="1">    TEST_ASSERT_EQUAL_INT(1, result-&gt;tm_hour);</Line>
				<Line Number="79" Count="1">    TEST_ASSERT_EQUAL_INT(13, result-&gt;tm_mday);</Line>
				<Line Number="80" Count="1">    TEST_ASSERT_EQUAL_INT(2, result-&gt;tm_mon);</Line>
				<Line Number="81" Count="1">    TEST_ASSERT_EQUAL_INT(2021, result-&gt;tm_year);</Line>
				<Line Number="82" Count="1">    free(result);</Line>
				<Line Number="83" Count="1">}</Line>
				<Line Number="84" Count="-1"></Line>
				<Line Number="85" Count="1">void localtime_julyThirteenthCEST_returnCorrectSummertimeStruct(void) {</Line>
				<Line Number="86" Count="1">    struct tm * result = localtime(&amp;februaryThirteenth2021Time_T);</Line>
				<Line Number="87" Count="1">    result = localtime(&amp;julyThirtieth2021Time_T);</Line>
				<Line Number="88" Count="-1">    //add two hours because of CEST</Line>
				<Line Number="89" Count="1">    TEST_ASSERT_NOT_NULL(result);</Line>
				<Line Number="90" Count="1">    TEST_ASSERT_EQUAL_INT(0, result-&gt;tm_sec);</Line>
				<Line Number="91" Count="1">    TEST_ASSERT_EQUAL_INT(0, result-&gt;tm_min);</Line>
				<Line Number="92" Count="1">    TEST_ASSERT_EQUAL_INT(2, result-&gt;tm_hour);</Line>
				<Line Number="93" Count="1">    TEST_ASSERT_EQUAL_INT(13, result-&gt;tm_mday);</Line>
				<Line Number="94" Count="1">    TEST_ASSERT_EQUAL_INT(7, result-&gt;tm_mon);</Line>
				<Line Number="95" Count="1">    TEST_ASSERT_EQUAL_INT(2021, result-&gt;tm_year);</Line>
				<Line Number="96" Count="1">}</Line>
				<Line Number="97" Count="-1"></Line>
				<Line Number="98" Count="-1">//helper functions</Line>
				<Line Number="99" Count="-1"></Line>
				<Line Number="100" Count="1">void calcYear_startEpoch2YK366days_shouldBeEpochYearPlusOne(void) {</Line>
				<Line Number="101" Count="1">    uint32_t days = 366; // Year 2000 was a Leap Year</Line>
				<Line Number="102" Count="1">    uint16_t resultYear = calcYear(&amp;days);</Line>
				<Line Number="103" Count="1">    TEST_ASSERT_EQUAL_UINT16(EPOCH_YEAR + 1, resultYear);</Line>
				<Line Number="104" Count="1">}</Line>
				<Line Number="105" Count="-1"></Line>
				<Line Number="106" Count="1">void daysInMonth_februaryLeapYear_shouldReturn29(void) {</Line>
				<Line Number="107" Count="1">    uint8_t resultMonth = daysInMonth(2024, 2);</Line>
				<Line Number="108" Count="1">    TEST_ASSERT_EQUAL_UINT8(29, resultMonth); // Leap year</Line>
				<Line Number="109" Count="1">}</Line>
				<Line Number="110" Count="-1"></Line>
				<Line Number="111" Count="1">void calcUtcOffset_ForFebruaryAndJuly_shouldReturnBothValuesCorrectly(void) {</Line>
				<Line Number="112" Count="1">    uint8_t resultOffset = calcUtcOffset(februaryThirteenth2021Time_T);</Line>
				<Line Number="113" Count="1">    TEST_ASSERT_EQUAL_UINT8(1, resultOffset);</Line>
				<Line Number="114" Count="-1"></Line>
				<Line Number="115" Count="1">    uint8_t resultOffset2 = calcUtcOffset(julyThirtieth2021Time_T);</Line>
				<Line Number="116" Count="1">    TEST_ASSERT_EQUAL_UINT8(2, resultOffset2);</Line>
				<Line Number="117" Count="1">}</Line>
				<Line Number="118" Count="-1"></Line>
				<Line Number="119" Count="1">void isDST_julyThirtieth2021_returnTrue(void) {</Line>
				<Line Number="120" Count="1">    uint8_t resultOffset2 = isDst(2021, 7, 13);</Line>
				<Line Number="121" Count="1">    TEST_ASSERT_EQUAL_UINT8(1, resultOffset2);</Line>
				<Line Number="122" Count="1">}</Line>
				<Line Number="123" Count="-1"></Line>
				<Line Number="124" Count="1">void isDST_octoberTwentySeventh2024_returnFalse(void) {</Line>
				<Line Number="125" Count="1">    uint8_t resultOffset2 = isDst(2024, 10, 27);</Line>
				<Line Number="126" Count="1">    TEST_ASSERT_EQUAL_UINT8(0, resultOffset2);</Line>
				<Line Number="127" Count="1">}</Line>
				<Line Number="128" Count="-1"></Line>
				<Line Number="129" Count="1">void isDST_octoberTwentySixth2024_returnTrue(void) {</Line>
				<Line Number="130" Count="1">    uint8_t resultOffset2 = isDst(2024, 10, 26);</Line>
				<Line Number="131" Count="1">    TEST_ASSERT_EQUAL_UINT8(1, resultOffset2);</Line>
				<Line Number="132" Count="1">}</Line>
				<Line Number="133" Count="-1"></Line>
				<Line Number="134" Count="1">void isDST_marchThirtyFirst2024_returnTrue(void) {</Line>
				<Line Number="135" Count="1">    uint8_t resultOffset2 = isDst(2024, 3, 31);</Line>
				<Line Number="136" Count="1">    TEST_ASSERT_EQUAL_UINT8(1, resultOffset2);</Line>
				<Line Number="137" Count="1">}</Line>
				<Line Number="138" Count="-1"></Line>
				<Line Number="139" Count="1">void isDST_marchThirtieth2024_returnFalse(void) {</Line>
				<Line Number="140" Count="1">    uint8_t resultOffset2 = isDst(2024, 3, 30);</Line>
				<Line Number="141" Count="1">    TEST_ASSERT_EQUAL_UINT8(0, resultOffset2);</Line>
				<Line Number="142" Count="1">}</Line>
				<Line Number="143" Count="-1"></Line>
				<Line Number="144" Count="1">void calcZellerCongruence_marchThirtieth2024_returnZeroForSaturday(void) {</Line>
				<Line Number="145" Count="1">    uint8_t resultOffset2 = calcZellerCongruence(2024, 3, 30);</Line>
				<Line Number="146" Count="1">    TEST_ASSERT_EQUAL_UINT8(0, resultOffset2);</Line>
				<Line Number="147" Count="1">}</Line>
				<Line Number="148" Count="-1"></Line>
				<Line Number="149" Count="1">void calcZellerCongruence_marchThirtyFirst2024_returnOneForSunday(void) {</Line>
				<Line Number="150" Count="1">    uint8_t resultOffset2 = calcZellerCongruence(2024, 3, 31);</Line>
				<Line Number="151" Count="1">    TEST_ASSERT_EQUAL_UINT8(1, resultOffset2);</Line>
				<Line Number="152" Count="1">}</Line>
				<Line Number="153" Count="-1"></Line>
				<Line Number="154" Count="1">void calcZellerCongruence_octoberThirtyFirst2024_return5ForThursday(void) {</Line>
				<Line Number="155" Count="1">    uint8_t resultOffset2 = calcZellerCongruence(2024, 10, 31);</Line>
				<Line Number="156" Count="1">    TEST_ASSERT_EQUAL_UINT8(5, resultOffset2);</Line>
				<Line Number="157" Count="1">}</Line>
				<Line Number="158" Count="-1"></Line>
				<Line Number="159" Count="1">void calcMonth_59daysLeapYear_returnFebruary(void) {</Line>
				<Line Number="160" Count="1">    uint32_t days = 59;</Line>
				<Line Number="161" Count="1">    uint8_t resultMonth = calcMonth(&amp;days, 2024);</Line>
				<Line Number="162" Count="1">    TEST_ASSERT_EQUAL_UINT8(2, resultMonth);</Line>
				<Line Number="163" Count="1">}</Line>
				<Line Number="164" Count="-1"></Line>
				<Line Number="165" Count="1">void calcMonth_59daysNonLeapYear_returnMarch(void) {</Line>
				<Line Number="166" Count="1">    uint32_t days = 59;</Line>
				<Line Number="167" Count="1">    uint8_t resultMonth = calcMonth(&amp;days, 2023);</Line>
				<Line Number="168" Count="1">    TEST_ASSERT_EQUAL_UINT8(3, resultMonth);</Line>
				<Line Number="169" Count="1">}</Line>
				<Line Number="170" Count="-1"></Line>
				<Line Number="171" Count="-1"></Line>
				<Line Number="172" Count="-1"></Line>
				<Line Number="173" Count="-1"></Line>
				<Line Number="174" Count="-1"></Line>
				<Line Number="175" Count="1">int main(void) {</Line>
				<Line Number="176" Count="1">    UNITY_BEGIN();</Line>
				<Line Number="177" Count="-1"></Line>
				<Line Number="178" Count="-1">    //iso functions</Line>
				<Line Number="179" Count="1">    RUN_TEST(mktime_epochStartDateUTC_returnZero);</Line>
				<Line Number="180" Count="1">    RUN_TEST(mktime_februaryThirteenthCET_calculateCorrectly);</Line>
				<Line Number="181" Count="1">    RUN_TEST(mktime_julyThirteenthCEST_calculateCorrectly);</Line>
				<Line Number="182" Count="1">    RUN_TEST(localtime_februaryThirteenthCET_returnCorrectWintertimeStruct);</Line>
				<Line Number="183" Count="1">    RUN_TEST(localtime_julyThirteenthCEST_returnCorrectSummertimeStruct);</Line>
				<Line Number="184" Count="1">    RUN_TEST(asctime_UtcCetCestTimestamps_createThreeStringsWithCorrectTimezones);</Line>
				<Line Number="185" Count="-1"></Line>
				<Line Number="186" Count="-1">    //helper functions</Line>
				<Line Number="187" Count="1">    RUN_TEST(calcYear_startEpoch2YK366days_shouldBeEpochYearPlusOne);</Line>
				<Line Number="188" Count="1">    RUN_TEST(daysInMonth_februaryLeapYear_shouldReturn29);</Line>
				<Line Number="189" Count="1">    RUN_TEST(calcUtcOffset_ForFebruaryAndJuly_shouldReturnBothValuesCorrectly);</Line>
				<Line Number="190" Count="1">    RUN_TEST(calcMonth_59daysLeapYear_returnFebruary);</Line>
				<Line Number="191" Count="1">    RUN_TEST(calcMonth_59daysNonLeapYear_returnMarch);</Line>
				<Line Number="192" Count="1">    RUN_TEST(isDST_julyThirtieth2021_returnTrue);</Line>
				<Line Number="193" Count="1">    RUN_TEST(isDST_octoberTwentySeventh2024_returnFalse);</Line>
				<Line Number="194" Count="1">    RUN_TEST(isDST_octoberTwentySixth2024_returnTrue);</Line>
				<Line Number="195" Count="1">    RUN_TEST(isDST_marchThirtyFirst2024_returnTrue);</Line>
				<Line Number="196" Count="1">    RUN_TEST(isDST_marchThirtieth2024_returnFalse);</Line>
				<Line Number="197" Count="1">    RUN_TEST(calcZellerCongruence_marchThirtieth2024_returnZeroForSaturday);</Line>
				<Line Number="198" Count="1">    RUN_TEST(calcZellerCongruence_marchThirtyFirst2024_returnOneForSunday);</Line>
				<Line Number="199" Count="1">    RUN_TEST(calcZellerCongruence_octoberThirtyFirst2024_return5ForThursday);</Line>
				<Line Number="200" Count="1">    return UNITY_END();</Line>
				<Line Number="201" Count="-1">}</Line>
			</Report>
		</File>
		<EndDateTime>Feb 28 21:45 Mitteleurop[NON-UTF-8-BYTE-0xE4]ische Zeit</EndDateTime>
		<EndTime>1709153139</EndTime>
	</CoverageLog>
</Site>

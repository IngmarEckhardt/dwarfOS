        -:    0:Source:C:/Users/eckha/AtmelStudio/DwarfOS/DwarfOS/tests/standard-gcc/_time.c
        -:    0:Graph:C:\Users\eckha\AtmelStudio\DwarfOS\DwarfOS\tests\standard-gcc\cmake-build-test-time\CMakeFiles\DwarfOS-test_Time.dir\_time.c.gcno
        -:    0:Data:C:\Users\eckha\AtmelStudio\DwarfOS\DwarfOS\tests\standard-gcc\cmake-build-test-time\CMakeFiles\DwarfOS-test_Time.dir\_time.c.gcda
        -:    0:Runs:1
        -:    1:#include "dwarf-os/time.h"
        -:    2:#include <unity.h>
        -:    3:
        -:    4://given
        -:    5:struct tm     epochStartDate = {0, 0, 0, 1, 1, EPOCH_YEAR,0,0,0};
        -:    6:struct tm     februaryThirteenth2021 = {0, 0, 0, 13, 2, 2021, 0, 0, 1};
        -:    7:struct tm     julyThirteenth2021 = {0, 0, 0, 13, 7, 2021, 0, 0, 2};
        -:    8:const uint32_t      februaryThirteenth2021Time_T = 666489600;
        -:    9:const uint32_t      julyThirtieth2021Time_T = 679449600;
        -:   10:
        -:   11://declaration for the helper functions that aren't present in the header
        -:   12:uint16_t            calcYear(uint32_t *days);
        -:   13:uint8_t             daysInMonth(uint16_t year, uint8_t month);
        -:   14:uint8_t             calcUtcOffset(uint32_t epochTimeY2K);
        -:   15:uint8_t             calcMonth(uint32_t *days, uint16_t year);
        -:   16:uint8_t             isDst(uint16_t year, uint8_t month, uint8_t day);
        -:   17:uint8_t             calcZellerCongruence(uint16_t year, uint8_t month, uint8_t day);
        -:   18:#include "src/time.c"
        -:   19:
function setUp called 19 returned 100% blocks executed 100%
       19:   20:void setUp(void) {}
function tearDown called 19 returned 100% blocks executed 100%
       19:   21:void tearDown(void) {}
        -:   22:
        -:   23://iso functions
        -:   24:
function mktime_epochStartDateUTC_returnZero called 1 returned 100% blocks executed 100%
        1:   25:void mktime_epochStartDateUTC_returnZero(void) {
        -:   26:
        1:   27:    uint32_t resultInt32 = mktime(&epochStartDate);
        1:   27-block  0
call    0 returned 1
        1:   28:    uint32_t expected_result = 0;
        1:   29:    TEST_ASSERT_EQUAL_UINT32(expected_result, resultInt32);
call    0 returned 1
        1:   30:}
        -:   31:
function mktime_februaryThirteenthCET_calculateCorrectly called 1 returned 100% blocks executed 100%
        1:   32:void mktime_februaryThirteenthCET_calculateCorrectly(void) {
        -:   33:
        1:   34:    uint32_t resultInt32 = mktime(&februaryThirteenth2021);
        1:   34-block  0
call    0 returned 1
        1:   35:    uint32_t expected_result = februaryThirteenth2021Time_T;
        1:   36:    TEST_ASSERT_EQUAL_UINT32(expected_result, resultInt32);
call    0 returned 1
        1:   37:}
        -:   38:
function mktime_julyThirteenthCEST_calculateCorrectly called 1 returned 100% blocks executed 100%
        1:   39:void mktime_julyThirteenthCEST_calculateCorrectly(void) {
        -:   40:
        1:   41:    uint32_t resultInt32 = mktime(&julyThirteenth2021);
        1:   41-block  0
call    0 returned 1
        1:   42:    uint32_t expected_result = julyThirtieth2021Time_T;
        1:   43:    TEST_ASSERT_EQUAL_UINT32(expected_result, resultInt32);
call    0 returned 1
        1:   44:}
        -:   45:// Helper function to test asctime with a given timestamp
function test_asctime_with_timestamp called 3 returned 100% blocks executed 90%
        3:   46:void test_asctime_with_timestamp(struct tm * timestamp, const char * expected_format, size_t expected_length) {
        3:   47:    char * resultString = asctime(timestamp);
        3:   47-block  0
call    0 returned 3
       3*:   48:    TEST_ASSERT_NOT_NULL(resultString);
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%:   48-block  0
call    2 never executed
        -:   49:
        3:   50:    char expected_result[expected_length];
        3:   51:    sprintf(expected_result, expected_format,
        3:   52:            timestamp->tm_year, timestamp->tm_mon, timestamp->tm_mday,
        3:   53:            timestamp->tm_hour, timestamp->tm_min, timestamp->tm_sec);
        3:   53-block  0
call    0 returned 3
        -:   54:
        3:   55:    TEST_ASSERT_EQUAL_STRING(expected_result, resultString);
call    0 returned 3
        3:   56:    size_t result_length = 0;
       78:   57:    while (resultString[result_length] != '\0') {result_length++;}
       75:   57-block  0
       78:   57-block  1
branch  0 taken 75
branch  1 taken 3 (fallthrough)
        3:   58:    TEST_ASSERT_EQUAL_UINT32(expected_length, result_length);
        3:   58-block  0
call    0 returned 3
        3:   59:}
        -:   60:
function asctime_UtcCetCestTimestamps_createThreeStringsWithCorrectTimezones called 1 returned 100% blocks executed 100%
        1:   61:void asctime_UtcCetCestTimestamps_createThreeStringsWithCorrectTimezones(void) {
        -:   62:    // Testing with epochStartDate
        1:   63:    test_asctime_with_timestamp(&epochStartDate, "%04d-%02d-%02d %02d:%02d:%02d (UTC)", 25);
        1:   63-block  0
call    0 returned 1
        -:   64:
        -:   65:    // Testing with februaryThirteenth2021
        1:   66:    test_asctime_with_timestamp(&februaryThirteenth2021, "%04d-%02d-%02d %02d:%02d:%02d (CET)", 25);
call    0 returned 1
        -:   67:
        -:   68:    // Testing with julyThirteenth2021
        1:   69:    test_asctime_with_timestamp(&julyThirteenth2021, "%04d-%02d-%02d %02d:%02d:%02d(CEST)", 25);
call    0 returned 1
        1:   70:}
        -:   71:
function localtime_februaryThirteenthCET_returnCorrectWintertimeStruct called 1 returned 100% blocks executed 90%
        1:   72:void localtime_februaryThirteenthCET_returnCorrectWintertimeStruct(void) {
        -:   73:
        1:   74:    struct tm * result = localtime(&februaryThirteenth2021Time_T);
        1:   74-block  0
call    0 returned 1
        -:   75:    //add one hour because of CET
       1*:   76:    TEST_ASSERT_NOT_NULL(result);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   76-block  0
call    2 never executed
        1:   77:    TEST_ASSERT_EQUAL_INT(0, result->tm_sec);
        1:   77-block  0
call    0 returned 1
        1:   78:    TEST_ASSERT_EQUAL_INT(0, result->tm_min);
call    0 returned 1
        1:   79:    TEST_ASSERT_EQUAL_INT(1, result->tm_hour);
call    0 returned 1
        1:   80:    TEST_ASSERT_EQUAL_INT(13, result->tm_mday);
call    0 returned 1
        1:   81:    TEST_ASSERT_EQUAL_INT(2, result->tm_mon);
call    0 returned 1
        1:   82:    TEST_ASSERT_EQUAL_INT(2021, result->tm_year);
call    0 returned 1
        1:   83:    free(result);
        1:   84:}
        -:   85:
function localtime_julyThirteenthCEST_returnCorrectSummertimeStruct called 1 returned 100% blocks executed 90%
        1:   86:void localtime_julyThirteenthCEST_returnCorrectSummertimeStruct(void) {
        1:   87:    struct tm * result = localtime(&julyThirtieth2021Time_T);
        1:   87-block  0
call    0 returned 1
        -:   88:    //add two hours because of CEST
       1*:   89:    TEST_ASSERT_NOT_NULL(result);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   89-block  0
call    2 never executed
        1:   90:    TEST_ASSERT_EQUAL_INT(0, result->tm_sec);
        1:   90-block  0
call    0 returned 1
        1:   91:    TEST_ASSERT_EQUAL_INT(0, result->tm_min);
call    0 returned 1
        1:   92:    TEST_ASSERT_EQUAL_INT(2, result->tm_hour);
call    0 returned 1
        1:   93:    TEST_ASSERT_EQUAL_INT(13, result->tm_mday);
call    0 returned 1
        1:   94:    TEST_ASSERT_EQUAL_INT(7, result->tm_mon);
call    0 returned 1
        1:   95:    TEST_ASSERT_EQUAL_INT(2021, result->tm_year);
call    0 returned 1
        1:   96:}
        -:   97:
        -:   98://helper functions
        -:   99:
function calcYear_startEpoch2YK366days_shouldBeEpochYearPlusOne called 1 returned 100% blocks executed 100%
        1:  100:void calcYear_startEpoch2YK366days_shouldBeEpochYearPlusOne(void) {
        1:  101:    uint32_t days = 366; // Year 2000 was a Leap Year
        1:  102:    uint16_t resultYear = calcYear(&days);
        1:  102-block  0
call    0 returned 1
        1:  103:    TEST_ASSERT_EQUAL_UINT16(EPOCH_YEAR + 1, resultYear);
call    0 returned 1
        1:  104:}
        -:  105:
function daysInMonth_februaryLeapYear_shouldReturn29 called 1 returned 100% blocks executed 100%
        1:  106:void daysInMonth_februaryLeapYear_shouldReturn29(void) {
        1:  107:    uint8_t resultMonth = daysInMonth(2024, 2);
        1:  107-block  0
call    0 returned 1
        1:  108:    TEST_ASSERT_EQUAL_UINT8(29, resultMonth); // Leap year
call    0 returned 1
        1:  109:}
        -:  110:
function calcUtcOffset_ForFebruaryAndJuly_shouldReturnBothValuesCorrectly called 1 returned 100% blocks executed 100%
        1:  111:void calcUtcOffset_ForFebruaryAndJuly_shouldReturnBothValuesCorrectly(void) {
        1:  112:    uint8_t resultOffset = calcUtcOffset(februaryThirteenth2021Time_T);
        1:  112-block  0
call    0 returned 1
        1:  113:    TEST_ASSERT_EQUAL_UINT8(1, resultOffset);
call    0 returned 1
        -:  114:
        1:  115:    uint8_t resultOffset2 = calcUtcOffset(julyThirtieth2021Time_T);
call    0 returned 1
        1:  116:    TEST_ASSERT_EQUAL_UINT8(2, resultOffset2);
call    0 returned 1
        1:  117:}
        -:  118:
function isDST_julyThirtieth2021_returnTrue called 1 returned 100% blocks executed 100%
        1:  119:void isDST_julyThirtieth2021_returnTrue(void) {
        1:  120:    uint8_t resultOffset2 = isDst(2021, 7, 13);
        1:  120-block  0
call    0 returned 1
        1:  121:    TEST_ASSERT_EQUAL_UINT8(1, resultOffset2);
call    0 returned 1
        1:  122:}
        -:  123:
function isDST_octoberTwentySeventh2024_returnFalse called 1 returned 100% blocks executed 100%
        1:  124:void isDST_octoberTwentySeventh2024_returnFalse(void) {
        1:  125:    uint8_t resultOffset2 = isDst(2024, 10, 27);
        1:  125-block  0
call    0 returned 1
        1:  126:    TEST_ASSERT_EQUAL_UINT8(0, resultOffset2);
call    0 returned 1
        1:  127:}
        -:  128:
function isDST_octoberTwentySixth2024_returnTrue called 1 returned 100% blocks executed 100%
        1:  129:void isDST_octoberTwentySixth2024_returnTrue(void) {
        1:  130:    uint8_t resultOffset2 = isDst(2024, 10, 26);
        1:  130-block  0
call    0 returned 1
        1:  131:    TEST_ASSERT_EQUAL_UINT8(1, resultOffset2);
call    0 returned 1
        1:  132:}
        -:  133:
function isDST_marchThirtyFirst2024_returnTrue called 1 returned 100% blocks executed 100%
        1:  134:void isDST_marchThirtyFirst2024_returnTrue(void) {
        1:  135:    uint8_t resultOffset2 = isDst(2024, 3, 31);
        1:  135-block  0
call    0 returned 1
        1:  136:    TEST_ASSERT_EQUAL_UINT8(1, resultOffset2);
call    0 returned 1
        1:  137:}
        -:  138:
function isDST_marchThirtieth2024_returnFalse called 1 returned 100% blocks executed 100%
        1:  139:void isDST_marchThirtieth2024_returnFalse(void) {
        1:  140:    uint8_t resultOffset2 = isDst(2024, 3, 30);
        1:  140-block  0
call    0 returned 1
        1:  141:    TEST_ASSERT_EQUAL_UINT8(0, resultOffset2);
call    0 returned 1
        1:  142:}
        -:  143:
function calcZellerCongruence_marchThirtieth2024_returnZeroForSaturday called 1 returned 100% blocks executed 100%
        1:  144:void calcZellerCongruence_marchThirtieth2024_returnZeroForSaturday(void) {
        1:  145:    uint8_t resultOffset2 = calcZellerCongruence(2024, 3, 30);
        1:  145-block  0
call    0 returned 1
        1:  146:    TEST_ASSERT_EQUAL_UINT8(0, resultOffset2);
call    0 returned 1
        1:  147:}
        -:  148:
function calcZellerCongruence_marchThirtyFirst2024_returnOneForSunday called 1 returned 100% blocks executed 100%
        1:  149:void calcZellerCongruence_marchThirtyFirst2024_returnOneForSunday(void) {
        1:  150:    uint8_t resultOffset2 = calcZellerCongruence(2024, 3, 31);
        1:  150-block  0
call    0 returned 1
        1:  151:    TEST_ASSERT_EQUAL_UINT8(1, resultOffset2);
call    0 returned 1
        1:  152:}
        -:  153:
function calcZellerCongruence_octoberThirtyFirst2024_return5ForThursday called 1 returned 100% blocks executed 100%
        1:  154:void calcZellerCongruence_octoberThirtyFirst2024_return5ForThursday(void) {
        1:  155:    uint8_t resultOffset2 = calcZellerCongruence(2024, 10, 31);
        1:  155-block  0
call    0 returned 1
        1:  156:    TEST_ASSERT_EQUAL_UINT8(5, resultOffset2);
call    0 returned 1
        1:  157:}
        -:  158:
function calcMonth_59daysLeapYear_returnFebruary called 1 returned 100% blocks executed 100%
        1:  159:void calcMonth_59daysLeapYear_returnFebruary(void) {
        1:  160:    uint32_t days = 59;
        1:  161:    uint8_t resultMonth = calcMonth(&days, 2024);
        1:  161-block  0
call    0 returned 1
        1:  162:    TEST_ASSERT_EQUAL_UINT8(2, resultMonth);
call    0 returned 1
        1:  163:}
        -:  164:
function calcMonth_59daysNonLeapYear_returnMarch called 1 returned 100% blocks executed 100%
        1:  165:void calcMonth_59daysNonLeapYear_returnMarch(void) {
        1:  166:    uint32_t days = 59;
        1:  167:    uint8_t resultMonth = calcMonth(&days, 2023);
        1:  167-block  0
call    0 returned 1
        1:  168:    TEST_ASSERT_EQUAL_UINT8(3, resultMonth);
call    0 returned 1
        1:  169:}
        -:  170:
        -:  171:
        -:  172:
        -:  173:
        -:  174:
function main called 1 returned 100% blocks executed 100%
        1:  175:int main(void) {
        1:  176:    UNITY_BEGIN();
        1:  176-block  0
call    0 returned 1
        -:  177:
        -:  178:    //iso functions
        1:  179:    RUN_TEST(mktime_epochStartDateUTC_returnZero);
call    0 returned 1
        1:  180:    RUN_TEST(mktime_februaryThirteenthCET_calculateCorrectly);
call    0 returned 1
        1:  181:    RUN_TEST(mktime_julyThirteenthCEST_calculateCorrectly);
call    0 returned 1
        1:  182:    RUN_TEST(localtime_februaryThirteenthCET_returnCorrectWintertimeStruct);
call    0 returned 1
        1:  183:    RUN_TEST(localtime_julyThirteenthCEST_returnCorrectSummertimeStruct);
call    0 returned 1
        1:  184:    RUN_TEST(asctime_UtcCetCestTimestamps_createThreeStringsWithCorrectTimezones);
call    0 returned 1
        -:  185:
        -:  186:    //helper functions
        1:  187:    RUN_TEST(calcYear_startEpoch2YK366days_shouldBeEpochYearPlusOne);
call    0 returned 1
        1:  188:    RUN_TEST(daysInMonth_februaryLeapYear_shouldReturn29);
call    0 returned 1
        1:  189:    RUN_TEST(calcUtcOffset_ForFebruaryAndJuly_shouldReturnBothValuesCorrectly);
call    0 returned 1
        1:  190:    RUN_TEST(calcMonth_59daysLeapYear_returnFebruary);
call    0 returned 1
        1:  191:    RUN_TEST(calcMonth_59daysNonLeapYear_returnMarch);
call    0 returned 1
        1:  192:    RUN_TEST(isDST_julyThirtieth2021_returnTrue);
call    0 returned 1
        1:  193:    RUN_TEST(isDST_octoberTwentySeventh2024_returnFalse);
call    0 returned 1
        1:  194:    RUN_TEST(isDST_octoberTwentySixth2024_returnTrue);
call    0 returned 1
        1:  195:    RUN_TEST(isDST_marchThirtyFirst2024_returnTrue);
call    0 returned 1
        1:  196:    RUN_TEST(isDST_marchThirtieth2024_returnFalse);
call    0 returned 1
        1:  197:    RUN_TEST(calcZellerCongruence_marchThirtieth2024_returnZeroForSaturday);
call    0 returned 1
        1:  198:    RUN_TEST(calcZellerCongruence_marchThirtyFirst2024_returnOneForSunday);
call    0 returned 1
        1:  199:    RUN_TEST(calcZellerCongruence_octoberThirtyFirst2024_return5ForThursday);
call    0 returned 1
        1:  200:    return UNITY_END();
call    0 returned 1
        -:  201:}

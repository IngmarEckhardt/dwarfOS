        -:    0:Source:C:/Users/eckha/AtmelStudio/DwarfOS/DwarfOS/src/ascii_helper.c
        -:    0:Graph:C:\Users\eckha\AtmelStudio\DwarfOS\DwarfOS\tests\standard-gcc\cmake-build-test-time\CMakeFiles\DwarfOS-testLibAsciiHelperReduced.dir\C_\Users\eckha\AtmelStudio\DwarfOS\DwarfOS\src\ascii_helper.c.gcno
        -:    0:Data:C:\Users\eckha\AtmelStudio\DwarfOS\DwarfOS\tests\standard-gcc\cmake-build-test-time\CMakeFiles\DwarfOS-testLibAsciiHelperReduced.dir\C_\Users\eckha\AtmelStudio\DwarfOS\DwarfOS\src\ascii_helper.c.gcda
        -:    0:Runs:1
        -:    1:#include <dwarf-os/ascii_helper.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:
        -:    5:uint16_t computeArrayWithStringLengths(uint8_t amountStrings, char * strings[], uint16_t * stringLengthArray);
        -:    6:
function integerToAscii called 18 returned 100% blocks executed 100%
       18:    7:void integerToAscii(char * result, uint32_t num, uint8_t size, uint8_t position) {
       18:    8:    uint32_t divisor = 1;
       42:    9:    for (uint8_t i = 0; i < size - 1; ++i) { divisor *= 10; }
       18:    9-block  0
       24:    9-block  1
       42:    9-block  2
branch  0 taken 24
branch  1 taken 18 (fallthrough)
        -:   10:
       60:   11:    for (uint8_t i = position; i < position + size; ++i) {
       18:   11-block  0
       60:   11-block  1
branch  0 taken 42
branch  1 taken 18 (fallthrough)
       42:   12:        uint8_t digit = num / divisor;
       42:   13:        result[i] = digit + '0';
       42:   14:        num %= divisor;
       42:   15:        divisor /= 10;
       42:   15-block  0
        -:   16:    }
       18:   17:}
        -:   18:
function concatStrings called 0 returned 0% blocks executed 0%
    #####:   19:char * concatStrings(uint8_t amountOfStrings, char * strings[]) {
    #####:   20:    uint16_t * stringLengthArray = (uint16_t *) malloc(amountOfStrings * sizeof(uint16_t));
    #####:   21:    if (stringLengthArray == NULL) { return NULL; }
    %%%%%:   21-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   21-block  1
        -:   22:
        -:   23:    //16kB max length of a string is enough for every avr mcu
    #####:   24:    uint16_t total_length = computeArrayWithStringLengths(amountOfStrings, strings, stringLengthArray);
    %%%%%:   24-block  0
call    0 never executed
        -:   25:
    #####:   26:    char * stringToReturn = malloc((total_length + 1) * sizeof(char));
    #####:   27:    if (stringToReturn == NULL) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   28:        free(stringLengthArray);
    #####:   29:        return NULL;
    %%%%%:   29-block  0
        -:   30:    }
        -:   31:
    #####:   32:    char * destinationIndex = stringToReturn;
    #####:   33:    for (uint8_t i = 0; i < amountOfStrings; i++) {
    %%%%%:   33-block  0
    %%%%%:   33-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:   34:        memcpy(destinationIndex, strings[i], stringLengthArray[i]);
    #####:   35:        destinationIndex += stringLengthArray[i];
    %%%%%:   35-block  0
        -:   36:    }
    #####:   37:    *destinationIndex = '\0';
    #####:   38:    free(stringLengthArray);
    #####:   39:    return stringToReturn;
    %%%%%:   39-block  0
        -:   40:}
        -:   41:
        -:   42:
function computeArrayWithStringLengths called 0 returned 0% blocks executed 0%
    #####:   43:uint16_t computeArrayWithStringLengths(uint8_t amountStrings, char * strings[], uint16_t * stringLengthArray) {
    #####:   44:    if (strings == NULL || stringLengthArray == NULL) { return 0; }
    %%%%%:   44-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   44-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:   44-block  2
        -:   45:    
    #####:   46:    uint16_t total_length = 0;
        -:   47:
    #####:   48:    for (uint8_t i = 0; i < amountStrings; i++) {
    %%%%%:   48-block  0
    %%%%%:   48-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:   49:        uint16_t length = 0;
    #####:   50:        char * tempPointer = strings[i];  // Temporary pointer to iterate over the string
    #####:   51:        while (*tempPointer != '\0') {
    %%%%%:   51-block  0
    %%%%%:   51-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:   52:            length++;
    #####:   53:            tempPointer++;
    %%%%%:   53-block  0
        -:   54:        }
    #####:   55:        total_length += length;
    #####:   56:        stringLengthArray[i] = length;
    %%%%%:   56-block  0
        -:   57:    }
    #####:   58:    return total_length;
    %%%%%:   58-block  0
        -:   59:}
        -:   60:
function dOS_initAsciiHelper called 3 returned 100% blocks executed 75%
        3:   61:AsciiHelper * dOS_initAsciiHelper(void) {
        3:   62:    AsciiHelper * helper = malloc(sizeof(AsciiHelper));
       3*:   63:    if (helper == NULL) { return NULL; }
        3:   63-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%:   63-block  1
        -:   64:    else {
        3:   65:        helper->integerToAscii = integerToAscii;
        3:   66:        helper->concatStrings = concatStrings;
        3:   67:        return helper;
        3:   67-block  0
        -:   68:    }
        -:   69:}
